{"title":"Using_a_monorepo_with_github","date":"2022-03-29T17:34:29.000Z","date_formatted":{"ll":"Mar 29, 2022","L":"03/29/2022","MM-DD":"03-29"},"link":"2022/03/29/Using-a-monorepo-with-github","updated":"2022-03-29T18:06:22.827Z","content":"<p>Create some examples of github actions around monorepos</p>\n<span id=\"more\"></span>\n<h1 id=\"introduction\">Introduction<a title=\"#introduction\" href=\"#introduction\"></a></h1>\n<p>Recently, a co-worker was struggling with github actions.  They had a monorepo, or a single repository with a front end and back end code in it.  Many organizations would require that you create two repos: one for the front end and one for the backend.</p>\n<p>There are a lot of reasons to use monorepos and many for not using them. I’m not going there. This post will show you how to get the builds going and point out a number of pit falls along the way.</p>\n<h1 id=\"background\">Background<a title=\"#background\" href=\"#background\"></a></h1>\n<p>There are MANY explainations of github monorepos on the web. However, they have the same problems: the author shows you a specific solution, which many times is very complex and the author fails to show you how they got to that specific solution. There are a number of places where you have to write the action yaml file in a specific way or it does not achieve what you want.</p>\n<p>Github is a very powerful code version system. It is available to everybody and so far Microsoft has maintained a free tier. A few years ago, github added “actions”, which effectively make it the center piece of a complete continuous integration and continuous deployment (CI/CD) system. Actions can:</p>\n<ul>\n<li>build your code</li>\n<li>run tests on your code</li>\n<li>handle deploying your system, to a container registry or production</li>\n<li>package your code for testing, or putting the code into containers / VMs.</li>\n</ul>\n<p>Actions are independent of the programming language used to write the code. The github community has supplied lots of example actions to solve multitude of problems. There is even a market place full of ready to use actions to solve simple or complex automation tasks. With Actions, github can completely replace, legacy systems like Jenkins, Travis or CircleCI.</p>\n<h1 id=\"our-environment\">Our environment<a title=\"#our-environment\" href=\"#our-environment\"></a></h1>\n<p>We are going to write 2 simple programs: a backend program in node that exposes an API; and a front end in ReactJS to consume that API and do some display.</p>\n","next":{"title":"Docker_without_a_base_OS","link":"2022/01/29/Docker-without-a-base-OS"},"plink":"http://muguira-james.github.io/2022/03/29/Using-a-monorepo-with-github/","toc":[{"id":"introduction","title":"Introduction","index":"1"},{"id":"background","title":"Background","index":"2"},{"id":"our-environment","title":"Our environment","index":"3"}],"reading_time":"338 words in 2 min"}