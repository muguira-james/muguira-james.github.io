{"title":"Create a REST service with Spring","date":"2018-10-14T17:27:12.000Z","date_formatted":{"ll":"Oct 14, 2018","L":"10/14/2018","MM-DD":"10-14"},"link":"2018/10/14/2019-10-14-A-Create-a-REST-service-with-Spring","tags":["Java","REST"],"categories":["Programming"],"updated":"2022-03-29T17:25:38.043Z","content":"<p>Create  REST service using Spring Boot and our Graph ADT</p>\n<span id=\"more\"></span>\n<h1 id=\"introduction\">Introduction<a title=\"#introduction\" href=\"#introduction\"></a></h1>\n<p>We’ve been working with a Graph abstract data type (ADT).  We’ve shown how to:</p>\n<ul>\n<li>define the ADT in Java</li>\n<li>Create unit tests, in JUnit, to demonstrate that our implementation basically functions correctly,</li>\n<li>Define higher-level tests, using Cucumber and JUint, related to our overall needs (business needs),</li>\n</ul>\n<p>In this article, we’ll examine how to place the ADT behind a REST service.  Defining a web service used to be an exercise in writing boilerplate before Pivotal Software defined Spring Boot. Spring Boot handles the entire boiler plating and wiring of the components together into a service.  Spring Boot envisions our ADT as a Java Bean.  It uses several additional libraries to make it easy to convert Java objects into the language of the web, JSON.</p>\n<p>A Java Bean is a component.  It defines a standard interface with “getter/setter” access to private properties.  It is meant to be a reusable component.  In our case, we have several beans we use to realize the Graph:</p>\n<ul>\n<li>A Vertex,</li>\n<li>An Edge,</li>\n<li>A Graph.</li>\n</ul>\n<p>Our original specification of a Vertex uses 2 constructors: create a new Vertex with default state (name=””, and id=0) or supply a name and id.  The Edge requires you to supply 2 completed Vertex.  Finally, the Graph can be constructed without any supplied parameters.  These 3 beans need to be converted into JSON if we are going to expose them to a consumer.  Spring boot uses the Jackson library to handle the conversion.  Out of the box, Jackson assumes that you have used the “getVariable” and “setVariable” convention throughout your software.  Close inspection reveals we did not do that originally.  To make our job easy, let’s redefine Vertex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Vertex &#123;</span><br><span class=\"line\">s''private String _name;</span><br><span class=\"line\">s''private int _strength;</span><br><span class=\"line\">s''private ArrayList&lt;String&gt; _carries = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''private int _ID;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public String getName() &#123; return _name; &#125;</span><br><span class=\"line\">s''public ArrayList&lt;String&gt; getCarriedStuff() &#123; return _carries; &#125;</span><br><span class=\"line\">s''public int getId() &#123; return _ID; &#125;</span><br><span class=\"line\">s''public int getStrength() &#123; return _strength; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setName(String n) &#123; _name = n; &#125;</span><br><span class=\"line\">s''public void addToStuffCarried(String thing) &#123; _carries.add(thing); &#125;</span><br><span class=\"line\">s''public void setID(int id) &#123; _ID = id; &#125;</span><br><span class=\"line\">s''public void setStrength(int s) &#123; _strength = s; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setVertex(String name, int id) &#123; _name = name; _ID = id; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public Vertex(String nm, int initialID) &#123; _ID = initialID; _name = nm; &#125;</span><br><span class=\"line\">s''public Vertex() &#123; _ID = 0; _name = &quot;&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Because Edge uses public instance variables we don’t have any modifications.   The Graph definition is abstract.  However, the definition of GraphAdjList required one simple modification: adding a method to return the graph so Jackson can serialize it in JSON.  We also defined an easier way to add Edges to the Graph by creating an Edge calling addEdge(Edge e).</p>\n<p>With these changes in place we can define the Spring Boot components we need.  First, we define the overall Application class and add the Spring Boot annotations required to wire it to the Spring Framework.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ContainerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ContainerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Then we define the controller class.  The Spring framework uses several annotations to wire your classes.  The “RestController” annotation marks each method in the class as returning a response object or something that can be serialized in JSON.  The HTTP protocol defines that each method handles a request and a response.  Returning a response object (vs. a view) allows for further processing in the Spring framework.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class=\"line\"></span><br><span class=\"line\">import grandview.Edge;</span><br><span class=\"line\">import grandview.Vertex;</span><br><span class=\"line\">import grandview.GraphAdjList;</span><br><span class=\"line\"></span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class GraphController &#123;</span><br><span class=\"line\">s'' private static final String template = &quot;%s!&quot;;</span><br><span class=\"line\">s''    private final AtomicInteger counter = new AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">s''   @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddVertex&quot;)</span><br><span class=\"line\">s''    public String AddVertex(@RequestParam(value=&quot;VertexName&quot;, \t\t\t\t\tdefaultValue=&quot;Jim&quot;) String name) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(name);</span><br><span class=\"line\">s''    \tadjListMap.addVertex(v);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn v.getName();</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddEdge&quot;)</span><br><span class=\"line\">s''    public String AddEdge(@RequestParam String vertexName1, \t\t\t\t@RequestParam String vertexName2) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''        Vertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(vertexName1);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex w = new Vertex();</span><br><span class=\"line\">s''    \tw.setName(vertexName2);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tadjListMap.addEdge(v, w);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn &quot;Edge Added&quot;;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/getGraph&quot;)</span><br><span class=\"line\">s''    public GraphAdjList getGraph() &#123;</span><br><span class=\"line\">s''    \treturn adjListMap;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Notice there is a “GetMapping” annotation and a “CrossOrigin” annotation on each method.  The “GetMapping” annotation exposes the method name as an end point (i.e. <a href=\"http://localhost\">http://localhost</a>:port/AddVertex).  The “CrossOrigin” annotation enables “cross origin resource sharing” or CORS.  I’ve handled CORS at the method level (see: <a href=\"http://spring.io/guides/gs/rest-service-cors/\">http://spring.io/guides/gs/rest-service-cors/</a> for details on further approaches).  This code does a poor job of handling error.  Error handling in REST is beyond this article.</p>\n<p>To test these end points we construct a url in the browser.  For example, let’s add a few vertices and edges and retrieve the resulting graph:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Jasper</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Tom</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Charlie</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Emma</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Olivia</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Jasper&amp;vertexName2=Tom</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Charlie</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Olivia</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">And the result is:</span><br><span class=\"line\"></span><br><span class=\"line\">s''</span><br><span class=\"line\">numVerticess''6</span><br><span class=\"line\">numEdgess''4</span><br><span class=\"line\">graphs''</span><br><span class=\"line\">Olivias''[]</span><br><span class=\"line\">Jaspers''</span><br><span class=\"line\">0s''</span><br><span class=\"line\">beginnings''</span><br><span class=\"line\">names''&quot;Jasper&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">ends''</span><br><span class=\"line\">names''&quot;Tom&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">Toms''</span><br><span class=\"line\">0s''</span><br><span class=\"line\">beginnings''</span><br><span class=\"line\">names''&quot;Tom&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">ends''</span><br><span class=\"line\">names''&quot;Charlie&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">1s''</span><br><span class=\"line\">beginnings''</span><br><span class=\"line\">names''&quot;Tom&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">ends''</span><br><span class=\"line\">names''&quot;Olivia&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">2s''</span><br><span class=\"line\">beginnings''</span><br><span class=\"line\">names''&quot;Tom&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">ends''</span><br><span class=\"line\">names''&quot;Ben&quot;</span><br><span class=\"line\">ids''0</span><br><span class=\"line\">strengths''0</span><br><span class=\"line\">carriedStuffs''[]</span><br><span class=\"line\">Charlies''[]</span><br><span class=\"line\">Bens''[]</span><br><span class=\"line\">Emmas''[]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>To see the connections, you have to find each “beginning / end” pair for each Edge.  Not the easiest output to parse! However, the graph is connected and again, there is no error handling.</p>\n<h2 id=\"conclusion\">Conclusion<a title=\"#conclusion\" href=\"#conclusion\"></a></h2>\n<p>Spring Boot really does make creating REST services easy.  This article has covered some of the more useful Spring Boot annotations and shown how to make simple java beans for realizing the REST service components.  There is a lot more that can be done in this space and I would encourage you to consult the excellent Spring Boot guides (see <a href=\"http://spring.io/guides\">http://spring.io/guides</a> ).</p>\n","prev":{"title":"React UI construction and testing with Storybook","link":"2018/10/14/2018-10-23-React-UI-construction-and-testing-with-storybook"},"next":{"title":"Cucumber Testing in Java","link":"2018/10/09/2018-10-09-A-Cucumber-Testing-in-Java"},"plink":"http://muguira-james.github.io/2018/10/14/2019-10-14-A-Create-a-REST-service-with-Spring/","toc":[{"id":"introduction","title":"Introduction","index":"1","children":[{"id":"conclusion","title":"Conclusion","index":"1.1"}]}],"reading_time":"1308 words in 9 min"}