{"title":"Docker_without_a_base_OS","date":"2022-01-29T23:23:11.000Z","date_formatted":{"ll":"Jan 29, 2022","L":"01/29/2022","MM-DD":"01-29"},"link":"2022/01/29/Docker-without-a-base-OS","updated":"2022-03-29T17:25:38.045Z","content":"<p>The mechanics of creating docker images without loading a base O/S</p>\n<span id=\"more\"></span>\n<h1 id=\"introduction\">Introduction<a title=\"#introduction\" href=\"#introduction\"></a></h1>\n<p>We always see containers creates with a statement like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\"> ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Ubuntu, in the “FROM” statement refers to a version of the linux operating system provided by Canonical. Could we create a container without the OS?</p>\n<p>The answer is yes, but you have to understand how a program is translated from source code to a executable image. This post will cover these ideas at a very high level.</p>\n<h1 id=\"a-sample-program-to-work-from\">A sample program to work from<a title=\"#a-sample-program-to-work-from\" href=\"#a-sample-program-to-work-from\"></a></h1>\n<p>To get started we need a simple program. How about this…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">    printf(&quot;hello world\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Yeah I know, REALLY! Hello world? In this case all we need is a program that outputs something. “Hello world” is perfect.</p>\n<h1 id=\"dynamic-vs.-static-linking\">Dynamic vs. Static Linking<a title=\"#dynamic-vs.-static-linking\" href=\"#dynamic-vs.-static-linking\"></a></h1>\n<p>The C programming language is really a base language specification with a flexible library system to support it. These libraries are how you program novel software and hardware devices. These libraries are extensions of the base language. It would be very difficult to envision every possible extension or library in advance.</p>\n<p>For example, the C language provides a “standard output” library to handle a wide range of I/O. There is a library to handle working with strings, time, and even specific database systems.</p>\n<p>Let’s first compile our simple example program with no switches. We will compile it down to an executable. Then let’s examine how the a.out program is created and setup to run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Documents/racket-stuff/junk$ ls</span><br><span class=\"line\">hello.c</span><br><span class=\"line\">~/Documents/racket-stuff/junk$ gcc hello.c </span><br><span class=\"line\">~/Documents/racket-stuff/junk$ ls -lah</span><br><span class=\"line\">total 32K</span><br><span class=\"line\">drwxrwxr-x  2 magoo magoo 4.0K Jan 29 20:51 .</span><br><span class=\"line\">drwxrwxr-x 10 magoo magoo 4.0K Jan 29 20:48 ..</span><br><span class=\"line\">-rwxrwxr-x  1 magoo magoo  17K Jan 29 20:51 a.out</span><br><span class=\"line\">-rw-rw-r--  1 magoo magoo   82 Jan 29 20:51 hello.c</span><br><span class=\"line\">~/Documents/racket-stuff/junk$ file a.out</span><br><span class=\"line\">a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2c3dad874dc1ee4d5a610d0a0862b622fc36dc8c, for GNU/Linux 3.2.0, not stripped</span><br><span class=\"line\">~/Documents/racket-stuff/junk$ ldd a.out</span><br><span class=\"line\">s''linux-vdso.so.1 (0x00007fff85f43000)</span><br><span class=\"line\">s''libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbe9bd1b000)</span><br><span class=\"line\">s''/lib64/ld-linux-x86-64.so.2 (0x00007fbe9bf21000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The command “file a.out” exposed information about the executable. “File” told us the a.out executable was a 64 bit dynamically linked executable. To discover more, I used the ldd command, a command that prints shared object information. With no switches the “hello.c” program source file was compiled down to a shared or dynamic executable format file. In order for it to execute, the compiler and linker added information to the output so it could find or ask for the information it needed. This information tells the system how to find stuff like output routines, and how to call the kernel to do the printf output.</p>\n<p>What does the output of ldd tell us? “ldd” told us that there are 3 libraries linked into the executable. These are:</p>\n<ul>\n<li>linux-vdso.so.1 - a kernel interface file that makes calling kernel functions faster</li>\n<li>libc.so.6 - the C standard library</li>\n<li>/lib64/ld-linux-x86-64.so.2 - the linux shared linker library that can find and complete linkages at run time.</li>\n</ul>\n<p>At this point we know the 17K byte a.out file has the translated instructions from the hello.c source, plus some additional information so the system can find and run the code.</p>\n<p>If we try to put this a.out file into a docker container without an operating system we would have problems. First, let’s create a docker config file:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM scratch</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY a.out .</span><br><span class=\"line\">CMD [&quot;/app/a.out&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The Dockerfile does the following:</p>\n<ul>\n<li>FROM scratch - open a new image with nothing in it</li>\n<li>WORKDIR /app - create a working directory</li>\n<li>COPY a.out . - copy the hello executable file into the container /app dir</li>\n<li>CMD [“/app/a.out”] - when the container starts run the file /app/a.out</li>\n</ul>\n<p>Building the docker image and running results in the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t hello-fail .</span><br><span class=\"line\">Sending build context to Docker daemon  20.48kB</span><br><span class=\"line\">Step 1/4 : FROM scratch</span><br><span class=\"line\"> ---&gt; </span><br><span class=\"line\">Step 2/4 : WORKDIR /app</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; e03ed3305d58</span><br><span class=\"line\">Step 3/4 : COPY a.out .</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 8b248397018d</span><br><span class=\"line\">Step 4/4 : CMD [&quot;/app/a.out&quot;]</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; dcccce5f30a1</span><br><span class=\"line\">Successfully built dcccce5f30a1</span><br><span class=\"line\">Successfully tagged hello-fail:latest</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">hello-fail   latest    e8de259a2e11   5 seconds ago   16.7kB</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run -it hello-fail</span><br><span class=\"line\">standard_init_linux.go:228: exec user process caused: no such file or directory</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The docker image errors out with the criptic &quot;exec user process caused: no such file or directoy. Not a great error message. What is happening? The command interpreter could not complete the dynamic links in the executable. Also, notice how small the docker image is.</p>\n<h1 id=\"link-it-statically-and-rety\">Link it statically and rety<a title=\"#link-it-statically-and-rety\" href=\"#link-it-statically-and-rety\"></a></h1>\n<p>Now, we’ll fix these problems. To do this we can link the executable in a different way. Instead of dynamically linking the file, we link it statically. Linking statically means we will create an executable file with everything we need to run the code contained in the file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ </span><br><span class=\"line\">$ gcc -static -o hello hello.c</span><br><span class=\"line\">$ ls -lh</span><br><span class=\"line\">total 856K</span><br><span class=\"line\">-rwxrwxr-x 1 magoo magoo 852K Jan 29 21:27 hello</span><br><span class=\"line\">-rw-rw-r-- 1 magoo magoo   82 Jan 29 20:51 hello.c</span><br><span class=\"line\">$ file hello</span><br><span class=\"line\">hello: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=5059e58e2072dc3785f8d790bfa13486a66db711, for GNU/Linux 3.2.0, not stripped</span><br><span class=\"line\">$ ldd hello</span><br><span class=\"line\">not a dynamic executable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>There is a big difference in the size of the hello executable now: it went from 17K bytes to 852K bytes. That means all the library code needed to execute the file is now contained in the file. If we use this executable in docker we get results we want…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t hello-works .</span><br><span class=\"line\">Sending build context to Docker daemon  875.5kB</span><br><span class=\"line\">Step 1/4 : FROM scratch</span><br><span class=\"line\"> ---&gt; </span><br><span class=\"line\">Step 2/4 : WORKDIR /app</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 7d2174bc1ce3</span><br><span class=\"line\">Step 3/4 : COPY hello .</span><br><span class=\"line\"> ---&gt; 85ea45621e25</span><br><span class=\"line\">Step 4/4 : CMD [&quot;/app/hello&quot;]</span><br><span class=\"line\"> ---&gt; Running in 682723d27bc5</span><br><span class=\"line\">Removing intermediate container 682723d27bc5</span><br><span class=\"line\"> ---&gt; 4ed66db60ee7</span><br><span class=\"line\">Successfully built 4ed66db60ee7</span><br><span class=\"line\">Successfully tagged hello-works:latest</span><br><span class=\"line\">magoo@FreeU:~/Documents/simDocker$ docker images</span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">hello-works   latest    4ed66db60ee7   4 seconds ago    872kB</span><br><span class=\"line\">hello-fail    latest    e8de259a2e11   15 minutes ago   16.7kB</span><br><span class=\"line\">$ docker run -it hello-works</span><br><span class=\"line\">Hello world</span><br><span class=\"line\">$ dive hello-works</span><br><span class=\"line\">Layer   Permission     UID:GID       Size  Filetree</span><br><span class=\"line\">   0    drwxr-xr-x         0:0     872 kB  └── app</span><br><span class=\"line\">   1    -rwxrwxr-x         0:0     872 kB      └── hello</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The new image is 872K bytes and it produces the  “hello world” message. Using “dive” to explore the container contents, we see that there is only one thing in the container: the hello executable file.</p>\n<h1 id=\"conclusion\">Conclusion<a title=\"#conclusion\" href=\"#conclusion\"></a></h1>\n<p>This post demonstrtated how to create a statically linked executable file and place it is a docker container.  The container only contains the executable file.  There is no O/S present in the image. We used the C programming language in this demonstration. Any programming language that can compile down to a statically linked executable can be used. For example, GO programs can compile to statically linked executables.  Many other programming languages can be made to generate statically linked files, but you have to experiment with building them. This means changing the way the program compiles. This can be a time consuming exercise.</p>\n","prev":{"title":"Using_a_monorepo_with_github","link":"2022/03/29/Using-a-monorepo-with-github"},"next":{"title":"Using-big-bang-for-simulation","link":"2022/01/09/Using-big-bang-for-simulation"},"plink":"http://muguira-james.github.io/2022/01/29/Docker-without-a-base-OS/","toc":[{"id":"introduction","title":"Introduction","index":"1"},{"id":"a-sample-program-to-work-from","title":"A sample program to work from","index":"2"},{"id":"dynamic-vs.-static-linking","title":"Dynamic vs. Static Linking","index":"3"},{"id":"link-it-statically-and-rety","title":"Link it statically and rety","index":"4"},{"id":"conclusion","title":"Conclusion","index":"5"}],"reading_time":"1358 words in 9 min"}