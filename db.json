{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/AdjacencyList.png","path":"images/AdjacencyList.png","modified":0,"renderable":0},{"_id":"source/images/ContainerVsVM.png","path":"images/ContainerVsVM.png","modified":0,"renderable":0},{"_id":"source/images/CreatingANewsGraph.png","path":"images/CreatingANewsGraph.png","modified":0,"renderable":0},{"_id":"source/images/GradleTasksTab.png","path":"images/GradleTasksTab.png","modified":0,"renderable":0},{"_id":"source/images/GraphError.png","path":"images/GraphError.png","modified":0,"renderable":0},{"_id":"source/images/GraphOfPeople.png","path":"images/GraphOfPeople.png","modified":0,"renderable":0},{"_id":"source/images/MQ-Architecture-1.png","path":"images/MQ-Architecture-1.png","modified":0,"renderable":0},{"_id":"source/images/ProdReact.png","path":"images/ProdReact.png","modified":0,"renderable":0},{"_id":"source/images/ProjectStructure.png","path":"images/ProjectStructure.png","modified":0,"renderable":0},{"_id":"source/images/Racket-queue-2.png","path":"images/Racket-queue-2.png","modified":0,"renderable":0},{"_id":"source/images/SMACIT.png","path":"images/SMACIT.png","modified":0,"renderable":0},{"_id":"source/images/ShowAdjacent_default.png","path":"images/ShowAdjacent_default.png","modified":0,"renderable":0},{"_id":"source/images/SuccessfulGradleRun.png","path":"images/SuccessfulGradleRun.png","modified":0,"renderable":0},{"_id":"source/images/Use_Case.png","path":"images/Use_Case.png","modified":0,"renderable":0},{"_id":"source/images/create-react-app-initial.png","path":"images/create-react-app-initial.png","modified":0,"renderable":0},{"_id":"source/images/indy.png","path":"images/indy.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/flying-crane/flying-crane-screenshot-1.png","path":"images/flying-crane/flying-crane-screenshot-1.png","modified":0,"renderable":0},{"_id":"source/images/flying-crane/flying-crane-screenshot-3.png","path":"images/flying-crane/flying-crane-screenshot-3.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/2015-10-15-A-Design-Thinking-and-Agile-Methodologies.md","hash":"2b00ef15e7cb79fe3062c22db000227dd39ceda7","modified":1634937676686},{"_id":"source/_posts/2015-11-15-A-Design-thinking-through-the-cognitive-lens-of-insight-research.md","hash":"227f95342c4ca7dc0991699b976ccd28fbfe71b1","modified":1634937676686},{"_id":"source/_posts/2017-11-28-A-Why-are-containers-important.md","hash":"53ebc56b4db2c32054e7008860fa4f2b939fb0a3","modified":1634937676686},{"_id":"source/_posts/2018-01-03-A-SMACIT-impacts-on-business.md","hash":"b7f7c93ff93b629a85f44aa29632dff575b83c3c","modified":1634937676686},{"_id":"source/_posts/2018-09-22-A-creating-basic-React-app-with-a-leaflet-map.md","hash":"03edfbec53158897d39777eefdd6317af08a9c5c","modified":1634937676686},{"_id":"source/_posts/2018-10-06-JUnit-Testing-in-Java.md","hash":"f52ba558a5cf42cc03118278bc62fe61c4669a80","modified":1634937676686},{"_id":"source/_posts/2018-10-09-A-Cucumber-Testing-in-Java.md","hash":"fa4b047c7f5ef15e9e9c6ea9f716f9281a2f64c5","modified":1634937676686},{"_id":"source/_posts/2018-10-18-React-and-Jest.md","hash":"6a5d0a08401e9954b2f5f56ea25e06eba11e8248","modified":1634937676686},{"_id":"source/_posts/2018-10-23-React-UI-construction-and-testing-with-storybook.md","hash":"9f603b0481c3dbbb4879636950a7166bfeaf9b48","modified":1634937676686},{"_id":"source/_posts/2018-10-25-Using-Express-to-serve-a-React-JS-app.md","hash":"5f6fe5d8b5d8fb2bd0e3221f9660b81cea1fe325","modified":1634937676686},{"_id":"source/_posts/2019-10-14-A-Create-a-REST-service-with-Spring.md","hash":"a3776a222812831bbd368c2b2b767f0bbc044780","modified":1634937676686},{"_id":"source/_posts/2021-09-20-Docker-with-racket.md","hash":"a2da14a030b273a7c398eb86ac425337a4974b25","modified":1634937676686},{"_id":"source/_posts/A-message-Queue-in-Racket.md","hash":"ccecdd6ac0839287f531b6335ce3d2bb55c4d8b1","modified":1635542601062},{"_id":"source/_posts/A-message-queue-in-racket-part-3.md","hash":"cee920a197c3ae54870df64a4c9b9e7bde3c0495","modified":1635541039206},{"_id":"source/_posts/A-message-queue-in-racket-part-4.md","hash":"4f27392e53aa04177a743f726980cf677ff68939","modified":1635541039210},{"_id":"source/_posts/A-message-queue-in-racket-part-5.md","hash":"2cd76341afa9d717f0a7e01d1e6015238b1f1a03","modified":1635541920136},{"_id":"source/_posts/A-message-queue-racket-part-2.md","hash":"763231018c59c06c0596f8e8337fc7ac1980f957","modified":1635542595210},{"_id":"source/images/AdjacencyList.png","hash":"82b2693ce95e4b51d38a938c4b8287263d250e92","modified":1634937676686},{"_id":"source/images/GradleTasksTab.png","hash":"d6f9758312582ee39c61d4ed46d5719ab6e4fb8a","modified":1634937676690},{"_id":"source/images/ShowAdjacent_default.png","hash":"d3e776d7f202c78ec2ad75d6a5bd51ccc0973aa2","modified":1634937676694},{"_id":"source/images/Use_Case.png","hash":"2c0f13586d538d6463cedc268c00c8c32f26d09f","modified":1634937676694},{"_id":"source/images/ContainerVsVM.png","hash":"3e1b13c7556e3329030bebed0875c7a5c61a0a68","modified":1634937676686},{"_id":"source/images/CreatingANewsGraph.png","hash":"0c6d1cd6004c13a8dffbf336c7c79d6e9f11a237","modified":1634937676690},{"_id":"source/images/GraphOfPeople.png","hash":"311021f3310c4e9e82c262111ca2d0aedba683a2","modified":1634937676690},{"_id":"source/images/MQ-Architecture-1.png","hash":"09b80576dbae085693e4a227565449b82a5c56db","modified":1634937676690},{"_id":"source/images/ProjectStructure.png","hash":"7d0246df523ec168035a8de4a85bf458fb327e67","modified":1634937676690},{"_id":"source/images/Racket-queue-2.png","hash":"aec52c0c159e9028a216c55a6ec4b10b37bbb5b9","modified":1634937676690},{"_id":"source/images/SuccessfulGradleRun.png","hash":"8b68e2157360dabc0b2f95a023531cd411e208f2","modified":1634937676694},{"_id":"source/images/create-react-app-initial.png","hash":"ee7740137f200456f05ec392db9c790df2be0776","modified":1634937676694},{"_id":"source/images/GraphError.png","hash":"774907fcd60cf02b88201fc6b38be8df061eeedd","modified":1634937676690},{"_id":"source/images/ProdReact.png","hash":"1f82b534c2259ff9b9b3115ee5cb8dc82d56b6c3","modified":1634937676690},{"_id":"source/images/SMACIT.png","hash":"46d1e8b1b3fc77ae2e37ececcd6175c093b856ca","modified":1634937676694},{"_id":"themes/landscape/.gitignore","hash":"4c78c751a5bbca6b54ad06922947573c967d51c8","modified":1634937821075},{"_id":"themes/landscape/.npmignore","hash":"4c40eab00f24304ca400313319c58d461788ff5e","modified":1634937821075},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1634937821075},{"_id":"themes/landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1634937821075},{"_id":"themes/landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1634937821075},{"_id":"themes/landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1634937821075},{"_id":"themes/landscape/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1634937821067},{"_id":"themes/landscape/.git/config","hash":"d4685e073f959c1162b288430b238a659043fe97","modified":1634937821071},{"_id":"themes/landscape/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1634937820091},{"_id":"themes/landscape/.git/index","hash":"f698d19035e1ee4a0b8375384e8e140a6e9b2eb9","modified":1634937821091},{"_id":"themes/landscape/.git/packed-refs","hash":"9959228bd0c73d447fa86147cac970a99957fa13","modified":1634937821067},{"_id":"themes/landscape/.github/dependabot.yml","hash":"25b0257a0db2c5b6a5756d8990bc2cba12f54fc5","modified":1634937821075},{"_id":"themes/landscape/languages/de-DE.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1634937821075},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1634937821075},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1634937821075},{"_id":"themes/landscape/languages/en-GB.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1634937821075},{"_id":"themes/landscape/languages/en-US.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1634937821075},{"_id":"themes/landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1634937821075},{"_id":"themes/landscape/languages/es-ES.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1634937821075},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1634937821075},{"_id":"themes/landscape/languages/fr-FR.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1634937821075},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1634937821075},{"_id":"themes/landscape/languages/hu-HU.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1634937821075},{"_id":"themes/landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1634937821075},{"_id":"themes/landscape/languages/it-IT.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1634937821075},{"_id":"themes/landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1634937821075},{"_id":"themes/landscape/languages/ja-JP.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1634937821075},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1634937821075},{"_id":"themes/landscape/languages/ko-KR.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1634937821075},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1634937821075},{"_id":"themes/landscape/languages/mn-MN.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1634937821075},{"_id":"themes/landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1634937821075},{"_id":"themes/landscape/languages/nl-NL.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1634937821075},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1634937821075},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1634937821075},{"_id":"themes/landscape/languages/pt-PT.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1634937821075},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1634937821075},{"_id":"themes/landscape/languages/ru-RU.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1634937821075},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1634937821075},{"_id":"themes/landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1634937821075},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1634937821075},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1634937821075},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1634937821075},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1634937821075},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1634937821075},{"_id":"themes/landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1634937821075},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1634937821075},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1634937821075},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1634937821075},{"_id":"themes/landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1634937821075},{"_id":"themes/landscape/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/fsmonitor-watchman.sample","hash":"55a762007dd48d229ef89fe8d0882256dcbee41a","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1634937820091},{"_id":"themes/landscape/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1634937820091},{"_id":"themes/landscape/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1634937820091},{"_id":"themes/landscape/.git/logs/HEAD","hash":"c25cc4f7e1f50ad7774510a511631bbc27a71b07","modified":1634937821071},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1634937821075},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1634937821075},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1634937821075},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1634937821075},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1634937821075},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1634937821075},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1634937821075},{"_id":"themes/landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1634937821079},{"_id":"themes/landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1634937821087},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1634937821087},{"_id":"themes/landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1634937821091},{"_id":"themes/landscape/.git/objects/pack/pack-b4da1a18e9ecd7b100a7427571880adab64fd287.idx","hash":"140fb566719e414b62efadd63b0e3d310404d1c8","modified":1634937821055},{"_id":"themes/landscape/.git/refs/heads/master","hash":"d334a6a6c4fc08ac26275af51ab3820521d42ba9","modified":1634937821071},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1634937821075},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1634937821075},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1634937821079},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1634937821079},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1634937821079},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1634937821079},{"_id":"themes/landscape/.git/logs/refs/heads/master","hash":"c25cc4f7e1f50ad7774510a511631bbc27a71b07","modified":1634937821071},{"_id":"themes/landscape/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1634937821067},{"_id":"themes/landscape/.git/logs/refs/remotes/origin/HEAD","hash":"c25cc4f7e1f50ad7774510a511631bbc27a71b07","modified":1634937821067},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1634937821091},{"_id":"themes/landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1634937821091},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1634937821087},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1634937821087},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1634937821079},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1634937821083},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1634937821087},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1634937821087},{"_id":"source/images/indy.png","hash":"01395d4c2e1a3dc4077151050d390dca93b361c7","modified":1634937676694},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1634937821083},{"_id":"themes/landscape/.git/objects/pack/pack-b4da1a18e9ecd7b100a7427571880adab64fd287.pack","hash":"8451000ec0f6728abc40e8cf6b33d288a20932bf","modified":1634937821055},{"_id":"public/archives/2015/index.html","hash":"23bb5d66844236d87fba15eb96d8e114c7e5277a","modified":1642027671793},{"_id":"public/archives/2015/10/index.html","hash":"5dbc43e357fe22f82635bd871ee54dd304210b9e","modified":1642027671793},{"_id":"public/archives/2017/index.html","hash":"c5bae23e8c5277f27dc7d1ba54452ad17d40c297","modified":1642027671793},{"_id":"public/archives/2017/11/index.html","hash":"702288826c616bf748e5ec1ea117b95dfbc3e96f","modified":1642027671793},{"_id":"public/archives/2018/index.html","hash":"98b4e640bf8ada2394b534abdfb95da476c151aa","modified":1642027671793},{"_id":"public/archives/2018/01/index.html","hash":"3690dd9f0f6ec4ba75dad5658efa8e5d19021524","modified":1642027671793},{"_id":"public/archives/2018/09/index.html","hash":"0160ff317291177d065af2b12192dcd8d3a9d303","modified":1642027671793},{"_id":"public/archives/2018/10/index.html","hash":"1751f5b4b9d3838dbcdb8cc2fdb5a39aead5082f","modified":1642027671793},{"_id":"public/archives/2021/index.html","hash":"eb5be715c5773496203934913929c2d19d79b4cb","modified":1642027671793},{"_id":"public/archives/2021/09/index.html","hash":"2a0a73e5f8424547919294e8429e57627f7eb952","modified":1642027671793},{"_id":"public/archives/2021/10/index.html","hash":"03d5b2969d30dc3c385bfee6d8405918dd954490","modified":1642027671793},{"_id":"public/categories/Design/index.html","hash":"8530d6bbea043afa7487573afc7a5a137c1a8ed1","modified":1642027671793},{"_id":"public/categories/Containers/index.html","hash":"ab2d596110f90ba4ea196423d990985715144c25","modified":1642027671793},{"_id":"public/categories/Programming/index.html","hash":"e685118cd6e51b8a52059dee8a1354c0ccb8b2a7","modified":1642027671793},{"_id":"public/categories/Programming/Containers/index.html","hash":"5e6fb9c6e57ec9ffdc5df7658866ff8ea1a31ce2","modified":1642027671793},{"_id":"public/categories/Programming/message-queue/index.html","hash":"74f012d583568dfc830eddbb59a475ea28bacbc1","modified":1642027671793},{"_id":"public/tags/Java/index.html","hash":"529e6c20667328bda16e0f52d6c6c1ee15a555f0","modified":1642027671793},{"_id":"public/tags/Containers/index.html","hash":"f4fdf1a778bbaf92b3e9a2285c727f82092460c8","modified":1642027671793},{"_id":"public/tags/Design/index.html","hash":"c5f2a672e7406e0c6e642f0e34badf189c053e2e","modified":1642027671793},{"_id":"public/tags/Insight/index.html","hash":"8787313193e90b4fb7cfd24c917cc32a59587f0c","modified":1642027671793},{"_id":"public/tags/Mobile/index.html","hash":"7d470b6123e21a77a3e10b063c3f89e8e5f88fee","modified":1642027671793},{"_id":"public/tags/Cucumber/index.html","hash":"79e95342e0606d0d8f18844de924224e35097486","modified":1642027671793},{"_id":"public/tags/React/index.html","hash":"a54819df92b9769168c302fa03bff8f5e7c7f8a8","modified":1642027671793},{"_id":"public/tags/Jest/index.html","hash":"cd4bb38338ee482af22eee3a599ace48a7323b48","modified":1642027671793},{"_id":"public/tags/Javascript/index.html","hash":"e979403106c42a156a4854e4d242fb5774b737a4","modified":1642027671793},{"_id":"public/tags/Node/index.html","hash":"ff01fb13ff5ccf157008bfb1cfb7935d5db5d544","modified":1642027671793},{"_id":"public/tags/Express/index.html","hash":"c66e59f14413c26871aa5842595683c0e04919be","modified":1642027671793},{"_id":"public/tags/MongoDB/index.html","hash":"832e57ef791c9cb3c0714ab54fe4a32344d2a02d","modified":1642027671793},{"_id":"public/tags/REST/index.html","hash":"6d8f7b236daaea7e8bb7872fccde43596629d926","modified":1642027671793},{"_id":"public/tags/Racket/index.html","hash":"801ac97142c3ec792b05548fc93bff3977a5beae","modified":1642027671793},{"_id":"public/tags/Docker/index.html","hash":"48151c2f18e4940d731d87a39b806feebda8feaf","modified":1642027671793},{"_id":"public/2021/10/25/A-message-queue-in-racket-part-5/index.html","hash":"edb80172feae23c90e8d34f2f881090c52444026","modified":1642027671793},{"_id":"public/2021/10/24/A-message-queue-in-racket-part-4/index.html","hash":"02a84c2a681e513827c171285f2159d36acc240c","modified":1642027671793},{"_id":"public/2021/10/22/A-message-queue-in-racket-part-3/index.html","hash":"3effd68311c92dacfc5d8dec38a7e6e628fcd1af","modified":1642027671793},{"_id":"public/2021/10/22/A-message-queue-racket-part-2/index.html","hash":"6f0714c5803dbdf60faa27127405f1d725596941","modified":1642027671793},{"_id":"public/2021/10/13/A-message-Queue-in-Racket/index.html","hash":"c0de25603e54afb242e721ad936c360397bc067e","modified":1642027671793},{"_id":"public/2021/09/20/2021-09-20-Docker-with-racket/index.html","hash":"fb677032a3f83d205a3e952d3c647b0a5d67d414","modified":1642027671793},{"_id":"public/2018/10/26/2018-10-25-Using-Express-to-serve-a-React-JS-app/index.html","hash":"b8afa954cd37927232ed9f9836da8ad99cf9d94d","modified":1642027671793},{"_id":"public/2018/10/18/2018-10-18-React-and-Jest/index.html","hash":"8903c9f45d886dbfab0e9a764e6c8173585349d3","modified":1642027671793},{"_id":"public/2018/10/14/2018-10-23-React-UI-construction-and-testing-with-storybook/index.html","hash":"27282407bcbab6d524c8f439d2be709fa1beca92","modified":1642027671793},{"_id":"public/2018/10/14/2019-10-14-A-Create-a-REST-service-with-Spring/index.html","hash":"3e6e1b67ccba51cc5cd8fa2347ad9c976ab3fe6b","modified":1642027671793},{"_id":"public/2018/10/09/2018-10-09-A-Cucumber-Testing-in-Java/index.html","hash":"8c8650ee93f3c782c6b9f103ff32e84c6c9a6618","modified":1642027671793},{"_id":"public/2018/10/06/2018-10-06-JUnit-Testing-in-Java/index.html","hash":"ba540ee74c11ce386bca1f41b7844e7f97a320f6","modified":1642027671793},{"_id":"public/2018/09/22/2018-09-22-A-creating-basic-React-app-with-a-leaflet-map/index.html","hash":"70ed665eeebefc3c3c657657cbeacd42b0033140","modified":1642027671793},{"_id":"public/2018/01/03/2018-01-03-A-SMACIT-impacts-on-business/index.html","hash":"2b2d0e605194bda543013c5de4f7dc578a4851f8","modified":1642027671793},{"_id":"public/2017/11/28/2017-11-28-A-Why-are-containers-important/index.html","hash":"d02621d1bfdaa036b8c4ee51ff00bb0aadc0c392","modified":1642027671793},{"_id":"public/2017/11/28/2015-11-15-A-Design-thinking-through-the-cognitive-lens-of-insight-research/index.html","hash":"08df9c286b5ac2f6367910323bf006d1f14d732d","modified":1642027671793},{"_id":"public/2015/10/15/2015-10-15-A-Design-Thinking-and-Agile-Methodologies/index.html","hash":"ab47962bdfaef72472c7273e1e53d68a3773b241","modified":1642027671793},{"_id":"public/archives/index.html","hash":"c8e9d4fed41562e5368d0aae3e9895bee409b991","modified":1642027671793},{"_id":"public/index.html","hash":"fcd0c47a76e315aa136778bcc2acce0d8b172bbb","modified":1642027671793},{"_id":"public/images/AdjacencyList.png","hash":"82b2693ce95e4b51d38a938c4b8287263d250e92","modified":1635541709621},{"_id":"public/images/GradleTasksTab.png","hash":"d6f9758312582ee39c61d4ed46d5719ab6e4fb8a","modified":1635541709621},{"_id":"public/images/ShowAdjacent_default.png","hash":"d3e776d7f202c78ec2ad75d6a5bd51ccc0973aa2","modified":1635541709621},{"_id":"public/images/Use_Case.png","hash":"2c0f13586d538d6463cedc268c00c8c32f26d09f","modified":1635541709621},{"_id":"public/images/ContainerVsVM.png","hash":"3e1b13c7556e3329030bebed0875c7a5c61a0a68","modified":1635541709621},{"_id":"public/images/CreatingANewsGraph.png","hash":"0c6d1cd6004c13a8dffbf336c7c79d6e9f11a237","modified":1635541709621},{"_id":"public/images/GraphOfPeople.png","hash":"311021f3310c4e9e82c262111ca2d0aedba683a2","modified":1635541709621},{"_id":"public/images/MQ-Architecture-1.png","hash":"09b80576dbae085693e4a227565449b82a5c56db","modified":1635541709621},{"_id":"public/images/ProjectStructure.png","hash":"7d0246df523ec168035a8de4a85bf458fb327e67","modified":1635541709621},{"_id":"public/images/Racket-queue-2.png","hash":"aec52c0c159e9028a216c55a6ec4b10b37bbb5b9","modified":1635541709621},{"_id":"public/images/SuccessfulGradleRun.png","hash":"8b68e2157360dabc0b2f95a023531cd411e208f2","modified":1635541709621},{"_id":"public/images/create-react-app-initial.png","hash":"ee7740137f200456f05ec392db9c790df2be0776","modified":1635541709621},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1635541709621},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1635541709621},{"_id":"public/images/GraphError.png","hash":"774907fcd60cf02b88201fc6b38be8df061eeedd","modified":1635541709621},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1635541709621},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1635541709621},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1635541709621},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1635541709621},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1635541709621},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1635541709621},{"_id":"public/images/ProdReact.png","hash":"1f82b534c2259ff9b9b3115ee5cb8dc82d56b6c3","modified":1635541709621},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1635541709621},{"_id":"public/images/SMACIT.png","hash":"46d1e8b1b3fc77ae2e37ececcd6175c093b856ca","modified":1635541709621},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1635541709621},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1635541709621},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1635541709621},{"_id":"public/images/indy.png","hash":"01395d4c2e1a3dc4077151050d390dca93b361c7","modified":1635541709621},{"_id":"source/_posts/Using-big-bang-for-simulation.md","hash":"c8e84b3aa41bdc15918c75f0bcf6d5a7b26e1d3c","modified":1642027580972},{"_id":"source/images/flying-crane/flying-crane.png","hash":"00f9c1cf2a613f9f66fbeefb84cff035b9765cb4","modified":1641762054463},{"_id":"source/images/flying-crane/flying-crane-screenshot-2.png","hash":"e73be9dc4c13746f7de13ce8b2be72a18ece91fc","modified":1641763787944},{"_id":"source/images/flying-crane/flying-crane-screenshot-1.png","hash":"723281706206898cdb381bebf26ca9779303fb91","modified":1641763787932},{"_id":"source/images/flying-crane/flying-crane-screenshot-3.png","hash":"85a29aa65a2ef8f440f501aa4f8fb01daf916f83","modified":1641765425082},{"_id":"public/2022/01/09/Using-big-bang-for-simulation/index.html","hash":"84d7e297e49e5ff4ef4494e1b8aceb4bd7f460ae","modified":1642027671793},{"_id":"public/archives/2022/index.html","hash":"2fa574dc6aefc232d1459835669ddfb2f0634380","modified":1642027671793},{"_id":"public/archives/2022/01/index.html","hash":"bf27c3d2c193ba04523b3ef5f61403c26581fe19","modified":1642027671793},{"_id":"public/categories/Programming/big-bang/index.html","hash":"dcdf47cd11291f137fc7c2ea12a482d181cca7c0","modified":1642027671793},{"_id":"public/images/flying-crane/flying-crane-screenshot-3.png","hash":"85a29aa65a2ef8f440f501aa4f8fb01daf916f83","modified":1642027671793},{"_id":"public/images/flying-crane/flying-crane-screenshot-1.png","hash":"723281706206898cdb381bebf26ca9779303fb91","modified":1642027671793}],"Category":[{"name":"Design","_id":"ckvcvb0a20002i7e82g4y1q32"},{"name":"Containers","_id":"ckvcvb0aa0007i7e80mh24pa5"},{"name":"Programming","_id":"ckvcvb0ae000ei7e80latd0y9"},{"name":"Containers","parent":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0av0010i7e821y31m8a"},{"name":"message queue","parent":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0ax0015i7e8br4e3bs0"},{"name":"big-bang","parent":"ckvcvb0ae000ei7e80latd0y9","_id":"cky7lbiok0004gne849jng3vg"}],"Data":[],"Page":[],"Post":[{"title":"Design Thinking and Agile Methodologies","date":"2015-10-15T17:27:12.000Z","_content":"\n\n\nHow Design thinking compliments Agile\n<!-- more -->\nThere are two tidal waves of change breaking upon the business world today: Design Thinking and Agile methods. Herbert Simon’s 1962 publication of The Science of the Artificial exposed the world to design as a way of thinking.  However, utilizing the methods of design for managing a business customer engagement is relatively new.  The Agile Manifesto was written in 2001 when a group of software engineers came together to improve the software development process.  Since then, Agile methods have spread across the business landscape. Like Design Thinking, the Agile movement prioritizes people and interaction in creating systems.  Placing people’s interaction and collaboration ahead of schedule and process is the intersection that links both of these waves of change in organizations.\n\nAt the end of the day, both paradigms strive to expose and deliver value.  This essay compares the two paradigms and shows how they overlap.  Understanding this overlap can aid project business leaders as they strive to deliver quality products in dynamic business environments.\n\nDesign Thinking\n\nApplying Design Thinking techniques depend on getting people to engage and focused on exploring a problem space verses focusing on a specific problem solution.  This distinction is important.  Design thinking techniques holistically look at both the present and future states of a problem allowing simultaneous exploration of alternative solutions.  This is in contrast to the scientific method that breaks a problem down, composing a solution from the parts.  Design Thinking considers the problem as a whole, identifying alternative as well as known paths to a solution.  Another contrasting point with the scientific method is that Design Thinking is an iterative method with each iteration providing new ways to look at the solution space and allowing for redefinition and clarification of the initial problem as you learn more.\n\n The Institute of Design at Stanford defines a simple 5 step process to apply Design Thinking.  The process starts by deeply empathizing with the user of the system to understand the context that the user works in and to understand how the users perceives value. As you observe, engage, and listen to the user you start to develop a set of definitions about the problem.  These definitions are called a problem frame. They serve as a way to bring clarity and focus to the design problem and to create a definite problem statement.  Once you have created a problem statement you can generate ideas around a set of possible solutions.  Ideation, or the process of generating as wide a set of ideas as possible, without judging these ideas, is a key difference between Design Thinking and more traditional problem solving techniques. Once a set of ideas has been generated, the next step is to prototype them. Each prototype is a quick execution of an idea.  Don’t spend a lot of time on the prototype, instead create the prototype so that the user can gain enough of a sense of the experience to make a decision, but no more.  This feeds the last step of the Stanford process: testing.  Testing is where judgment is applied.  Testing also serves to help you, the designer / analyst understand if you have framed the problem correctly, and if you have framed the right problem.\n\nAgile Methods\n\nAgile methods turn the traditional production management process on its side.  Instead of focusing on schedule and process, Agile places the focus on people and interactions.  Traditional project management plans a schedule of events lasting for a duration of months to years.  Design Thinking’s use of incremental learning and iteration would not fit into a traditional project because the schedule only allows for a single shot at delivery.   \n\n Agile’s focus on people and their interactions extends deeply into the customer space.  From the customer perspective, Agile facilitates changing customer priority by forging a collaboration. The empathy gained through close working relationships allows product or service creation to shift because the analyst / development team understands the customer space and is aligned to delivering as much value as possible.  In the traditional project management paradigm, changing customer priorities meant contract negotiation and project schedule chaos. The traditional project management paradigm froze time, learning, and customer priority into a single state derived at the moment of contract signing.  In an Agile paradigm, changing customer priorities represent changing value propositions and new opportunities. Agile, in contrast to traditional project management paradigms, only plans out what happens in a single sprint that lasts for a couple of weeks. \n\n Design Thinking relies on iteration and frequent customer interaction to produce trust and deliver delightful solutions.   Agile uses the same idea, building small incremental working pieces of the project and demonstrating them with the customer often.  This close, rapid iteration affords the development team a high degree of communications with the customer and establishes trust between the two parties.\n\n Frequent interaction with the customer is used, in Design Thinking, to continuously improve the design team’s knowledge, afford a greater exploration of the varied paths toward a solution and testing solution ideas through feedback from prototyping. Agile rides on a similar cycle.  The short development cycle, or sprint, facilitates iteration and exploration of possible solutions.  The engineering commitment is short so rapid course correction can be facilitated at the end of each sprint.  Last, at the end of the sprint, the team can reflect on their process and enact improvements.\n\n Design Thinking and Agile methods use many similar metaphors to drive continuous improvement, to gain and build trust between organizational elements, and enable dynamic anticipation of changing business priorities.  Business leaders can apply these paradigms to incorporate these metaphors as a way to anticipate change rather than guard against it.\n\n","source":"_posts/2015-10-15-A-Design-Thinking-and-Agile-Methodologies.md","raw":"---\ntitle: Design Thinking and Agile Methodologies\ntags:\n  - Java\ncategories:\n  - Design\ndate: 2015-10-15 13:27:12\n---\n\n\n\nHow Design thinking compliments Agile\n<!-- more -->\nThere are two tidal waves of change breaking upon the business world today: Design Thinking and Agile methods. Herbert Simon’s 1962 publication of The Science of the Artificial exposed the world to design as a way of thinking.  However, utilizing the methods of design for managing a business customer engagement is relatively new.  The Agile Manifesto was written in 2001 when a group of software engineers came together to improve the software development process.  Since then, Agile methods have spread across the business landscape. Like Design Thinking, the Agile movement prioritizes people and interaction in creating systems.  Placing people’s interaction and collaboration ahead of schedule and process is the intersection that links both of these waves of change in organizations.\n\nAt the end of the day, both paradigms strive to expose and deliver value.  This essay compares the two paradigms and shows how they overlap.  Understanding this overlap can aid project business leaders as they strive to deliver quality products in dynamic business environments.\n\nDesign Thinking\n\nApplying Design Thinking techniques depend on getting people to engage and focused on exploring a problem space verses focusing on a specific problem solution.  This distinction is important.  Design thinking techniques holistically look at both the present and future states of a problem allowing simultaneous exploration of alternative solutions.  This is in contrast to the scientific method that breaks a problem down, composing a solution from the parts.  Design Thinking considers the problem as a whole, identifying alternative as well as known paths to a solution.  Another contrasting point with the scientific method is that Design Thinking is an iterative method with each iteration providing new ways to look at the solution space and allowing for redefinition and clarification of the initial problem as you learn more.\n\n The Institute of Design at Stanford defines a simple 5 step process to apply Design Thinking.  The process starts by deeply empathizing with the user of the system to understand the context that the user works in and to understand how the users perceives value. As you observe, engage, and listen to the user you start to develop a set of definitions about the problem.  These definitions are called a problem frame. They serve as a way to bring clarity and focus to the design problem and to create a definite problem statement.  Once you have created a problem statement you can generate ideas around a set of possible solutions.  Ideation, or the process of generating as wide a set of ideas as possible, without judging these ideas, is a key difference between Design Thinking and more traditional problem solving techniques. Once a set of ideas has been generated, the next step is to prototype them. Each prototype is a quick execution of an idea.  Don’t spend a lot of time on the prototype, instead create the prototype so that the user can gain enough of a sense of the experience to make a decision, but no more.  This feeds the last step of the Stanford process: testing.  Testing is where judgment is applied.  Testing also serves to help you, the designer / analyst understand if you have framed the problem correctly, and if you have framed the right problem.\n\nAgile Methods\n\nAgile methods turn the traditional production management process on its side.  Instead of focusing on schedule and process, Agile places the focus on people and interactions.  Traditional project management plans a schedule of events lasting for a duration of months to years.  Design Thinking’s use of incremental learning and iteration would not fit into a traditional project because the schedule only allows for a single shot at delivery.   \n\n Agile’s focus on people and their interactions extends deeply into the customer space.  From the customer perspective, Agile facilitates changing customer priority by forging a collaboration. The empathy gained through close working relationships allows product or service creation to shift because the analyst / development team understands the customer space and is aligned to delivering as much value as possible.  In the traditional project management paradigm, changing customer priorities meant contract negotiation and project schedule chaos. The traditional project management paradigm froze time, learning, and customer priority into a single state derived at the moment of contract signing.  In an Agile paradigm, changing customer priorities represent changing value propositions and new opportunities. Agile, in contrast to traditional project management paradigms, only plans out what happens in a single sprint that lasts for a couple of weeks. \n\n Design Thinking relies on iteration and frequent customer interaction to produce trust and deliver delightful solutions.   Agile uses the same idea, building small incremental working pieces of the project and demonstrating them with the customer often.  This close, rapid iteration affords the development team a high degree of communications with the customer and establishes trust between the two parties.\n\n Frequent interaction with the customer is used, in Design Thinking, to continuously improve the design team’s knowledge, afford a greater exploration of the varied paths toward a solution and testing solution ideas through feedback from prototyping. Agile rides on a similar cycle.  The short development cycle, or sprint, facilitates iteration and exploration of possible solutions.  The engineering commitment is short so rapid course correction can be facilitated at the end of each sprint.  Last, at the end of the sprint, the team can reflect on their process and enact improvements.\n\n Design Thinking and Agile methods use many similar metaphors to drive continuous improvement, to gain and build trust between organizational elements, and enable dynamic anticipation of changing business priorities.  Business leaders can apply these paradigms to incorporate these metaphors as a way to anticipate change rather than guard against it.\n\n","slug":"2015-10-15-A-Design-Thinking-and-Agile-Methodologies","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb09p0000i7e8g8j4gmcw","content":"<p>How Design thinking compliments Agile</p>\n<span id=\"more\"></span>\n<p>There are two tidal waves of change breaking upon the business world today: Design Thinking and Agile methods. Herbert Simon’s 1962 publication of The Science of the Artificial exposed the world to design as a way of thinking.  However, utilizing the methods of design for managing a business customer engagement is relatively new.  The Agile Manifesto was written in 2001 when a group of software engineers came together to improve the software development process.  Since then, Agile methods have spread across the business landscape. Like Design Thinking, the Agile movement prioritizes people and interaction in creating systems.  Placing people’s interaction and collaboration ahead of schedule and process is the intersection that links both of these waves of change in organizations.</p>\n<p>At the end of the day, both paradigms strive to expose and deliver value.  This essay compares the two paradigms and shows how they overlap.  Understanding this overlap can aid project business leaders as they strive to deliver quality products in dynamic business environments.</p>\n<p>Design Thinking</p>\n<p>Applying Design Thinking techniques depend on getting people to engage and focused on exploring a problem space verses focusing on a specific problem solution.  This distinction is important.  Design thinking techniques holistically look at both the present and future states of a problem allowing simultaneous exploration of alternative solutions.  This is in contrast to the scientific method that breaks a problem down, composing a solution from the parts.  Design Thinking considers the problem as a whole, identifying alternative as well as known paths to a solution.  Another contrasting point with the scientific method is that Design Thinking is an iterative method with each iteration providing new ways to look at the solution space and allowing for redefinition and clarification of the initial problem as you learn more.</p>\n<p> The Institute of Design at Stanford defines a simple 5 step process to apply Design Thinking.  The process starts by deeply empathizing with the user of the system to understand the context that the user works in and to understand how the users perceives value. As you observe, engage, and listen to the user you start to develop a set of definitions about the problem.  These definitions are called a problem frame. They serve as a way to bring clarity and focus to the design problem and to create a definite problem statement.  Once you have created a problem statement you can generate ideas around a set of possible solutions.  Ideation, or the process of generating as wide a set of ideas as possible, without judging these ideas, is a key difference between Design Thinking and more traditional problem solving techniques. Once a set of ideas has been generated, the next step is to prototype them. Each prototype is a quick execution of an idea.  Don’t spend a lot of time on the prototype, instead create the prototype so that the user can gain enough of a sense of the experience to make a decision, but no more.  This feeds the last step of the Stanford process: testing.  Testing is where judgment is applied.  Testing also serves to help you, the designer / analyst understand if you have framed the problem correctly, and if you have framed the right problem.</p>\n<p>Agile Methods</p>\n<p>Agile methods turn the traditional production management process on its side.  Instead of focusing on schedule and process, Agile places the focus on people and interactions.  Traditional project management plans a schedule of events lasting for a duration of months to years.  Design Thinking’s use of incremental learning and iteration would not fit into a traditional project because the schedule only allows for a single shot at delivery.   </p>\n<p> Agile’s focus on people and their interactions extends deeply into the customer space.  From the customer perspective, Agile facilitates changing customer priority by forging a collaboration. The empathy gained through close working relationships allows product or service creation to shift because the analyst / development team understands the customer space and is aligned to delivering as much value as possible.  In the traditional project management paradigm, changing customer priorities meant contract negotiation and project schedule chaos. The traditional project management paradigm froze time, learning, and customer priority into a single state derived at the moment of contract signing.  In an Agile paradigm, changing customer priorities represent changing value propositions and new opportunities. Agile, in contrast to traditional project management paradigms, only plans out what happens in a single sprint that lasts for a couple of weeks. </p>\n<p> Design Thinking relies on iteration and frequent customer interaction to produce trust and deliver delightful solutions.   Agile uses the same idea, building small incremental working pieces of the project and demonstrating them with the customer often.  This close, rapid iteration affords the development team a high degree of communications with the customer and establishes trust between the two parties.</p>\n<p> Frequent interaction with the customer is used, in Design Thinking, to continuously improve the design team’s knowledge, afford a greater exploration of the varied paths toward a solution and testing solution ideas through feedback from prototyping. Agile rides on a similar cycle.  The short development cycle, or sprint, facilitates iteration and exploration of possible solutions.  The engineering commitment is short so rapid course correction can be facilitated at the end of each sprint.  Last, at the end of the sprint, the team can reflect on their process and enact improvements.</p>\n<p> Design Thinking and Agile methods use many similar metaphors to drive continuous improvement, to gain and build trust between organizational elements, and enable dynamic anticipation of changing business priorities.  Business leaders can apply these paradigms to incorporate these metaphors as a way to anticipate change rather than guard against it.</p>\n","site":{"data":{}},"excerpt":"<p>How Design thinking compliments Agile</p>","more":"<p>There are two tidal waves of change breaking upon the business world today: Design Thinking and Agile methods. Herbert Simon’s 1962 publication of The Science of the Artificial exposed the world to design as a way of thinking.  However, utilizing the methods of design for managing a business customer engagement is relatively new.  The Agile Manifesto was written in 2001 when a group of software engineers came together to improve the software development process.  Since then, Agile methods have spread across the business landscape. Like Design Thinking, the Agile movement prioritizes people and interaction in creating systems.  Placing people’s interaction and collaboration ahead of schedule and process is the intersection that links both of these waves of change in organizations.</p>\n<p>At the end of the day, both paradigms strive to expose and deliver value.  This essay compares the two paradigms and shows how they overlap.  Understanding this overlap can aid project business leaders as they strive to deliver quality products in dynamic business environments.</p>\n<p>Design Thinking</p>\n<p>Applying Design Thinking techniques depend on getting people to engage and focused on exploring a problem space verses focusing on a specific problem solution.  This distinction is important.  Design thinking techniques holistically look at both the present and future states of a problem allowing simultaneous exploration of alternative solutions.  This is in contrast to the scientific method that breaks a problem down, composing a solution from the parts.  Design Thinking considers the problem as a whole, identifying alternative as well as known paths to a solution.  Another contrasting point with the scientific method is that Design Thinking is an iterative method with each iteration providing new ways to look at the solution space and allowing for redefinition and clarification of the initial problem as you learn more.</p>\n<p> The Institute of Design at Stanford defines a simple 5 step process to apply Design Thinking.  The process starts by deeply empathizing with the user of the system to understand the context that the user works in and to understand how the users perceives value. As you observe, engage, and listen to the user you start to develop a set of definitions about the problem.  These definitions are called a problem frame. They serve as a way to bring clarity and focus to the design problem and to create a definite problem statement.  Once you have created a problem statement you can generate ideas around a set of possible solutions.  Ideation, or the process of generating as wide a set of ideas as possible, without judging these ideas, is a key difference between Design Thinking and more traditional problem solving techniques. Once a set of ideas has been generated, the next step is to prototype them. Each prototype is a quick execution of an idea.  Don’t spend a lot of time on the prototype, instead create the prototype so that the user can gain enough of a sense of the experience to make a decision, but no more.  This feeds the last step of the Stanford process: testing.  Testing is where judgment is applied.  Testing also serves to help you, the designer / analyst understand if you have framed the problem correctly, and if you have framed the right problem.</p>\n<p>Agile Methods</p>\n<p>Agile methods turn the traditional production management process on its side.  Instead of focusing on schedule and process, Agile places the focus on people and interactions.  Traditional project management plans a schedule of events lasting for a duration of months to years.  Design Thinking’s use of incremental learning and iteration would not fit into a traditional project because the schedule only allows for a single shot at delivery.   </p>\n<p> Agile’s focus on people and their interactions extends deeply into the customer space.  From the customer perspective, Agile facilitates changing customer priority by forging a collaboration. The empathy gained through close working relationships allows product or service creation to shift because the analyst / development team understands the customer space and is aligned to delivering as much value as possible.  In the traditional project management paradigm, changing customer priorities meant contract negotiation and project schedule chaos. The traditional project management paradigm froze time, learning, and customer priority into a single state derived at the moment of contract signing.  In an Agile paradigm, changing customer priorities represent changing value propositions and new opportunities. Agile, in contrast to traditional project management paradigms, only plans out what happens in a single sprint that lasts for a couple of weeks. </p>\n<p> Design Thinking relies on iteration and frequent customer interaction to produce trust and deliver delightful solutions.   Agile uses the same idea, building small incremental working pieces of the project and demonstrating them with the customer often.  This close, rapid iteration affords the development team a high degree of communications with the customer and establishes trust between the two parties.</p>\n<p> Frequent interaction with the customer is used, in Design Thinking, to continuously improve the design team’s knowledge, afford a greater exploration of the varied paths toward a solution and testing solution ideas through feedback from prototyping. Agile rides on a similar cycle.  The short development cycle, or sprint, facilitates iteration and exploration of possible solutions.  The engineering commitment is short so rapid course correction can be facilitated at the end of each sprint.  Last, at the end of the sprint, the team can reflect on their process and enact improvements.</p>\n<p> Design Thinking and Agile methods use many similar metaphors to drive continuous improvement, to gain and build trust between organizational elements, and enable dynamic anticipation of changing business priorities.  Business leaders can apply these paradigms to incorporate these metaphors as a way to anticipate change rather than guard against it.</p>"},{"title":"Why are containers important","date":"2017-11-28T18:27:12.000Z","_content":"\n\n\nExplain micro-services and containers\n<!-- more -->\nWhy all of the hype surrounding containers as a means to deliver valuable services to an enterprise customer? Reading the technologies news to date, you often stumble upon an article dealing with containers. This article will break down what containers are and why senior managers and CIO’s need to have a high-level understanding of their benefits.\n\nFor years now technology companies have been selling systems that solve technology problems like relational data models, enterprise service bus systems, service oriented architecture and a long list of technology building blocks. These technology building blocks produce a disconnect between the service the organization Is striving to deliver and the components used to organize the data boundaries and data integration for the service.\n\nTraditional enterprise systems organize data boundaries at the edge of the legacy system. A relational database forces the business analyst to apply a specific set of data boundaries to the organizational data, the relational model. Data integration was between relational models. As an example, each department within the organization maintained a relational model of their data. The business analyst created processes to transform one relational model into another as a customer generated purchase transactions.\n\nModern systems design liberally applies modularization to data boundaries and the integration points needed to deliver services. A service would be composed of modules that span departments within the organization. Data is not bounded at the department level, but at a finer grained transaction level.  Each customer transaction is broken down into sub-transactions. Each department contributes sub-transaction processing modules, which combine to deliver the service. Each module defines an event interface and a set of events it outputs.\n\nContainers are a way to organize data boundaries and integrate across organizational department boundaries. Containers package the modules that each department contributes to the data integration aspects of each customer transaction. The individual container is composed of libraries and business logic to maintain the state of the transaction. From an enterprise operations point of view, the container brings a lot of value. \n\n·     It isolates systems and enhances security,\n\n·     All software dependencies have to be resolved inside the container for enterprise software to run correctly,\n\n·     It encourages the application / system architect to create modular software,\n\n·     It encourages organizational departs to work together around data boundaries.\n\nOne large advantage of containers over Virtual Machines (VMs) is that the container is lighter and uses far less system resources that a VM. The VM is composed of a complete operating system and application software. The container is composed of only the application software ( see Figure 1). Moving the operating system software outside of the container allows the container to be managed as a resource by an orchestration system, such as Kubernetes or Amazon ECS. Where the container runs, how many are run, when it runs all become an orchestration problem.\n\n\n![ContainerVsVM.png](/images/ContainerVsVM.png)\n\nFigure 1. Container verses VM\n\nOur Service\n\nLet’s consider an enterprise service that delivers the day’s current news organized in different ways: as groups of news articles on a specific topic, news articles grouped by geographic region, by country, by business or other organization, and news articles organized as meta-topics (groups of the above combined). The service is composed of news trawlers, which gather and analyze news and a data base to store the final products.\n\nIn our case, the trawler will be placed into a container. The data base could also be placed in a container. This article will only consider the trawler software. The trawler is composed of components that handle gathering the raw news articles and natural language processing components that extract things like topic, summary, region, person, place or organization information. These components all send organized output to the database.\n\nContainerizing the trawler presents several design problems that need to be solved:\n\n·     the trawler’s development components each have dependencies such as libraries and frameworks that have to be included,\n\n·     the trawler has a set of configuration parameters that need to be organized and maintained, and\n\n·     the trawler uses a database connection.\n\nFor the trawler to be able to run correctly, all sub-components, such as libraries and frameworks have to be added to the container. Most container systems, such as Docker and rkt, provide a language that can configure a container. As a concrete example, our news trawler, which is written in python, depends on: Beautiful Soup, feedparser, and Spacey among others. To configure a container, these components all need to be installed in the container. The trawler also maintains a run-time configuration for such things as news sources to gather articles from, the level of debug logging to generate, and the access information for the database. To interoperate with container orchestration systems, such as Kubernetes or Amazon ECS, our trawler needs to be written so it can gather these configuration settings from the run-time environment setup by the orchestration system.  Container orchestration systems configure and maintain networks to connect service components together. This means that our news trawler should use the network environment created by the orchestration system to find database access information (see Figure 2).\n\n\n![CreatingANewsGraph.png](/images/CreatingANewsGraph.png)\n\nFigure 2. Container composition and environment.\n\n\n\nConclusion\n\n\n\nLegacy systems used building blocks such as relational database systems and enterprise service bus systems to organize and maintain state within a department. This design paradigm encouraged the business analyst to organize enterprise data models along department boundaries. It also encouraged the analyst to create inefficient processes that transform information as it crossed differing department data models. Containers shift the data and integration boundaries toward finer grained transactions. Each department within the organization contributes components to the transaction model to process and integrate data to provide the service. This article considers the choices a systems designer would make to move an existing application service component into a container. It exposes the container as a component in a larger enterprise level resource orchestration system. The orchestration system maintains a run-time environment. Containerizing enterprise services is a process of breaking the business processes down into smaller transactions that cross departments. Then identifying component processing that each department needs to contribute. The containerized services also need to conform to the environmental constraints of the orchestration system. This article provided a first look into the engineering path leading to cloud capable systems.","source":"_posts/2017-11-28-A-Why-are-containers-important.md","raw":"---\ntitle: Why are containers important\ntags:\n  - Containers\ncategories:\n  - Containers\ndate: 2017-11-28 13:27:12\n---\n\n\n\nExplain micro-services and containers\n<!-- more -->\nWhy all of the hype surrounding containers as a means to deliver valuable services to an enterprise customer? Reading the technologies news to date, you often stumble upon an article dealing with containers. This article will break down what containers are and why senior managers and CIO’s need to have a high-level understanding of their benefits.\n\nFor years now technology companies have been selling systems that solve technology problems like relational data models, enterprise service bus systems, service oriented architecture and a long list of technology building blocks. These technology building blocks produce a disconnect between the service the organization Is striving to deliver and the components used to organize the data boundaries and data integration for the service.\n\nTraditional enterprise systems organize data boundaries at the edge of the legacy system. A relational database forces the business analyst to apply a specific set of data boundaries to the organizational data, the relational model. Data integration was between relational models. As an example, each department within the organization maintained a relational model of their data. The business analyst created processes to transform one relational model into another as a customer generated purchase transactions.\n\nModern systems design liberally applies modularization to data boundaries and the integration points needed to deliver services. A service would be composed of modules that span departments within the organization. Data is not bounded at the department level, but at a finer grained transaction level.  Each customer transaction is broken down into sub-transactions. Each department contributes sub-transaction processing modules, which combine to deliver the service. Each module defines an event interface and a set of events it outputs.\n\nContainers are a way to organize data boundaries and integrate across organizational department boundaries. Containers package the modules that each department contributes to the data integration aspects of each customer transaction. The individual container is composed of libraries and business logic to maintain the state of the transaction. From an enterprise operations point of view, the container brings a lot of value. \n\n·     It isolates systems and enhances security,\n\n·     All software dependencies have to be resolved inside the container for enterprise software to run correctly,\n\n·     It encourages the application / system architect to create modular software,\n\n·     It encourages organizational departs to work together around data boundaries.\n\nOne large advantage of containers over Virtual Machines (VMs) is that the container is lighter and uses far less system resources that a VM. The VM is composed of a complete operating system and application software. The container is composed of only the application software ( see Figure 1). Moving the operating system software outside of the container allows the container to be managed as a resource by an orchestration system, such as Kubernetes or Amazon ECS. Where the container runs, how many are run, when it runs all become an orchestration problem.\n\n\n![ContainerVsVM.png](/images/ContainerVsVM.png)\n\nFigure 1. Container verses VM\n\nOur Service\n\nLet’s consider an enterprise service that delivers the day’s current news organized in different ways: as groups of news articles on a specific topic, news articles grouped by geographic region, by country, by business or other organization, and news articles organized as meta-topics (groups of the above combined). The service is composed of news trawlers, which gather and analyze news and a data base to store the final products.\n\nIn our case, the trawler will be placed into a container. The data base could also be placed in a container. This article will only consider the trawler software. The trawler is composed of components that handle gathering the raw news articles and natural language processing components that extract things like topic, summary, region, person, place or organization information. These components all send organized output to the database.\n\nContainerizing the trawler presents several design problems that need to be solved:\n\n·     the trawler’s development components each have dependencies such as libraries and frameworks that have to be included,\n\n·     the trawler has a set of configuration parameters that need to be organized and maintained, and\n\n·     the trawler uses a database connection.\n\nFor the trawler to be able to run correctly, all sub-components, such as libraries and frameworks have to be added to the container. Most container systems, such as Docker and rkt, provide a language that can configure a container. As a concrete example, our news trawler, which is written in python, depends on: Beautiful Soup, feedparser, and Spacey among others. To configure a container, these components all need to be installed in the container. The trawler also maintains a run-time configuration for such things as news sources to gather articles from, the level of debug logging to generate, and the access information for the database. To interoperate with container orchestration systems, such as Kubernetes or Amazon ECS, our trawler needs to be written so it can gather these configuration settings from the run-time environment setup by the orchestration system.  Container orchestration systems configure and maintain networks to connect service components together. This means that our news trawler should use the network environment created by the orchestration system to find database access information (see Figure 2).\n\n\n![CreatingANewsGraph.png](/images/CreatingANewsGraph.png)\n\nFigure 2. Container composition and environment.\n\n\n\nConclusion\n\n\n\nLegacy systems used building blocks such as relational database systems and enterprise service bus systems to organize and maintain state within a department. This design paradigm encouraged the business analyst to organize enterprise data models along department boundaries. It also encouraged the analyst to create inefficient processes that transform information as it crossed differing department data models. Containers shift the data and integration boundaries toward finer grained transactions. Each department within the organization contributes components to the transaction model to process and integrate data to provide the service. This article considers the choices a systems designer would make to move an existing application service component into a container. It exposes the container as a component in a larger enterprise level resource orchestration system. The orchestration system maintains a run-time environment. Containerizing enterprise services is a process of breaking the business processes down into smaller transactions that cross departments. Then identifying component processing that each department needs to contribute. The containerized services also need to conform to the environmental constraints of the orchestration system. This article provided a first look into the engineering path leading to cloud capable systems.","slug":"2017-11-28-A-Why-are-containers-important","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb09z0001i7e89ynjhxs1","content":"<p>Explain micro-services and containers</p>\n<span id=\"more\"></span>\n<p>Why all of the hype surrounding containers as a means to deliver valuable services to an enterprise customer? Reading the technologies news to date, you often stumble upon an article dealing with containers. This article will break down what containers are and why senior managers and CIO’s need to have a high-level understanding of their benefits.</p>\n<p>For years now technology companies have been selling systems that solve technology problems like relational data models, enterprise service bus systems, service oriented architecture and a long list of technology building blocks. These technology building blocks produce a disconnect between the service the organization Is striving to deliver and the components used to organize the data boundaries and data integration for the service.</p>\n<p>Traditional enterprise systems organize data boundaries at the edge of the legacy system. A relational database forces the business analyst to apply a specific set of data boundaries to the organizational data, the relational model. Data integration was between relational models. As an example, each department within the organization maintained a relational model of their data. The business analyst created processes to transform one relational model into another as a customer generated purchase transactions.</p>\n<p>Modern systems design liberally applies modularization to data boundaries and the integration points needed to deliver services. A service would be composed of modules that span departments within the organization. Data is not bounded at the department level, but at a finer grained transaction level.  Each customer transaction is broken down into sub-transactions. Each department contributes sub-transaction processing modules, which combine to deliver the service. Each module defines an event interface and a set of events it outputs.</p>\n<p>Containers are a way to organize data boundaries and integrate across organizational department boundaries. Containers package the modules that each department contributes to the data integration aspects of each customer transaction. The individual container is composed of libraries and business logic to maintain the state of the transaction. From an enterprise operations point of view, the container brings a lot of value. </p>\n<p>·     It isolates systems and enhances security,</p>\n<p>·     All software dependencies have to be resolved inside the container for enterprise software to run correctly,</p>\n<p>·     It encourages the application / system architect to create modular software,</p>\n<p>·     It encourages organizational departs to work together around data boundaries.</p>\n<p>One large advantage of containers over Virtual Machines (VMs) is that the container is lighter and uses far less system resources that a VM. The VM is composed of a complete operating system and application software. The container is composed of only the application software ( see Figure 1). Moving the operating system software outside of the container allows the container to be managed as a resource by an orchestration system, such as Kubernetes or Amazon ECS. Where the container runs, how many are run, when it runs all become an orchestration problem.</p>\n<p><img src=\"/images/ContainerVsVM.png\" alt=\"ContainerVsVM.png\"></p>\n<p>Figure 1. Container verses VM</p>\n<p>Our Service</p>\n<p>Let’s consider an enterprise service that delivers the day’s current news organized in different ways: as groups of news articles on a specific topic, news articles grouped by geographic region, by country, by business or other organization, and news articles organized as meta-topics (groups of the above combined). The service is composed of news trawlers, which gather and analyze news and a data base to store the final products.</p>\n<p>In our case, the trawler will be placed into a container. The data base could also be placed in a container. This article will only consider the trawler software. The trawler is composed of components that handle gathering the raw news articles and natural language processing components that extract things like topic, summary, region, person, place or organization information. These components all send organized output to the database.</p>\n<p>Containerizing the trawler presents several design problems that need to be solved:</p>\n<p>·     the trawler’s development components each have dependencies such as libraries and frameworks that have to be included,</p>\n<p>·     the trawler has a set of configuration parameters that need to be organized and maintained, and</p>\n<p>·     the trawler uses a database connection.</p>\n<p>For the trawler to be able to run correctly, all sub-components, such as libraries and frameworks have to be added to the container. Most container systems, such as Docker and rkt, provide a language that can configure a container. As a concrete example, our news trawler, which is written in python, depends on: Beautiful Soup, feedparser, and Spacey among others. To configure a container, these components all need to be installed in the container. The trawler also maintains a run-time configuration for such things as news sources to gather articles from, the level of debug logging to generate, and the access information for the database. To interoperate with container orchestration systems, such as Kubernetes or Amazon ECS, our trawler needs to be written so it can gather these configuration settings from the run-time environment setup by the orchestration system.  Container orchestration systems configure and maintain networks to connect service components together. This means that our news trawler should use the network environment created by the orchestration system to find database access information (see Figure 2).</p>\n<p><img src=\"/images/CreatingANewsGraph.png\" alt=\"CreatingANewsGraph.png\"></p>\n<p>Figure 2. Container composition and environment.</p>\n<p>Conclusion</p>\n<p>Legacy systems used building blocks such as relational database systems and enterprise service bus systems to organize and maintain state within a department. This design paradigm encouraged the business analyst to organize enterprise data models along department boundaries. It also encouraged the analyst to create inefficient processes that transform information as it crossed differing department data models. Containers shift the data and integration boundaries toward finer grained transactions. Each department within the organization contributes components to the transaction model to process and integrate data to provide the service. This article considers the choices a systems designer would make to move an existing application service component into a container. It exposes the container as a component in a larger enterprise level resource orchestration system. The orchestration system maintains a run-time environment. Containerizing enterprise services is a process of breaking the business processes down into smaller transactions that cross departments. Then identifying component processing that each department needs to contribute. The containerized services also need to conform to the environmental constraints of the orchestration system. This article provided a first look into the engineering path leading to cloud capable systems.</p>\n","site":{"data":{}},"excerpt":"<p>Explain micro-services and containers</p>","more":"<p>Why all of the hype surrounding containers as a means to deliver valuable services to an enterprise customer? Reading the technologies news to date, you often stumble upon an article dealing with containers. This article will break down what containers are and why senior managers and CIO’s need to have a high-level understanding of their benefits.</p>\n<p>For years now technology companies have been selling systems that solve technology problems like relational data models, enterprise service bus systems, service oriented architecture and a long list of technology building blocks. These technology building blocks produce a disconnect between the service the organization Is striving to deliver and the components used to organize the data boundaries and data integration for the service.</p>\n<p>Traditional enterprise systems organize data boundaries at the edge of the legacy system. A relational database forces the business analyst to apply a specific set of data boundaries to the organizational data, the relational model. Data integration was between relational models. As an example, each department within the organization maintained a relational model of their data. The business analyst created processes to transform one relational model into another as a customer generated purchase transactions.</p>\n<p>Modern systems design liberally applies modularization to data boundaries and the integration points needed to deliver services. A service would be composed of modules that span departments within the organization. Data is not bounded at the department level, but at a finer grained transaction level.  Each customer transaction is broken down into sub-transactions. Each department contributes sub-transaction processing modules, which combine to deliver the service. Each module defines an event interface and a set of events it outputs.</p>\n<p>Containers are a way to organize data boundaries and integrate across organizational department boundaries. Containers package the modules that each department contributes to the data integration aspects of each customer transaction. The individual container is composed of libraries and business logic to maintain the state of the transaction. From an enterprise operations point of view, the container brings a lot of value. </p>\n<p>·     It isolates systems and enhances security,</p>\n<p>·     All software dependencies have to be resolved inside the container for enterprise software to run correctly,</p>\n<p>·     It encourages the application / system architect to create modular software,</p>\n<p>·     It encourages organizational departs to work together around data boundaries.</p>\n<p>One large advantage of containers over Virtual Machines (VMs) is that the container is lighter and uses far less system resources that a VM. The VM is composed of a complete operating system and application software. The container is composed of only the application software ( see Figure 1). Moving the operating system software outside of the container allows the container to be managed as a resource by an orchestration system, such as Kubernetes or Amazon ECS. Where the container runs, how many are run, when it runs all become an orchestration problem.</p>\n<p><img src=\"/images/ContainerVsVM.png\" alt=\"ContainerVsVM.png\"></p>\n<p>Figure 1. Container verses VM</p>\n<p>Our Service</p>\n<p>Let’s consider an enterprise service that delivers the day’s current news organized in different ways: as groups of news articles on a specific topic, news articles grouped by geographic region, by country, by business or other organization, and news articles organized as meta-topics (groups of the above combined). The service is composed of news trawlers, which gather and analyze news and a data base to store the final products.</p>\n<p>In our case, the trawler will be placed into a container. The data base could also be placed in a container. This article will only consider the trawler software. The trawler is composed of components that handle gathering the raw news articles and natural language processing components that extract things like topic, summary, region, person, place or organization information. These components all send organized output to the database.</p>\n<p>Containerizing the trawler presents several design problems that need to be solved:</p>\n<p>·     the trawler’s development components each have dependencies such as libraries and frameworks that have to be included,</p>\n<p>·     the trawler has a set of configuration parameters that need to be organized and maintained, and</p>\n<p>·     the trawler uses a database connection.</p>\n<p>For the trawler to be able to run correctly, all sub-components, such as libraries and frameworks have to be added to the container. Most container systems, such as Docker and rkt, provide a language that can configure a container. As a concrete example, our news trawler, which is written in python, depends on: Beautiful Soup, feedparser, and Spacey among others. To configure a container, these components all need to be installed in the container. The trawler also maintains a run-time configuration for such things as news sources to gather articles from, the level of debug logging to generate, and the access information for the database. To interoperate with container orchestration systems, such as Kubernetes or Amazon ECS, our trawler needs to be written so it can gather these configuration settings from the run-time environment setup by the orchestration system.  Container orchestration systems configure and maintain networks to connect service components together. This means that our news trawler should use the network environment created by the orchestration system to find database access information (see Figure 2).</p>\n<p><img src=\"/images/CreatingANewsGraph.png\" alt=\"CreatingANewsGraph.png\"></p>\n<p>Figure 2. Container composition and environment.</p>\n<p>Conclusion</p>\n<p>Legacy systems used building blocks such as relational database systems and enterprise service bus systems to organize and maintain state within a department. This design paradigm encouraged the business analyst to organize enterprise data models along department boundaries. It also encouraged the analyst to create inefficient processes that transform information as it crossed differing department data models. Containers shift the data and integration boundaries toward finer grained transactions. Each department within the organization contributes components to the transaction model to process and integrate data to provide the service. This article considers the choices a systems designer would make to move an existing application service component into a container. It exposes the container as a component in a larger enterprise level resource orchestration system. The orchestration system maintains a run-time environment. Containerizing enterprise services is a process of breaking the business processes down into smaller transactions that cross departments. Then identifying component processing that each department needs to contribute. The containerized services also need to conform to the environmental constraints of the orchestration system. This article provided a first look into the engineering path leading to cloud capable systems.</p>"},{"title":"Design Thinking throught the cognitive lens of Insight Research","date":"2017-11-28T18:27:12.000Z","_content":"\n\n\nDesign thinking and how it enables insight\n<!-- more -->\n\nDesign thinking and how it enables insight\n\nHave you ever been working on a problem and found that you are completely stuck?  You may change tasks for the moment and do something else.  Then, after some time, a thought occurs and you see the solution to your problem.  Its an ’Ah’ moment when the answer jumps into your mind.  Many times it seems the act of moving to a new task or taking a break from the problem allows your mind to sort through everything and gain insight.   There has been a lot of research into insight.  Several theories have been brought forward that focus on this idea of thinking about something else as a stimulant to problem solving.\n\n This essay will examine design thinking through research into insight.  My purpose is to link design thinking processes to current cognitive research into insight and to show how theories into insight explain design thinking’s success.\n\nThe Process\n\nConsider Stanford’s example of how to accomplish design thinking (1). The 5 step Stanford process leads the designer through:\n\nunderstanding the customer and their problems, by developing empathy,\ndefining the problem space and framing,\ngenerating ideas,\nprototyping those ideas,\ntesting those ideas for merit.\nThese steps are preformed in a non-sequential, iterative manner as the designer seeks to first employ expansive thinking to capture ideas and then employ more focused constrictive thinking to drive toward a delightful solution.\n\nFraming \n\nAn early design thinking step is helping the designer frame a problem.  To arrive at this frame or set of definitions about the problem our designer starts with embedding themselves into the problem environment.  They work with the customer, spending the day learning about and doing the work with the customer, discussing the how’s, and why’s of the way the customer sees, feels about, and approaches each task. This first step provides the designer with a deep understanding for the customer and how they feel and understand their environment.  This is in contrast to more traditional methods of problem solving taught in business schools that have the designer understand simply the work process, inputs / outputs, and constraints.  In striving to apply the design thinking paradigm, the designer seeks to dive deeply into the customer’s environment with the goal of finding solutions that enhance the environment, not simply solve the problem.\n\n Shared Knowledge\n\nThese frames help the designer not just define the problem, but to enable discussion around the problem.  Nonaka’s Socialize, Externalize, Communicate, and Internalize (SECI) (2) model helps to understand this process.  The designer is seeking to socialize their internal thoughts and get them out where others can experience them through communication and eventually internalize them.  These frames form a mental representation that allows the designer to search and combine additional knowledge with the frame.  Insight research focuses on the act of generating new mental connections.  Within the design thinking paradigm these new connections can come through discussion with the team.  These discussions will produce additional methods of organizing the problem or problem reframing that enables new thought and new connection processes, further feeding expansive thinking on the part of the design team.  In terms of insight research this reframing also facilitates the types of changes in representation insight researchers find take place before a subject realizes that ‘Ah’ feeling of knowing the solution.\n\n Expansive Thinking\n\nFrom an efficiency perspective, the designer does not want to become stuck.  Applying an iterative design thinking paradigm mitigates this impasse.  The first few steps of the design thinking paradigm enable expansive thinking that exposes many ideas for consideration.  Insight researchers find that as the human brain tackles a problem it goes through an extensive round of activity to search through its connections. Research shows that the brain starts out optimistically applying heuristics, searching connections as it is looking for a solution. As the designer judges that the search seems to get nearer to a solution the number and of variety of heuristics declines.  Design thinking purposely delays judging solutions early in the process, instead substituting expansive idea generation and environmental exploration through prototyping.\n\nChanging Representation \n\nOne major reason to apply an iterative design thinking paradigm to problem solving is to avoid becoming stuck and having to invest the mental energy to back up and try a new path.  Insight research shows that changing the representation of problem is a precursor to realizing a solution.  Yet, changing paths is difficult and effort escalates depending on the investment in the current path. Design thinking exposes the design team to many solution ideas, striving to keep an exploratory mind set and avoiding too deep of a focus on a single solution path. This exploratory mind set facilitates examining the problem environment though analogy, and constraint relaxation as prototypes are created to enable understanding to problem variable interaction.\n\nConclusion \n\nProblem reframing, environment exploration, adjusting and relaxing constraints are all methods insight research has focused on to explain how the mind can “jump” to a solution.  Design thinking’s iterative, exploratory process of solution realization exposes the designer to many possible solution paths and helps them to keep an open mind as a problem space is explored.  Judgment of solutions is only applied after the team has applied as much expansive thinking as possible and prototypes has been created to explore aspects of the environment. It is these acts of exploration and delay of judgment that align design thinking to how we generate insight.\n\nReferences:\n\nhttps://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564\n\nhttps://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf\n","source":"_posts/2015-11-15-A-Design-thinking-through-the-cognitive-lens-of-insight-research.md","raw":"---\ntitle: Design Thinking throught the cognitive lens of Insight Research\ntags:\n  - Design\n  - Insight\ndate: 2017-11-28 13:27:12\n---\n\n\n\nDesign thinking and how it enables insight\n<!-- more -->\n\nDesign thinking and how it enables insight\n\nHave you ever been working on a problem and found that you are completely stuck?  You may change tasks for the moment and do something else.  Then, after some time, a thought occurs and you see the solution to your problem.  Its an ’Ah’ moment when the answer jumps into your mind.  Many times it seems the act of moving to a new task or taking a break from the problem allows your mind to sort through everything and gain insight.   There has been a lot of research into insight.  Several theories have been brought forward that focus on this idea of thinking about something else as a stimulant to problem solving.\n\n This essay will examine design thinking through research into insight.  My purpose is to link design thinking processes to current cognitive research into insight and to show how theories into insight explain design thinking’s success.\n\nThe Process\n\nConsider Stanford’s example of how to accomplish design thinking (1). The 5 step Stanford process leads the designer through:\n\nunderstanding the customer and their problems, by developing empathy,\ndefining the problem space and framing,\ngenerating ideas,\nprototyping those ideas,\ntesting those ideas for merit.\nThese steps are preformed in a non-sequential, iterative manner as the designer seeks to first employ expansive thinking to capture ideas and then employ more focused constrictive thinking to drive toward a delightful solution.\n\nFraming \n\nAn early design thinking step is helping the designer frame a problem.  To arrive at this frame or set of definitions about the problem our designer starts with embedding themselves into the problem environment.  They work with the customer, spending the day learning about and doing the work with the customer, discussing the how’s, and why’s of the way the customer sees, feels about, and approaches each task. This first step provides the designer with a deep understanding for the customer and how they feel and understand their environment.  This is in contrast to more traditional methods of problem solving taught in business schools that have the designer understand simply the work process, inputs / outputs, and constraints.  In striving to apply the design thinking paradigm, the designer seeks to dive deeply into the customer’s environment with the goal of finding solutions that enhance the environment, not simply solve the problem.\n\n Shared Knowledge\n\nThese frames help the designer not just define the problem, but to enable discussion around the problem.  Nonaka’s Socialize, Externalize, Communicate, and Internalize (SECI) (2) model helps to understand this process.  The designer is seeking to socialize their internal thoughts and get them out where others can experience them through communication and eventually internalize them.  These frames form a mental representation that allows the designer to search and combine additional knowledge with the frame.  Insight research focuses on the act of generating new mental connections.  Within the design thinking paradigm these new connections can come through discussion with the team.  These discussions will produce additional methods of organizing the problem or problem reframing that enables new thought and new connection processes, further feeding expansive thinking on the part of the design team.  In terms of insight research this reframing also facilitates the types of changes in representation insight researchers find take place before a subject realizes that ‘Ah’ feeling of knowing the solution.\n\n Expansive Thinking\n\nFrom an efficiency perspective, the designer does not want to become stuck.  Applying an iterative design thinking paradigm mitigates this impasse.  The first few steps of the design thinking paradigm enable expansive thinking that exposes many ideas for consideration.  Insight researchers find that as the human brain tackles a problem it goes through an extensive round of activity to search through its connections. Research shows that the brain starts out optimistically applying heuristics, searching connections as it is looking for a solution. As the designer judges that the search seems to get nearer to a solution the number and of variety of heuristics declines.  Design thinking purposely delays judging solutions early in the process, instead substituting expansive idea generation and environmental exploration through prototyping.\n\nChanging Representation \n\nOne major reason to apply an iterative design thinking paradigm to problem solving is to avoid becoming stuck and having to invest the mental energy to back up and try a new path.  Insight research shows that changing the representation of problem is a precursor to realizing a solution.  Yet, changing paths is difficult and effort escalates depending on the investment in the current path. Design thinking exposes the design team to many solution ideas, striving to keep an exploratory mind set and avoiding too deep of a focus on a single solution path. This exploratory mind set facilitates examining the problem environment though analogy, and constraint relaxation as prototypes are created to enable understanding to problem variable interaction.\n\nConclusion \n\nProblem reframing, environment exploration, adjusting and relaxing constraints are all methods insight research has focused on to explain how the mind can “jump” to a solution.  Design thinking’s iterative, exploratory process of solution realization exposes the designer to many possible solution paths and helps them to keep an open mind as a problem space is explored.  Judgment of solutions is only applied after the team has applied as much expansive thinking as possible and prototypes has been created to explore aspects of the environment. It is these acts of exploration and delay of judgment that align design thinking to how we generate insight.\n\nReferences:\n\nhttps://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564\n\nhttps://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf\n","slug":"2015-11-15-A-Design-thinking-through-the-cognitive-lens-of-insight-research","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0a60004i7e8di27hmfd","content":"<p>Design thinking and how it enables insight</p>\n<span id=\"more\"></span>\n\n<p>Design thinking and how it enables insight</p>\n<p>Have you ever been working on a problem and found that you are completely stuck?  You may change tasks for the moment and do something else.  Then, after some time, a thought occurs and you see the solution to your problem.  Its an ’Ah’ moment when the answer jumps into your mind.  Many times it seems the act of moving to a new task or taking a break from the problem allows your mind to sort through everything and gain insight.   There has been a lot of research into insight.  Several theories have been brought forward that focus on this idea of thinking about something else as a stimulant to problem solving.</p>\n<p> This essay will examine design thinking through research into insight.  My purpose is to link design thinking processes to current cognitive research into insight and to show how theories into insight explain design thinking’s success.</p>\n<p>The Process</p>\n<p>Consider Stanford’s example of how to accomplish design thinking (1). The 5 step Stanford process leads the designer through:</p>\n<p>understanding the customer and their problems, by developing empathy,<br>defining the problem space and framing,<br>generating ideas,<br>prototyping those ideas,<br>testing those ideas for merit.<br>These steps are preformed in a non-sequential, iterative manner as the designer seeks to first employ expansive thinking to capture ideas and then employ more focused constrictive thinking to drive toward a delightful solution.</p>\n<p>Framing </p>\n<p>An early design thinking step is helping the designer frame a problem.  To arrive at this frame or set of definitions about the problem our designer starts with embedding themselves into the problem environment.  They work with the customer, spending the day learning about and doing the work with the customer, discussing the how’s, and why’s of the way the customer sees, feels about, and approaches each task. This first step provides the designer with a deep understanding for the customer and how they feel and understand their environment.  This is in contrast to more traditional methods of problem solving taught in business schools that have the designer understand simply the work process, inputs / outputs, and constraints.  In striving to apply the design thinking paradigm, the designer seeks to dive deeply into the customer’s environment with the goal of finding solutions that enhance the environment, not simply solve the problem.</p>\n<p> Shared Knowledge</p>\n<p>These frames help the designer not just define the problem, but to enable discussion around the problem.  Nonaka’s Socialize, Externalize, Communicate, and Internalize (SECI) (2) model helps to understand this process.  The designer is seeking to socialize their internal thoughts and get them out where others can experience them through communication and eventually internalize them.  These frames form a mental representation that allows the designer to search and combine additional knowledge with the frame.  Insight research focuses on the act of generating new mental connections.  Within the design thinking paradigm these new connections can come through discussion with the team.  These discussions will produce additional methods of organizing the problem or problem reframing that enables new thought and new connection processes, further feeding expansive thinking on the part of the design team.  In terms of insight research this reframing also facilitates the types of changes in representation insight researchers find take place before a subject realizes that ‘Ah’ feeling of knowing the solution.</p>\n<p> Expansive Thinking</p>\n<p>From an efficiency perspective, the designer does not want to become stuck.  Applying an iterative design thinking paradigm mitigates this impasse.  The first few steps of the design thinking paradigm enable expansive thinking that exposes many ideas for consideration.  Insight researchers find that as the human brain tackles a problem it goes through an extensive round of activity to search through its connections. Research shows that the brain starts out optimistically applying heuristics, searching connections as it is looking for a solution. As the designer judges that the search seems to get nearer to a solution the number and of variety of heuristics declines.  Design thinking purposely delays judging solutions early in the process, instead substituting expansive idea generation and environmental exploration through prototyping.</p>\n<p>Changing Representation </p>\n<p>One major reason to apply an iterative design thinking paradigm to problem solving is to avoid becoming stuck and having to invest the mental energy to back up and try a new path.  Insight research shows that changing the representation of problem is a precursor to realizing a solution.  Yet, changing paths is difficult and effort escalates depending on the investment in the current path. Design thinking exposes the design team to many solution ideas, striving to keep an exploratory mind set and avoiding too deep of a focus on a single solution path. This exploratory mind set facilitates examining the problem environment though analogy, and constraint relaxation as prototypes are created to enable understanding to problem variable interaction.</p>\n<p>Conclusion </p>\n<p>Problem reframing, environment exploration, adjusting and relaxing constraints are all methods insight research has focused on to explain how the mind can “jump” to a solution.  Design thinking’s iterative, exploratory process of solution realization exposes the designer to many possible solution paths and helps them to keep an open mind as a problem space is explored.  Judgment of solutions is only applied after the team has applied as much expansive thinking as possible and prototypes has been created to explore aspects of the environment. It is these acts of exploration and delay of judgment that align design thinking to how we generate insight.</p>\n<p>References:</p>\n<p><a href=\"https://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564\">https://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564</a></p>\n<p><a href=\"https://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf\">https://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf</a></p>\n","site":{"data":{}},"excerpt":"<p>Design thinking and how it enables insight</p>","more":"<p>Design thinking and how it enables insight</p>\n<p>Have you ever been working on a problem and found that you are completely stuck?  You may change tasks for the moment and do something else.  Then, after some time, a thought occurs and you see the solution to your problem.  Its an ’Ah’ moment when the answer jumps into your mind.  Many times it seems the act of moving to a new task or taking a break from the problem allows your mind to sort through everything and gain insight.   There has been a lot of research into insight.  Several theories have been brought forward that focus on this idea of thinking about something else as a stimulant to problem solving.</p>\n<p> This essay will examine design thinking through research into insight.  My purpose is to link design thinking processes to current cognitive research into insight and to show how theories into insight explain design thinking’s success.</p>\n<p>The Process</p>\n<p>Consider Stanford’s example of how to accomplish design thinking (1). The 5 step Stanford process leads the designer through:</p>\n<p>understanding the customer and their problems, by developing empathy,<br>defining the problem space and framing,<br>generating ideas,<br>prototyping those ideas,<br>testing those ideas for merit.<br>These steps are preformed in a non-sequential, iterative manner as the designer seeks to first employ expansive thinking to capture ideas and then employ more focused constrictive thinking to drive toward a delightful solution.</p>\n<p>Framing </p>\n<p>An early design thinking step is helping the designer frame a problem.  To arrive at this frame or set of definitions about the problem our designer starts with embedding themselves into the problem environment.  They work with the customer, spending the day learning about and doing the work with the customer, discussing the how’s, and why’s of the way the customer sees, feels about, and approaches each task. This first step provides the designer with a deep understanding for the customer and how they feel and understand their environment.  This is in contrast to more traditional methods of problem solving taught in business schools that have the designer understand simply the work process, inputs / outputs, and constraints.  In striving to apply the design thinking paradigm, the designer seeks to dive deeply into the customer’s environment with the goal of finding solutions that enhance the environment, not simply solve the problem.</p>\n<p> Shared Knowledge</p>\n<p>These frames help the designer not just define the problem, but to enable discussion around the problem.  Nonaka’s Socialize, Externalize, Communicate, and Internalize (SECI) (2) model helps to understand this process.  The designer is seeking to socialize their internal thoughts and get them out where others can experience them through communication and eventually internalize them.  These frames form a mental representation that allows the designer to search and combine additional knowledge with the frame.  Insight research focuses on the act of generating new mental connections.  Within the design thinking paradigm these new connections can come through discussion with the team.  These discussions will produce additional methods of organizing the problem or problem reframing that enables new thought and new connection processes, further feeding expansive thinking on the part of the design team.  In terms of insight research this reframing also facilitates the types of changes in representation insight researchers find take place before a subject realizes that ‘Ah’ feeling of knowing the solution.</p>\n<p> Expansive Thinking</p>\n<p>From an efficiency perspective, the designer does not want to become stuck.  Applying an iterative design thinking paradigm mitigates this impasse.  The first few steps of the design thinking paradigm enable expansive thinking that exposes many ideas for consideration.  Insight researchers find that as the human brain tackles a problem it goes through an extensive round of activity to search through its connections. Research shows that the brain starts out optimistically applying heuristics, searching connections as it is looking for a solution. As the designer judges that the search seems to get nearer to a solution the number and of variety of heuristics declines.  Design thinking purposely delays judging solutions early in the process, instead substituting expansive idea generation and environmental exploration through prototyping.</p>\n<p>Changing Representation </p>\n<p>One major reason to apply an iterative design thinking paradigm to problem solving is to avoid becoming stuck and having to invest the mental energy to back up and try a new path.  Insight research shows that changing the representation of problem is a precursor to realizing a solution.  Yet, changing paths is difficult and effort escalates depending on the investment in the current path. Design thinking exposes the design team to many solution ideas, striving to keep an exploratory mind set and avoiding too deep of a focus on a single solution path. This exploratory mind set facilitates examining the problem environment though analogy, and constraint relaxation as prototypes are created to enable understanding to problem variable interaction.</p>\n<p>Conclusion </p>\n<p>Problem reframing, environment exploration, adjusting and relaxing constraints are all methods insight research has focused on to explain how the mind can “jump” to a solution.  Design thinking’s iterative, exploratory process of solution realization exposes the designer to many possible solution paths and helps them to keep an open mind as a problem space is explored.  Judgment of solutions is only applied after the team has applied as much expansive thinking as possible and prototypes has been created to explore aspects of the environment. It is these acts of exploration and delay of judgment that align design thinking to how we generate insight.</p>\n<p>References:</p>\n<p><a href=\"https://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564\">https://dschool.stanford.edu/sandbox/groups/designresources/wiki/36873/attachments/74b3d/ModeGuideBOOTCAMP2010L.pdf?sessionID=c2bb722c7c1ad51462291013c0eeb6c47f33e564</a></p>\n<p><a href=\"https://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf\">https://ai.wu.ac.at/~kaiser/literatur/nonaka-seci-ba-leadership.pdf</a></p>"},{"title":"SMACIT impacts on business","date":"2018-01-04T00:27:12.000Z","_content":"\n\n\nSMACIT == Social, Mobile, Analytics, Cloud and IoT\n<!-- more -->\n\n![SMACIT.png](/images/SMACIT.png)\n\nThe movement toward social interaction with mobile devices is reshaping the competitive environment of business by changing the way we think about information exchange. This movement is driving a digital transformation of the way business systems are created. This article will explore some of the impacts of the confluence of Social, Mobile, Analytics, Cloud and Internet of things (SMACIT) on business systems operations and how these changes impact senior managers and business leaders means to orchestrate decisions and organize knowledge to increase value add to their customers.\n\nSMACIT has enhanced interaction, affording more “touch points”, or more ways to gain a view into how the customer is using information. From a business point of view, SMACIT enhances customer engagement by providing a wider, more comprehensive way for customers to combine and organizing information. Alternatively, SMACIT is pushing business to develop a vastly richer platform to analyze how the customer is engaging with their services and ultimately, creating knowledge.\n\nAs shown in figure 1, SMACIT, and the enhanced interaction that comes with it, raises a new set of tensions within the organization. Managers, at a very course level, use the existing business systems to sense the environment to detect trends. These trends signal that new ways are required to orchestrate enterprise resources. The question of how to make the best decisions to cope with these trends comes down to capability development that enhances access to information. Redesigning enterprise systems around micro-services facilitated by container techniques, brings several insights. One, is that system architects can easily reach across enterprise elements to harness and combine data into services to generate value for customers.\n\nContainers and micro services represent a change in the way enterprises organize and maintain critical enterprise information resources. The old way of organizing business transactions as discrete department level models creates information silos. Each department required the incoming transaction data to be transformed into a compatible format. The business transaction was represented as a series of transforms as it moved from department to department.  Micro-services, which are more fine-grained, shift the focus from silo transformations to cooperation. As the service is designed, each department contributes an interface to their data. That interface provides a way to extract information from the department in the right form for the service. It also provides a way to inform the department of environmental changes. For example, while a traditional inventory system would operate on a nightly schedule, a micro-service based inventory system would operate at the rate that individual item sales arrive.\n\nOne could say that micro-services reduce organizational tensions through a focus on fine-grained, cross organization cooperation. The cooperation is derived from developing capabilities to handle elements of individual business transactions. Developing these capabilities results in the development of a catalog of interfaces to departmental information and a portfolio of consuming services that present valuable new information access methods to customers. The growth of SMACIT has shifted enterprise value creation focus to the service portfolio. Digitally savvy organizations use service orchestration as a way to increase the value that they provide customers. Service orchestration relies heavily on automation of provisioning and containerized enterprise applications, which demand that applications be redesigned into fine-grained departmental information access methods. Once fine-grained access methods are in place and enterprise applications have been redesigned as services you need a way to automate provisioning and monitoring of these services. Service orchestration systems, such as Kubernetes, Docker Swarm or Apache Mesos further reduce the tension caused by SMACIT. These orchestration systems mitigate risk by automating monitoring, restart, and provisioning of services and low-level computing resources across enterprise boundaries.\n\nOrchestration systems also enhance the organizations’ ability to detect new customer information access trends. Savvy organizations discover those trends through machine learning based analysis techniques. Unsupervised machine learning techniques process large quantities of data, organizing it into clusters and outliers. Once trends have been identified, value delivery can be enhanced through optimization.  Further organization of information through Artificial Intelligence techniques, graphs and analysis techniques on graphs will bring additional insight into how the customer is learning and adapting your access methods to solve their problems.\n\nConclusion\n\nContainers and micro-services are a technology based coping mechanism for the impact that SMACIT is having on business value generation. Inside of the enterprise, these techniques are enabling new design patterns for business software creation. However, containers and micro-services are not enough to realize digital transformation. Combining these techniques with software to orchestrate and automatically provision and scale micro-services are enabling businesses to rapidly re-organize critical information and bring new access methods to customers in dramatically reduced time frames. While the full impact has yet to play out, the benefit of breaking down information silos is enabling savvy organizations to better exploit their capabilities. Businesses are applying orchestration systems and containerized micro-services in an on-going effort to restructure business models to deliver more value to \n","source":"_posts/2018-01-03-A-SMACIT-impacts-on-business.md","raw":"---\ntitle: SMACIT impacts on business\ntags:\n  - Mobile\ncategories:\n  - Design\ndate: 2018-01-03 19:27:12\n---\n\n\n\nSMACIT == Social, Mobile, Analytics, Cloud and IoT\n<!-- more -->\n\n![SMACIT.png](/images/SMACIT.png)\n\nThe movement toward social interaction with mobile devices is reshaping the competitive environment of business by changing the way we think about information exchange. This movement is driving a digital transformation of the way business systems are created. This article will explore some of the impacts of the confluence of Social, Mobile, Analytics, Cloud and Internet of things (SMACIT) on business systems operations and how these changes impact senior managers and business leaders means to orchestrate decisions and organize knowledge to increase value add to their customers.\n\nSMACIT has enhanced interaction, affording more “touch points”, or more ways to gain a view into how the customer is using information. From a business point of view, SMACIT enhances customer engagement by providing a wider, more comprehensive way for customers to combine and organizing information. Alternatively, SMACIT is pushing business to develop a vastly richer platform to analyze how the customer is engaging with their services and ultimately, creating knowledge.\n\nAs shown in figure 1, SMACIT, and the enhanced interaction that comes with it, raises a new set of tensions within the organization. Managers, at a very course level, use the existing business systems to sense the environment to detect trends. These trends signal that new ways are required to orchestrate enterprise resources. The question of how to make the best decisions to cope with these trends comes down to capability development that enhances access to information. Redesigning enterprise systems around micro-services facilitated by container techniques, brings several insights. One, is that system architects can easily reach across enterprise elements to harness and combine data into services to generate value for customers.\n\nContainers and micro services represent a change in the way enterprises organize and maintain critical enterprise information resources. The old way of organizing business transactions as discrete department level models creates information silos. Each department required the incoming transaction data to be transformed into a compatible format. The business transaction was represented as a series of transforms as it moved from department to department.  Micro-services, which are more fine-grained, shift the focus from silo transformations to cooperation. As the service is designed, each department contributes an interface to their data. That interface provides a way to extract information from the department in the right form for the service. It also provides a way to inform the department of environmental changes. For example, while a traditional inventory system would operate on a nightly schedule, a micro-service based inventory system would operate at the rate that individual item sales arrive.\n\nOne could say that micro-services reduce organizational tensions through a focus on fine-grained, cross organization cooperation. The cooperation is derived from developing capabilities to handle elements of individual business transactions. Developing these capabilities results in the development of a catalog of interfaces to departmental information and a portfolio of consuming services that present valuable new information access methods to customers. The growth of SMACIT has shifted enterprise value creation focus to the service portfolio. Digitally savvy organizations use service orchestration as a way to increase the value that they provide customers. Service orchestration relies heavily on automation of provisioning and containerized enterprise applications, which demand that applications be redesigned into fine-grained departmental information access methods. Once fine-grained access methods are in place and enterprise applications have been redesigned as services you need a way to automate provisioning and monitoring of these services. Service orchestration systems, such as Kubernetes, Docker Swarm or Apache Mesos further reduce the tension caused by SMACIT. These orchestration systems mitigate risk by automating monitoring, restart, and provisioning of services and low-level computing resources across enterprise boundaries.\n\nOrchestration systems also enhance the organizations’ ability to detect new customer information access trends. Savvy organizations discover those trends through machine learning based analysis techniques. Unsupervised machine learning techniques process large quantities of data, organizing it into clusters and outliers. Once trends have been identified, value delivery can be enhanced through optimization.  Further organization of information through Artificial Intelligence techniques, graphs and analysis techniques on graphs will bring additional insight into how the customer is learning and adapting your access methods to solve their problems.\n\nConclusion\n\nContainers and micro-services are a technology based coping mechanism for the impact that SMACIT is having on business value generation. Inside of the enterprise, these techniques are enabling new design patterns for business software creation. However, containers and micro-services are not enough to realize digital transformation. Combining these techniques with software to orchestrate and automatically provision and scale micro-services are enabling businesses to rapidly re-organize critical information and bring new access methods to customers in dramatically reduced time frames. While the full impact has yet to play out, the benefit of breaking down information silos is enabling savvy organizations to better exploit their capabilities. Businesses are applying orchestration systems and containerized micro-services in an on-going effort to restructure business models to deliver more value to \n","slug":"2018-01-03-A-SMACIT-impacts-on-business","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0a80005i7e8fld57hdy","content":"<p>SMACIT == Social, Mobile, Analytics, Cloud and IoT</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/SMACIT.png\" alt=\"SMACIT.png\"></p>\n<p>The movement toward social interaction with mobile devices is reshaping the competitive environment of business by changing the way we think about information exchange. This movement is driving a digital transformation of the way business systems are created. This article will explore some of the impacts of the confluence of Social, Mobile, Analytics, Cloud and Internet of things (SMACIT) on business systems operations and how these changes impact senior managers and business leaders means to orchestrate decisions and organize knowledge to increase value add to their customers.</p>\n<p>SMACIT has enhanced interaction, affording more “touch points”, or more ways to gain a view into how the customer is using information. From a business point of view, SMACIT enhances customer engagement by providing a wider, more comprehensive way for customers to combine and organizing information. Alternatively, SMACIT is pushing business to develop a vastly richer platform to analyze how the customer is engaging with their services and ultimately, creating knowledge.</p>\n<p>As shown in figure 1, SMACIT, and the enhanced interaction that comes with it, raises a new set of tensions within the organization. Managers, at a very course level, use the existing business systems to sense the environment to detect trends. These trends signal that new ways are required to orchestrate enterprise resources. The question of how to make the best decisions to cope with these trends comes down to capability development that enhances access to information. Redesigning enterprise systems around micro-services facilitated by container techniques, brings several insights. One, is that system architects can easily reach across enterprise elements to harness and combine data into services to generate value for customers.</p>\n<p>Containers and micro services represent a change in the way enterprises organize and maintain critical enterprise information resources. The old way of organizing business transactions as discrete department level models creates information silos. Each department required the incoming transaction data to be transformed into a compatible format. The business transaction was represented as a series of transforms as it moved from department to department.  Micro-services, which are more fine-grained, shift the focus from silo transformations to cooperation. As the service is designed, each department contributes an interface to their data. That interface provides a way to extract information from the department in the right form for the service. It also provides a way to inform the department of environmental changes. For example, while a traditional inventory system would operate on a nightly schedule, a micro-service based inventory system would operate at the rate that individual item sales arrive.</p>\n<p>One could say that micro-services reduce organizational tensions through a focus on fine-grained, cross organization cooperation. The cooperation is derived from developing capabilities to handle elements of individual business transactions. Developing these capabilities results in the development of a catalog of interfaces to departmental information and a portfolio of consuming services that present valuable new information access methods to customers. The growth of SMACIT has shifted enterprise value creation focus to the service portfolio. Digitally savvy organizations use service orchestration as a way to increase the value that they provide customers. Service orchestration relies heavily on automation of provisioning and containerized enterprise applications, which demand that applications be redesigned into fine-grained departmental information access methods. Once fine-grained access methods are in place and enterprise applications have been redesigned as services you need a way to automate provisioning and monitoring of these services. Service orchestration systems, such as Kubernetes, Docker Swarm or Apache Mesos further reduce the tension caused by SMACIT. These orchestration systems mitigate risk by automating monitoring, restart, and provisioning of services and low-level computing resources across enterprise boundaries.</p>\n<p>Orchestration systems also enhance the organizations’ ability to detect new customer information access trends. Savvy organizations discover those trends through machine learning based analysis techniques. Unsupervised machine learning techniques process large quantities of data, organizing it into clusters and outliers. Once trends have been identified, value delivery can be enhanced through optimization.  Further organization of information through Artificial Intelligence techniques, graphs and analysis techniques on graphs will bring additional insight into how the customer is learning and adapting your access methods to solve their problems.</p>\n<p>Conclusion</p>\n<p>Containers and micro-services are a technology based coping mechanism for the impact that SMACIT is having on business value generation. Inside of the enterprise, these techniques are enabling new design patterns for business software creation. However, containers and micro-services are not enough to realize digital transformation. Combining these techniques with software to orchestrate and automatically provision and scale micro-services are enabling businesses to rapidly re-organize critical information and bring new access methods to customers in dramatically reduced time frames. While the full impact has yet to play out, the benefit of breaking down information silos is enabling savvy organizations to better exploit their capabilities. Businesses are applying orchestration systems and containerized micro-services in an on-going effort to restructure business models to deliver more value to </p>\n","site":{"data":{}},"excerpt":"<p>SMACIT == Social, Mobile, Analytics, Cloud and IoT</p>","more":"<p><img src=\"/images/SMACIT.png\" alt=\"SMACIT.png\"></p>\n<p>The movement toward social interaction with mobile devices is reshaping the competitive environment of business by changing the way we think about information exchange. This movement is driving a digital transformation of the way business systems are created. This article will explore some of the impacts of the confluence of Social, Mobile, Analytics, Cloud and Internet of things (SMACIT) on business systems operations and how these changes impact senior managers and business leaders means to orchestrate decisions and organize knowledge to increase value add to their customers.</p>\n<p>SMACIT has enhanced interaction, affording more “touch points”, or more ways to gain a view into how the customer is using information. From a business point of view, SMACIT enhances customer engagement by providing a wider, more comprehensive way for customers to combine and organizing information. Alternatively, SMACIT is pushing business to develop a vastly richer platform to analyze how the customer is engaging with their services and ultimately, creating knowledge.</p>\n<p>As shown in figure 1, SMACIT, and the enhanced interaction that comes with it, raises a new set of tensions within the organization. Managers, at a very course level, use the existing business systems to sense the environment to detect trends. These trends signal that new ways are required to orchestrate enterprise resources. The question of how to make the best decisions to cope with these trends comes down to capability development that enhances access to information. Redesigning enterprise systems around micro-services facilitated by container techniques, brings several insights. One, is that system architects can easily reach across enterprise elements to harness and combine data into services to generate value for customers.</p>\n<p>Containers and micro services represent a change in the way enterprises organize and maintain critical enterprise information resources. The old way of organizing business transactions as discrete department level models creates information silos. Each department required the incoming transaction data to be transformed into a compatible format. The business transaction was represented as a series of transforms as it moved from department to department.  Micro-services, which are more fine-grained, shift the focus from silo transformations to cooperation. As the service is designed, each department contributes an interface to their data. That interface provides a way to extract information from the department in the right form for the service. It also provides a way to inform the department of environmental changes. For example, while a traditional inventory system would operate on a nightly schedule, a micro-service based inventory system would operate at the rate that individual item sales arrive.</p>\n<p>One could say that micro-services reduce organizational tensions through a focus on fine-grained, cross organization cooperation. The cooperation is derived from developing capabilities to handle elements of individual business transactions. Developing these capabilities results in the development of a catalog of interfaces to departmental information and a portfolio of consuming services that present valuable new information access methods to customers. The growth of SMACIT has shifted enterprise value creation focus to the service portfolio. Digitally savvy organizations use service orchestration as a way to increase the value that they provide customers. Service orchestration relies heavily on automation of provisioning and containerized enterprise applications, which demand that applications be redesigned into fine-grained departmental information access methods. Once fine-grained access methods are in place and enterprise applications have been redesigned as services you need a way to automate provisioning and monitoring of these services. Service orchestration systems, such as Kubernetes, Docker Swarm or Apache Mesos further reduce the tension caused by SMACIT. These orchestration systems mitigate risk by automating monitoring, restart, and provisioning of services and low-level computing resources across enterprise boundaries.</p>\n<p>Orchestration systems also enhance the organizations’ ability to detect new customer information access trends. Savvy organizations discover those trends through machine learning based analysis techniques. Unsupervised machine learning techniques process large quantities of data, organizing it into clusters and outliers. Once trends have been identified, value delivery can be enhanced through optimization.  Further organization of information through Artificial Intelligence techniques, graphs and analysis techniques on graphs will bring additional insight into how the customer is learning and adapting your access methods to solve their problems.</p>\n<p>Conclusion</p>\n<p>Containers and micro-services are a technology based coping mechanism for the impact that SMACIT is having on business value generation. Inside of the enterprise, these techniques are enabling new design patterns for business software creation. However, containers and micro-services are not enough to realize digital transformation. Combining these techniques with software to orchestrate and automatically provision and scale micro-services are enabling businesses to rapidly re-organize critical information and bring new access methods to customers in dramatically reduced time frames. While the full impact has yet to play out, the benefit of breaking down information silos is enabling savvy organizations to better exploit their capabilities. Businesses are applying orchestration systems and containerized micro-services in an on-going effort to restructure business models to deliver more value to </p>"},{"title":"Creating a basic React map app with Leaflet","date":"2018-09-22T20:27:12.000Z","_content":"\n\n\nUse OpenStreetMap, Leaflet and ReactJS\n<!-- more -->\n\nUse OpenStreetMap, Leaflet and ReactJS\n\nGoogle and Bing are not the only way to create beautiful map applications!  This post will employ OpenStreetMap and Leaflet in a React based application.  The advantage of this approach is NO license issues.  Granted Google is very liberal about the number of map loads (something around 100,000) before they start charging. But why worry?  The full source code for the project can be found on github ( [link to github]( https://github.com/muguira-james/toysoldiergolf\n)\n\n# Introduction to OpenStreetMap and Leaflet\n\nOpenStreetMap is an open source project supported by a global community.  Anybody can contribute.  From the OpenStreetMap site: \n\nOpenStreetMap emphasizes local knowledge. Contributors use aerial imagery, GPS devices, and low-tech field maps to verify that OSM is accurate and up to date.\n\nOne of the great things about OpenStreetMap is that the content is free to use, just so long as you give them credit.\n\nLeaflet is a javascript library used to create interactive maps.  It is small, fast and very easy to learn and use. Using Leaflet in a browser is as easy as including the following code is a <script> tag:\n\n```\n\n// create a map with an initial location\nvar map = L.map('map').setView([51.505, -0.09], 13);\n\n// maps are organized as tiles.  This brings in tiles around the initial location\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> \ncontributors'}).addTo(map);\n\n```\n\nI am assuming you will have included a reference to the leaflet libraries earlier in your html code.  We’ll examine how to do this latter in this post.  Let’s break the above snippet down so we understand it.  The first think to notice is the line “var map = “.  That tells leaflet to create a map object and to position the map over the point: latitude = 51.05, longitude=-0.09.  That point is very close to Hyde park, London.  The ‘13’ is the zoom factor.  A larger number zooms closer in showing more detail and smaller numbers zoom out showing greater amounts of land.\n\nMap images are drawn from satellite imagery.  The cartographer or map creator breaks the satellite image down into small squares or tiles and stores them in a database. The next lines in the code snippet tells Leaflet where to gather the tiles from and adds these tiles into the map object we created on the first line.\n\n# React and Creating a React Application\n\nThis post is focused on creating a React app so let’s talk about how to get started with React! I will use nodejs (I have version 9.X on my mac) and create-react-app to start the project.  Use npm to install create-react-app (npm install -g create-react-app). The sample project is called “toy soldier golf”.  It shows you images of toy soldiers located around the various holes on a golf course.  This initial post just shows the golf course image and statically positions the toy soldiers. Later installations of the post will include graphql to dynamically bring in the soldier location data and incorporate subscriptions to update their location.  First, let’s create our project:\n\n\n```\n\ncreate-react-app toysoldiergolf\ncd toysoldiergolf\nnpm install\nnpm start\n\n```\n\nThe last command in the above code block will start a development server and open a tab in your browser.  You should have the following showing in your browser.\n\n![create-react-app-initial.png](/images/create-react-app-initial.png)\n\nNow, we can edit the source and build what we want.  If you list the directory contents you will see 2 directories: public and src.  Public/ contains the index.html file for the application and src/ contains the App.js file.  Let’s look at the index.html file first.  In the following I’ve removed all of the comments AND I’ve added a couple of key items we will need.\n\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.3.3/dist/leaflet.css\"\n   integrity=\"sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==\"\n   crossorigin=\"\"/>\n     <!-- Make sure you put this AFTER Leaflet's CSS -->\n <script src=\"https://unpkg.com/leaflet@1.3.3/dist/leaflet.js\"\n integrity=\"sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q==\"\n crossorigin=\"\"></script>\n\n    <title>React App</title>\n    <style>\n      .leaflet-container {\n          height: 600px;\n          width: 600px;\n      }\n  </style>\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n \n  </body>\n</html>\n\n```\n\nThe original file generated from create-react-app contains: 2 “Link” tags. I’ve added a third one that brings in the Leaflet library CSS file (lines 10-16).  At the time of writing this article, Leaflet was version 1.3.3.  The next item added is the Leaflet source.  The last item added is a little further down, under the html Title tag.  We added a style tag (lines 19-23) to set the size of the Leaflet container on the page.  Experiment with these numbers (height: 600px, width: 600px)!!\n\nNow, let’s consider the file src/App.js in the following snippet: \n\n```\n\nimport React, { Component } from 'react';\nimport ShowMap from './ShowMap'\n\nvar golfCourse = require('./indy.json')\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ShowMap golfCourse={golfCourse} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\n\nWith the changes to App.js, you now have the basic framework. \n\n# Where next?\n\nLet’s step back and consider what we are trying to do. We want to show a golf course and place images near some of the holes on a golf course. We would like the program to be driven from data files (and later a dynamic graphql based feed). The first data file we need is a golf course.  I will structure the golf course data file using the GeoJSON specification.  GeoJSON creates a javascript object with an array of “Features” that include detailed information in properties about each feature. Also, notice the section called ‘initialRegion”.  When we render the map, we’ll use the data in this section to position the map over the golf course.  So, the first 2 holes on the course would be described like this:\n\n```\n\n{\n\t“type”: “Feature”,\n\t“properties”: {\n\t\t“FlagLocation: {\n\t\t\t\"latitude\": 39.79634856773296,\n          \t\t\t\"longitude\": -86.2293832770481\n        \t\t},\n\t\t“number”: 1,\n\t},\n\t“type”: “Feature”,\n\t“properties”: {\n\t\t\"FlagLocation\": {\n          \t\t\t\"latitude\": 39.80071624700618,\n          \t\t\t\"longitude\": -86.22896065955706\n       \t \t},\n\t\t“number”: 2,\n\t}\n…\n\n\t  \"initialRegion\": {\n    \t\t\"latitude\": 39.79519990082653,\n    \t\t\"longitude\": -86.22999179295153,\n    \t\t\"latitudeDelta\": 0.0005,\n    \t\t\"longitudeDelta\": 0.0020\n  \t},\n}\n\n```\n\nI clicked the green on each hole on google maps to get the latitude and longitude entries. \n\nOnce the golf course has been specified we can start to modify the arc/App.js file.  Instead of placing all the code in one file I’ll use React’s composition powers to structure the project.  Let’s make a src/ShowMap.js component to hold the map rendering logic.  In a later version of this project you will see why I move map rendering out of App. ShowMap will handle getting the map tiles, setup and map rendering.  We will use the entries in the golf course file we just worked through to guide map rendering.\n\nLeaflet and React are two separate libraries and they don’t play together very nicely.  Leaflet wants to control everything to do with the map.  When you work with just Leaflet you use event listeners to have it change appearance due to external stimulus.  We only view the map, so this is not a problem for us.  To make this project even easier, we’ll use a npm package called ‘react-leaflet’.  The designers of the package have encapsulated leaflet interaction with React.  In this instance, we are going to use the Map component, providing it with enough details to get the map on the screen.\n\n```\n\nimport React from 'react'\n\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet'\n\nclass ShowMap extends React.Component {\n\n  // create a location object out of a { Latitude, Longitude }\n  createMarkerLocation = (f) => {\n    let floc = []\n    floc.push(f.latitude)\n    floc.push(f.longitude)\n    return floc\n  }\n\n  render = () => {\n    let pos = this.createMarkerLocation(course.initialRegion);\n    return (\n      <Map\n        center={pos}\n        zoom={16}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n      </Map>\n    )\n  }\n}\n\nexport default ShowMap;\n\n```\n\nLet’s examine that code block. We import the Map, Tile and Marker components from react-leaflet.  The react-leaflet component needs a “center” and a “zoom” factor.  I hard coded the “zoom” factor for now (line 21).  The “center” object is an array of [ latitude, longitude ] (line 20).  The TileLayer requires a url pointing to the OpenStreetMap tile set.  See the OpenStreetMap docs to understand what you can do with that url.\n\nRestarting the app with yarn start (or saving the files if you left things running) should produce the following screen:\n\n![indy.png](/images/indy.png)\n\n# But wait, where do those red flags and toy soldiers come from?\n\nOk, that is the final screen!  Let’s get that going. The first thing we need is to draw a marker at each red flag.  To do that we will loop over the course file that was passed in as a prop to ShowMap.  \n\nAs a bit of debugging, try placing the following as the first statement inside the render() function: console.log(“props->”, this.props).  In the browser console you will see that App passed the course file definition down to ShowMap.  We will use a javascript map function to loop over that course file and create a marker for each flag.  Change the render function to the following:\n\n```\n\n  // render the current state of the app\n  render = () => {\n    console.log(\"p->\", this.props)\n    let course = this.props.golfCourse\n    // convert the prop initialRegion into a Leaflet position\n    let pos = this.createMarkerLocation(course.initialRegion);\n\n    // reset the playerDrawing map\n    playerDrawingUtils.mapLocationClear()\n\n    return (\n      <Map\n        center={pos}\n        zoom={16}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n          {\n            course.Features.map((f, n) => {\n              return this.createMarker(f.properties.number, f.properties.FlagLocation)\n            })\n          }\n      </Map>\n    )\n  }\n\n```\n\n\nNote that we added a map over the course file in lines 19-23.  The definition for createMarker is found on the accompanying [github]( https://github.com/muguira-james/toysoldiergolf\n)\n\nNow let’s get the soldiers showing.  First, let’s make a simple array to hold the soldier locations.\n\n```\n\n\n// as you can see from this structure the players are on hole {1, 2, 3, 4}\nconst players = [\n  {FirstName: \"Joan\", LastName: \"Jet\", ID: 1, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Ruth\", LastName: \"Crist\", ID: 2, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Beth\", LastName: \"Flick\", ID: 3, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Julie\", LastName: \"Ant\", ID: 4, Hole: 1, HoleLocation: \"FWY\"},\n  {FirstName: \"Ginny\", LastName: \"Grey\", ID: 5, Hole: 1, HoleLocation: \"FWY\"},\n  {FirstName: \"Paula\", LastName: \"Lamb\", ID: 6, Hole: 1, HoleLocation: \"GRN\"},\n  {FirstName: \"Ingid\", LastName: \"Jones\", ID: 7, Hole: 2, HoleLocation: \"TEE\"},\n  {FirstName: \"Kelly\", LastName: \"Smith\", ID: 8, Hole: 2, HoleLocation: \"FWY\"},\n  {FirstName: \"Eilean\", LastName: \"Rams\", ID: 9, Hole: 2, HoleLocation: \"GRN\"},\n  {FirstName: \"Barb\", LastName: \"Sharp\", ID: 10, Hole: 4, HoleLocation: \"FWY\"},\n  {FirstName: \"Carol\", LastName: \"Adams\", ID: 11, Hole: 4, HoleLocation: \"FWY\"},\n  {FirstName: \"Faith\", LastName: \"Hope\", ID: 12, Hole: 4, HoleLocation: \"GRN\"}\n]\n\n```\n\nInspecting the array, we are providing the soldier name, their ID, the hole they are on and the location on the hole (tee, fairway or green). This block is included in to ShowMap between the inport statements and the definition of the ShowMap component.  We can now create a map over the soldier array and use Leaflet capabilities to create and show markers on the map.\n\n```\n\n{\n            players.map((p, n) => {\n              let name = p.FirstName + \" \" + p.LastName\n              let plyr = this.createPlayer(n+1, name, p.Hole, p.HoleLocation, course)\n              return plyr\n            })\n          }\n\n```\n  \nThere are a few functions not shown to save space.  A leaflet marker needs a position (an array of [latitude, longitude]) and an icon.  We are also providing the soldier name to the leaflet popup so when you click on a soldier their name pops up.  The images for the soldiers are arranged as a dictionary and indexed by number.  The same scheme is used for the flags.\n\n# Conclusion\n\nThis article has walked through just enough information to show a map in a React app.  The project used ReactJS, Leaflet and a node component called react-leaflet.  The map is a simple base map.  There are MANY more maps available from the OpenStreetMap collection.  The next article in this series will explore more of the OpenStreetMap collection.  But, the main focus of the next article is to bring GraphQL in to make the toysoldier player positions dynamic.\n\nI hope you found this useful, thank you!\n  \n  \n\n","source":"_posts/2018-09-22-A-creating-basic-React-app-with-a-leaflet-map.md","raw":"---\ntitle: Creating a basic React map app with Leaflet\ntags:\n  - Java\ncategories:\n  - Programming\ndate: 2018-09-22 16:27:12\n---\n\n\n\nUse OpenStreetMap, Leaflet and ReactJS\n<!-- more -->\n\nUse OpenStreetMap, Leaflet and ReactJS\n\nGoogle and Bing are not the only way to create beautiful map applications!  This post will employ OpenStreetMap and Leaflet in a React based application.  The advantage of this approach is NO license issues.  Granted Google is very liberal about the number of map loads (something around 100,000) before they start charging. But why worry?  The full source code for the project can be found on github ( [link to github]( https://github.com/muguira-james/toysoldiergolf\n)\n\n# Introduction to OpenStreetMap and Leaflet\n\nOpenStreetMap is an open source project supported by a global community.  Anybody can contribute.  From the OpenStreetMap site: \n\nOpenStreetMap emphasizes local knowledge. Contributors use aerial imagery, GPS devices, and low-tech field maps to verify that OSM is accurate and up to date.\n\nOne of the great things about OpenStreetMap is that the content is free to use, just so long as you give them credit.\n\nLeaflet is a javascript library used to create interactive maps.  It is small, fast and very easy to learn and use. Using Leaflet in a browser is as easy as including the following code is a <script> tag:\n\n```\n\n// create a map with an initial location\nvar map = L.map('map').setView([51.505, -0.09], 13);\n\n// maps are organized as tiles.  This brings in tiles around the initial location\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> \ncontributors'}).addTo(map);\n\n```\n\nI am assuming you will have included a reference to the leaflet libraries earlier in your html code.  We’ll examine how to do this latter in this post.  Let’s break the above snippet down so we understand it.  The first think to notice is the line “var map = “.  That tells leaflet to create a map object and to position the map over the point: latitude = 51.05, longitude=-0.09.  That point is very close to Hyde park, London.  The ‘13’ is the zoom factor.  A larger number zooms closer in showing more detail and smaller numbers zoom out showing greater amounts of land.\n\nMap images are drawn from satellite imagery.  The cartographer or map creator breaks the satellite image down into small squares or tiles and stores them in a database. The next lines in the code snippet tells Leaflet where to gather the tiles from and adds these tiles into the map object we created on the first line.\n\n# React and Creating a React Application\n\nThis post is focused on creating a React app so let’s talk about how to get started with React! I will use nodejs (I have version 9.X on my mac) and create-react-app to start the project.  Use npm to install create-react-app (npm install -g create-react-app). The sample project is called “toy soldier golf”.  It shows you images of toy soldiers located around the various holes on a golf course.  This initial post just shows the golf course image and statically positions the toy soldiers. Later installations of the post will include graphql to dynamically bring in the soldier location data and incorporate subscriptions to update their location.  First, let’s create our project:\n\n\n```\n\ncreate-react-app toysoldiergolf\ncd toysoldiergolf\nnpm install\nnpm start\n\n```\n\nThe last command in the above code block will start a development server and open a tab in your browser.  You should have the following showing in your browser.\n\n![create-react-app-initial.png](/images/create-react-app-initial.png)\n\nNow, we can edit the source and build what we want.  If you list the directory contents you will see 2 directories: public and src.  Public/ contains the index.html file for the application and src/ contains the App.js file.  Let’s look at the index.html file first.  In the following I’ve removed all of the comments AND I’ve added a couple of key items we will need.\n\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.3.3/dist/leaflet.css\"\n   integrity=\"sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==\"\n   crossorigin=\"\"/>\n     <!-- Make sure you put this AFTER Leaflet's CSS -->\n <script src=\"https://unpkg.com/leaflet@1.3.3/dist/leaflet.js\"\n integrity=\"sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q==\"\n crossorigin=\"\"></script>\n\n    <title>React App</title>\n    <style>\n      .leaflet-container {\n          height: 600px;\n          width: 600px;\n      }\n  </style>\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n \n  </body>\n</html>\n\n```\n\nThe original file generated from create-react-app contains: 2 “Link” tags. I’ve added a third one that brings in the Leaflet library CSS file (lines 10-16).  At the time of writing this article, Leaflet was version 1.3.3.  The next item added is the Leaflet source.  The last item added is a little further down, under the html Title tag.  We added a style tag (lines 19-23) to set the size of the Leaflet container on the page.  Experiment with these numbers (height: 600px, width: 600px)!!\n\nNow, let’s consider the file src/App.js in the following snippet: \n\n```\n\nimport React, { Component } from 'react';\nimport ShowMap from './ShowMap'\n\nvar golfCourse = require('./indy.json')\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ShowMap golfCourse={golfCourse} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\n\nWith the changes to App.js, you now have the basic framework. \n\n# Where next?\n\nLet’s step back and consider what we are trying to do. We want to show a golf course and place images near some of the holes on a golf course. We would like the program to be driven from data files (and later a dynamic graphql based feed). The first data file we need is a golf course.  I will structure the golf course data file using the GeoJSON specification.  GeoJSON creates a javascript object with an array of “Features” that include detailed information in properties about each feature. Also, notice the section called ‘initialRegion”.  When we render the map, we’ll use the data in this section to position the map over the golf course.  So, the first 2 holes on the course would be described like this:\n\n```\n\n{\n\t“type”: “Feature”,\n\t“properties”: {\n\t\t“FlagLocation: {\n\t\t\t\"latitude\": 39.79634856773296,\n          \t\t\t\"longitude\": -86.2293832770481\n        \t\t},\n\t\t“number”: 1,\n\t},\n\t“type”: “Feature”,\n\t“properties”: {\n\t\t\"FlagLocation\": {\n          \t\t\t\"latitude\": 39.80071624700618,\n          \t\t\t\"longitude\": -86.22896065955706\n       \t \t},\n\t\t“number”: 2,\n\t}\n…\n\n\t  \"initialRegion\": {\n    \t\t\"latitude\": 39.79519990082653,\n    \t\t\"longitude\": -86.22999179295153,\n    \t\t\"latitudeDelta\": 0.0005,\n    \t\t\"longitudeDelta\": 0.0020\n  \t},\n}\n\n```\n\nI clicked the green on each hole on google maps to get the latitude and longitude entries. \n\nOnce the golf course has been specified we can start to modify the arc/App.js file.  Instead of placing all the code in one file I’ll use React’s composition powers to structure the project.  Let’s make a src/ShowMap.js component to hold the map rendering logic.  In a later version of this project you will see why I move map rendering out of App. ShowMap will handle getting the map tiles, setup and map rendering.  We will use the entries in the golf course file we just worked through to guide map rendering.\n\nLeaflet and React are two separate libraries and they don’t play together very nicely.  Leaflet wants to control everything to do with the map.  When you work with just Leaflet you use event listeners to have it change appearance due to external stimulus.  We only view the map, so this is not a problem for us.  To make this project even easier, we’ll use a npm package called ‘react-leaflet’.  The designers of the package have encapsulated leaflet interaction with React.  In this instance, we are going to use the Map component, providing it with enough details to get the map on the screen.\n\n```\n\nimport React from 'react'\n\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet'\n\nclass ShowMap extends React.Component {\n\n  // create a location object out of a { Latitude, Longitude }\n  createMarkerLocation = (f) => {\n    let floc = []\n    floc.push(f.latitude)\n    floc.push(f.longitude)\n    return floc\n  }\n\n  render = () => {\n    let pos = this.createMarkerLocation(course.initialRegion);\n    return (\n      <Map\n        center={pos}\n        zoom={16}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n      </Map>\n    )\n  }\n}\n\nexport default ShowMap;\n\n```\n\nLet’s examine that code block. We import the Map, Tile and Marker components from react-leaflet.  The react-leaflet component needs a “center” and a “zoom” factor.  I hard coded the “zoom” factor for now (line 21).  The “center” object is an array of [ latitude, longitude ] (line 20).  The TileLayer requires a url pointing to the OpenStreetMap tile set.  See the OpenStreetMap docs to understand what you can do with that url.\n\nRestarting the app with yarn start (or saving the files if you left things running) should produce the following screen:\n\n![indy.png](/images/indy.png)\n\n# But wait, where do those red flags and toy soldiers come from?\n\nOk, that is the final screen!  Let’s get that going. The first thing we need is to draw a marker at each red flag.  To do that we will loop over the course file that was passed in as a prop to ShowMap.  \n\nAs a bit of debugging, try placing the following as the first statement inside the render() function: console.log(“props->”, this.props).  In the browser console you will see that App passed the course file definition down to ShowMap.  We will use a javascript map function to loop over that course file and create a marker for each flag.  Change the render function to the following:\n\n```\n\n  // render the current state of the app\n  render = () => {\n    console.log(\"p->\", this.props)\n    let course = this.props.golfCourse\n    // convert the prop initialRegion into a Leaflet position\n    let pos = this.createMarkerLocation(course.initialRegion);\n\n    // reset the playerDrawing map\n    playerDrawingUtils.mapLocationClear()\n\n    return (\n      <Map\n        center={pos}\n        zoom={16}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n          {\n            course.Features.map((f, n) => {\n              return this.createMarker(f.properties.number, f.properties.FlagLocation)\n            })\n          }\n      </Map>\n    )\n  }\n\n```\n\n\nNote that we added a map over the course file in lines 19-23.  The definition for createMarker is found on the accompanying [github]( https://github.com/muguira-james/toysoldiergolf\n)\n\nNow let’s get the soldiers showing.  First, let’s make a simple array to hold the soldier locations.\n\n```\n\n\n// as you can see from this structure the players are on hole {1, 2, 3, 4}\nconst players = [\n  {FirstName: \"Joan\", LastName: \"Jet\", ID: 1, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Ruth\", LastName: \"Crist\", ID: 2, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Beth\", LastName: \"Flick\", ID: 3, Hole: 1, HoleLocation: \"TEE\"},\n  {FirstName: \"Julie\", LastName: \"Ant\", ID: 4, Hole: 1, HoleLocation: \"FWY\"},\n  {FirstName: \"Ginny\", LastName: \"Grey\", ID: 5, Hole: 1, HoleLocation: \"FWY\"},\n  {FirstName: \"Paula\", LastName: \"Lamb\", ID: 6, Hole: 1, HoleLocation: \"GRN\"},\n  {FirstName: \"Ingid\", LastName: \"Jones\", ID: 7, Hole: 2, HoleLocation: \"TEE\"},\n  {FirstName: \"Kelly\", LastName: \"Smith\", ID: 8, Hole: 2, HoleLocation: \"FWY\"},\n  {FirstName: \"Eilean\", LastName: \"Rams\", ID: 9, Hole: 2, HoleLocation: \"GRN\"},\n  {FirstName: \"Barb\", LastName: \"Sharp\", ID: 10, Hole: 4, HoleLocation: \"FWY\"},\n  {FirstName: \"Carol\", LastName: \"Adams\", ID: 11, Hole: 4, HoleLocation: \"FWY\"},\n  {FirstName: \"Faith\", LastName: \"Hope\", ID: 12, Hole: 4, HoleLocation: \"GRN\"}\n]\n\n```\n\nInspecting the array, we are providing the soldier name, their ID, the hole they are on and the location on the hole (tee, fairway or green). This block is included in to ShowMap between the inport statements and the definition of the ShowMap component.  We can now create a map over the soldier array and use Leaflet capabilities to create and show markers on the map.\n\n```\n\n{\n            players.map((p, n) => {\n              let name = p.FirstName + \" \" + p.LastName\n              let plyr = this.createPlayer(n+1, name, p.Hole, p.HoleLocation, course)\n              return plyr\n            })\n          }\n\n```\n  \nThere are a few functions not shown to save space.  A leaflet marker needs a position (an array of [latitude, longitude]) and an icon.  We are also providing the soldier name to the leaflet popup so when you click on a soldier their name pops up.  The images for the soldiers are arranged as a dictionary and indexed by number.  The same scheme is used for the flags.\n\n# Conclusion\n\nThis article has walked through just enough information to show a map in a React app.  The project used ReactJS, Leaflet and a node component called react-leaflet.  The map is a simple base map.  There are MANY more maps available from the OpenStreetMap collection.  The next article in this series will explore more of the OpenStreetMap collection.  But, the main focus of the next article is to bring GraphQL in to make the toysoldier player positions dynamic.\n\nI hope you found this useful, thank you!\n  \n  \n\n","slug":"2018-09-22-A-creating-basic-React-app-with-a-leaflet-map","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0a90006i7e8aezr6gzt","content":"<p>Use OpenStreetMap, Leaflet and ReactJS</p>\n<span id=\"more\"></span>\n\n<p>Use OpenStreetMap, Leaflet and ReactJS</p>\n<p>Google and Bing are not the only way to create beautiful map applications!  This post will employ OpenStreetMap and Leaflet in a React based application.  The advantage of this approach is NO license issues.  Granted Google is very liberal about the number of map loads (something around 100,000) before they start charging. But why worry?  The full source code for the project can be found on github ( <a href=\"https://github.com/muguira-james/toysoldiergolf\">link to github</a></p>\n<h1 id=\"Introduction-to-OpenStreetMap-and-Leaflet\"><a href=\"#Introduction-to-OpenStreetMap-and-Leaflet\" class=\"headerlink\" title=\"Introduction to OpenStreetMap and Leaflet\"></a>Introduction to OpenStreetMap and Leaflet</h1><p>OpenStreetMap is an open source project supported by a global community.  Anybody can contribute.  From the OpenStreetMap site: </p>\n<p>OpenStreetMap emphasizes local knowledge. Contributors use aerial imagery, GPS devices, and low-tech field maps to verify that OSM is accurate and up to date.</p>\n<p>One of the great things about OpenStreetMap is that the content is free to use, just so long as you give them credit.</p>\n<p>Leaflet is a javascript library used to create interactive maps.  It is small, fast and very easy to learn and use. Using Leaflet in a browser is as easy as including the following code is a <script> tag:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// create a map with an initial location</span><br><span class=\"line\">var map = L.map(&#x27;map&#x27;).setView([51.505, -0.09], 13);</span><br><span class=\"line\"></span><br><span class=\"line\">// maps are organized as tiles.  This brings in tiles around the initial location</span><br><span class=\"line\">L.tileLayer(&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    attribution: &#x27;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; </span><br><span class=\"line\">contributors&#x27;&#125;).addTo(map);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>I am assuming you will have included a reference to the leaflet libraries earlier in your html code.  We’ll examine how to do this latter in this post.  Let’s break the above snippet down so we understand it.  The first think to notice is the line “var map = “.  That tells leaflet to create a map object and to position the map over the point: latitude = 51.05, longitude=-0.09.  That point is very close to Hyde park, London.  The ‘13’ is the zoom factor.  A larger number zooms closer in showing more detail and smaller numbers zoom out showing greater amounts of land.</p>\n<p>Map images are drawn from satellite imagery.  The cartographer or map creator breaks the satellite image down into small squares or tiles and stores them in a database. The next lines in the code snippet tells Leaflet where to gather the tiles from and adds these tiles into the map object we created on the first line.</p>\n<h1 id=\"React-and-Creating-a-React-Application\"><a href=\"#React-and-Creating-a-React-Application\" class=\"headerlink\" title=\"React and Creating a React Application\"></a>React and Creating a React Application</h1><p>This post is focused on creating a React app so let’s talk about how to get started with React! I will use nodejs (I have version 9.X on my mac) and create-react-app to start the project.  Use npm to install create-react-app (npm install -g create-react-app). The sample project is called “toy soldier golf”.  It shows you images of toy soldiers located around the various holes on a golf course.  This initial post just shows the golf course image and statically positions the toy soldiers. Later installations of the post will include graphql to dynamically bring in the soldier location data and incorporate subscriptions to update their location.  First, let’s create our project:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">create-react-app toysoldiergolf</span><br><span class=\"line\">cd toysoldiergolf</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The last command in the above code block will start a development server and open a tab in your browser.  You should have the following showing in your browser.</p>\n<p><img src=\"/images/create-react-app-initial.png\" alt=\"create-react-app-initial.png\"></p>\n<p>Now, we can edit the source and build what we want.  If you list the directory contents you will see 2 directories: public and src.  Public/ contains the index.html file for the application and src/ contains the App.js file.  Let’s look at the index.html file first.  In the following I’ve removed all of the comments AND I’ve added a couple of key items we will need.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;manifest&quot; href=&quot;%PUBLIC_URL%/manifest.json&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.3.3/dist/leaflet.css&quot;</span><br><span class=\"line\">   integrity=&quot;sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==&quot;</span><br><span class=\"line\">   crossorigin=&quot;&quot;/&gt;</span><br><span class=\"line\">     &lt;!-- Make sure you put this AFTER Leaflet&#x27;s CSS --&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/leaflet@1.3.3/dist/leaflet.js&quot;</span><br><span class=\"line\"> integrity=&quot;sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q==&quot;</span><br><span class=\"line\"> crossorigin=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;title&gt;React App&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      .leaflet-container &#123;</span><br><span class=\"line\">          height: 600px;</span><br><span class=\"line\">          width: 600px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;noscript&gt;</span><br><span class=\"line\">      You need to enable JavaScript to run this app.</span><br><span class=\"line\">    &lt;/noscript&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The original file generated from create-react-app contains: 2 “Link” tags. I’ve added a third one that brings in the Leaflet library CSS file (lines 10-16).  At the time of writing this article, Leaflet was version 1.3.3.  The next item added is the Leaflet source.  The last item added is a little further down, under the html Title tag.  We added a style tag (lines 19-23) to set the size of the Leaflet container on the page.  Experiment with these numbers (height: 600px, width: 600px)!!</p>\n<p>Now, let’s consider the file src/App.js in the following snippet: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">import ShowMap from &#x27;./ShowMap&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var golfCourse = require(&#x27;./indy.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ShowMap golfCourse=&#123;golfCourse&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default App;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>With the changes to App.js, you now have the basic framework. </p>\n<h1 id=\"Where-next\"><a href=\"#Where-next\" class=\"headerlink\" title=\"Where next?\"></a>Where next?</h1><p>Let’s step back and consider what we are trying to do. We want to show a golf course and place images near some of the holes on a golf course. We would like the program to be driven from data files (and later a dynamic graphql based feed). The first data file we need is a golf course.  I will structure the golf course data file using the GeoJSON specification.  GeoJSON creates a javascript object with an array of “Features” that include detailed information in properties about each feature. Also, notice the section called ‘initialRegion”.  When we render the map, we’ll use the data in this section to position the map over the golf course.  So, the first 2 holes on the course would be described like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">s''“type”: “Feature”,</span><br><span class=\"line\">s''“properties”: &#123;</span><br><span class=\"line\">s''s''“FlagLocation: &#123;</span><br><span class=\"line\">s''s''s''&quot;latitude&quot;: 39.79634856773296,</span><br><span class=\"line\">          \t\t\t&quot;longitude&quot;: -86.2293832770481</span><br><span class=\"line\">        \t\t&#125;,</span><br><span class=\"line\">s''s''“number”: 1,</span><br><span class=\"line\">s''&#125;,</span><br><span class=\"line\">s''“type”: “Feature”,</span><br><span class=\"line\">s''“properties”: &#123;</span><br><span class=\"line\">s''s''&quot;FlagLocation&quot;: &#123;</span><br><span class=\"line\">          \t\t\t&quot;latitude&quot;: 39.80071624700618,</span><br><span class=\"line\">          \t\t\t&quot;longitude&quot;: -86.22896065955706</span><br><span class=\"line\">       \t \t&#125;,</span><br><span class=\"line\">s''s''“number”: 2,</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">…</span><br><span class=\"line\"></span><br><span class=\"line\">s''  &quot;initialRegion&quot;: &#123;</span><br><span class=\"line\">    \t\t&quot;latitude&quot;: 39.79519990082653,</span><br><span class=\"line\">    \t\t&quot;longitude&quot;: -86.22999179295153,</span><br><span class=\"line\">    \t\t&quot;latitudeDelta&quot;: 0.0005,</span><br><span class=\"line\">    \t\t&quot;longitudeDelta&quot;: 0.0020</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>I clicked the green on each hole on google maps to get the latitude and longitude entries. </p>\n<p>Once the golf course has been specified we can start to modify the arc/App.js file.  Instead of placing all the code in one file I’ll use React’s composition powers to structure the project.  Let’s make a src/ShowMap.js component to hold the map rendering logic.  In a later version of this project you will see why I move map rendering out of App. ShowMap will handle getting the map tiles, setup and map rendering.  We will use the entries in the golf course file we just worked through to guide map rendering.</p>\n<p>Leaflet and React are two separate libraries and they don’t play together very nicely.  Leaflet wants to control everything to do with the map.  When you work with just Leaflet you use event listeners to have it change appearance due to external stimulus.  We only view the map, so this is not a problem for us.  To make this project even easier, we’ll use a npm package called ‘react-leaflet’.  The designers of the package have encapsulated leaflet interaction with React.  In this instance, we are going to use the Map component, providing it with enough details to get the map on the screen.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Map, TileLayer, Marker, Popup &#125; from &#x27;react-leaflet&#x27;;</span><br><span class=\"line\">import L from &#x27;leaflet&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class ShowMap extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // create a location object out of a &#123; Latitude, Longitude &#125;</span><br><span class=\"line\">  createMarkerLocation = (f) =&gt; &#123;</span><br><span class=\"line\">    let floc = []</span><br><span class=\"line\">    floc.push(f.latitude)</span><br><span class=\"line\">    floc.push(f.longitude)</span><br><span class=\"line\">    return floc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render = () =&gt; &#123;</span><br><span class=\"line\">    let pos = this.createMarkerLocation(course.initialRegion);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Map</span><br><span class=\"line\">        center=&#123;pos&#125;</span><br><span class=\"line\">        zoom=&#123;16&#125;&gt;</span><br><span class=\"line\">        &lt;TileLayer</span><br><span class=\"line\">          url=&quot;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&quot;</span><br><span class=\"line\">          attribution=&quot;&amp;copy; &lt;a href=&amp;quot;http://osm.org/copyright&amp;quot;&gt;OpenStreetMap&lt;/a&gt; contributors&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/Map&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ShowMap;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Let’s examine that code block. We import the Map, Tile and Marker components from react-leaflet.  The react-leaflet component needs a “center” and a “zoom” factor.  I hard coded the “zoom” factor for now (line 21).  The “center” object is an array of [ latitude, longitude ] (line 20).  The TileLayer requires a url pointing to the OpenStreetMap tile set.  See the OpenStreetMap docs to understand what you can do with that url.</p>\n<p>Restarting the app with yarn start (or saving the files if you left things running) should produce the following screen:</p>\n<p><img src=\"/images/indy.png\" alt=\"indy.png\"></p>\n<h1 id=\"But-wait-where-do-those-red-flags-and-toy-soldiers-come-from\"><a href=\"#But-wait-where-do-those-red-flags-and-toy-soldiers-come-from\" class=\"headerlink\" title=\"But wait, where do those red flags and toy soldiers come from?\"></a>But wait, where do those red flags and toy soldiers come from?</h1><p>Ok, that is the final screen!  Let’s get that going. The first thing we need is to draw a marker at each red flag.  To do that we will loop over the course file that was passed in as a prop to ShowMap.  </p>\n<p>As a bit of debugging, try placing the following as the first statement inside the render() function: console.log(“props-&gt;”, this.props).  In the browser console you will see that App passed the course file definition down to ShowMap.  We will use a javascript map function to loop over that course file and create a marker for each flag.  Change the render function to the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// render the current state of the app</span><br><span class=\"line\">render = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&quot;p-&gt;&quot;, this.props)</span><br><span class=\"line\">  let course = this.props.golfCourse</span><br><span class=\"line\">  // convert the prop initialRegion into a Leaflet position</span><br><span class=\"line\">  let pos = this.createMarkerLocation(course.initialRegion);</span><br><span class=\"line\"></span><br><span class=\"line\">  // reset the playerDrawing map</span><br><span class=\"line\">  playerDrawingUtils.mapLocationClear()</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Map</span><br><span class=\"line\">      center=&#123;pos&#125;</span><br><span class=\"line\">      zoom=&#123;16&#125;&gt;</span><br><span class=\"line\">      &lt;TileLayer</span><br><span class=\"line\">        url=&quot;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&quot;</span><br><span class=\"line\">        attribution=&quot;&amp;copy; &lt;a href=&amp;quot;http://osm.org/copyright&amp;quot;&gt;OpenStreetMap&lt;/a&gt; contributors&quot;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          course.Features.map((f, n) =&gt; &#123;</span><br><span class=\"line\">            return this.createMarker(f.properties.number, f.properties.FlagLocation)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/Map&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>Note that we added a map over the course file in lines 19-23.  The definition for createMarker is found on the accompanying <a href=\"https://github.com/muguira-james/toysoldiergolf\">github</a></p>\n<p>Now let’s get the soldiers showing.  First, let’s make a simple array to hold the soldier locations.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// as you can see from this structure the players are on hole &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">const players = [</span><br><span class=\"line\">  &#123;FirstName: &quot;Joan&quot;, LastName: &quot;Jet&quot;, ID: 1, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ruth&quot;, LastName: &quot;Crist&quot;, ID: 2, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Beth&quot;, LastName: &quot;Flick&quot;, ID: 3, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Julie&quot;, LastName: &quot;Ant&quot;, ID: 4, Hole: 1, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ginny&quot;, LastName: &quot;Grey&quot;, ID: 5, Hole: 1, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Paula&quot;, LastName: &quot;Lamb&quot;, ID: 6, Hole: 1, HoleLocation: &quot;GRN&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ingid&quot;, LastName: &quot;Jones&quot;, ID: 7, Hole: 2, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Kelly&quot;, LastName: &quot;Smith&quot;, ID: 8, Hole: 2, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Eilean&quot;, LastName: &quot;Rams&quot;, ID: 9, Hole: 2, HoleLocation: &quot;GRN&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Barb&quot;, LastName: &quot;Sharp&quot;, ID: 10, Hole: 4, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Carol&quot;, LastName: &quot;Adams&quot;, ID: 11, Hole: 4, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Faith&quot;, LastName: &quot;Hope&quot;, ID: 12, Hole: 4, HoleLocation: &quot;GRN&quot;&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Inspecting the array, we are providing the soldier name, their ID, the hole they are on and the location on the hole (tee, fairway or green). This block is included in to ShowMap between the inport statements and the definition of the ShowMap component.  We can now create a map over the soldier array and use Leaflet capabilities to create and show markers on the map.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">            players.map((p, n) =&gt; &#123;</span><br><span class=\"line\">              let name = p.FirstName + &quot; &quot; + p.LastName</span><br><span class=\"line\">              let plyr = this.createPlayer(n+1, name, p.Hole, p.HoleLocation, course)</span><br><span class=\"line\">              return plyr</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>There are a few functions not shown to save space.  A leaflet marker needs a position (an array of [latitude, longitude]) and an icon.  We are also providing the soldier name to the leaflet popup so when you click on a soldier their name pops up.  The images for the soldiers are arranged as a dictionary and indexed by number.  The same scheme is used for the flags.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This article has walked through just enough information to show a map in a React app.  The project used ReactJS, Leaflet and a node component called react-leaflet.  The map is a simple base map.  There are MANY more maps available from the OpenStreetMap collection.  The next article in this series will explore more of the OpenStreetMap collection.  But, the main focus of the next article is to bring GraphQL in to make the toysoldier player positions dynamic.</p>\n<p>I hope you found this useful, thank you!</p>\n","site":{"data":{}},"excerpt":"<p>Use OpenStreetMap, Leaflet and ReactJS</p>","more":"<p>Use OpenStreetMap, Leaflet and ReactJS</p>\n<p>Google and Bing are not the only way to create beautiful map applications!  This post will employ OpenStreetMap and Leaflet in a React based application.  The advantage of this approach is NO license issues.  Granted Google is very liberal about the number of map loads (something around 100,000) before they start charging. But why worry?  The full source code for the project can be found on github ( <a href=\"https://github.com/muguira-james/toysoldiergolf\">link to github</a></p>\n<h1 id=\"Introduction-to-OpenStreetMap-and-Leaflet\"><a href=\"#Introduction-to-OpenStreetMap-and-Leaflet\" class=\"headerlink\" title=\"Introduction to OpenStreetMap and Leaflet\"></a>Introduction to OpenStreetMap and Leaflet</h1><p>OpenStreetMap is an open source project supported by a global community.  Anybody can contribute.  From the OpenStreetMap site: </p>\n<p>OpenStreetMap emphasizes local knowledge. Contributors use aerial imagery, GPS devices, and low-tech field maps to verify that OSM is accurate and up to date.</p>\n<p>One of the great things about OpenStreetMap is that the content is free to use, just so long as you give them credit.</p>\n<p>Leaflet is a javascript library used to create interactive maps.  It is small, fast and very easy to learn and use. Using Leaflet in a browser is as easy as including the following code is a <script> tag:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// create a map with an initial location</span><br><span class=\"line\">var map = L.map(&#x27;map&#x27;).setView([51.505, -0.09], 13);</span><br><span class=\"line\"></span><br><span class=\"line\">// maps are organized as tiles.  This brings in tiles around the initial location</span><br><span class=\"line\">L.tileLayer(&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    attribution: &#x27;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; </span><br><span class=\"line\">contributors&#x27;&#125;).addTo(map);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>I am assuming you will have included a reference to the leaflet libraries earlier in your html code.  We’ll examine how to do this latter in this post.  Let’s break the above snippet down so we understand it.  The first think to notice is the line “var map = “.  That tells leaflet to create a map object and to position the map over the point: latitude = 51.05, longitude=-0.09.  That point is very close to Hyde park, London.  The ‘13’ is the zoom factor.  A larger number zooms closer in showing more detail and smaller numbers zoom out showing greater amounts of land.</p>\n<p>Map images are drawn from satellite imagery.  The cartographer or map creator breaks the satellite image down into small squares or tiles and stores them in a database. The next lines in the code snippet tells Leaflet where to gather the tiles from and adds these tiles into the map object we created on the first line.</p>\n<h1 id=\"React-and-Creating-a-React-Application\"><a href=\"#React-and-Creating-a-React-Application\" class=\"headerlink\" title=\"React and Creating a React Application\"></a>React and Creating a React Application</h1><p>This post is focused on creating a React app so let’s talk about how to get started with React! I will use nodejs (I have version 9.X on my mac) and create-react-app to start the project.  Use npm to install create-react-app (npm install -g create-react-app). The sample project is called “toy soldier golf”.  It shows you images of toy soldiers located around the various holes on a golf course.  This initial post just shows the golf course image and statically positions the toy soldiers. Later installations of the post will include graphql to dynamically bring in the soldier location data and incorporate subscriptions to update their location.  First, let’s create our project:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">create-react-app toysoldiergolf</span><br><span class=\"line\">cd toysoldiergolf</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The last command in the above code block will start a development server and open a tab in your browser.  You should have the following showing in your browser.</p>\n<p><img src=\"/images/create-react-app-initial.png\" alt=\"create-react-app-initial.png\"></p>\n<p>Now, we can edit the source and build what we want.  If you list the directory contents you will see 2 directories: public and src.  Public/ contains the index.html file for the application and src/ contains the App.js file.  Let’s look at the index.html file first.  In the following I’ve removed all of the comments AND I’ve added a couple of key items we will need.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;manifest&quot; href=&quot;%PUBLIC_URL%/manifest.json&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.3.3/dist/leaflet.css&quot;</span><br><span class=\"line\">   integrity=&quot;sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==&quot;</span><br><span class=\"line\">   crossorigin=&quot;&quot;/&gt;</span><br><span class=\"line\">     &lt;!-- Make sure you put this AFTER Leaflet&#x27;s CSS --&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/leaflet@1.3.3/dist/leaflet.js&quot;</span><br><span class=\"line\"> integrity=&quot;sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q==&quot;</span><br><span class=\"line\"> crossorigin=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;title&gt;React App&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      .leaflet-container &#123;</span><br><span class=\"line\">          height: 600px;</span><br><span class=\"line\">          width: 600px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;noscript&gt;</span><br><span class=\"line\">      You need to enable JavaScript to run this app.</span><br><span class=\"line\">    &lt;/noscript&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The original file generated from create-react-app contains: 2 “Link” tags. I’ve added a third one that brings in the Leaflet library CSS file (lines 10-16).  At the time of writing this article, Leaflet was version 1.3.3.  The next item added is the Leaflet source.  The last item added is a little further down, under the html Title tag.  We added a style tag (lines 19-23) to set the size of the Leaflet container on the page.  Experiment with these numbers (height: 600px, width: 600px)!!</p>\n<p>Now, let’s consider the file src/App.js in the following snippet: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">import ShowMap from &#x27;./ShowMap&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var golfCourse = require(&#x27;./indy.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ShowMap golfCourse=&#123;golfCourse&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default App;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>With the changes to App.js, you now have the basic framework. </p>\n<h1 id=\"Where-next\"><a href=\"#Where-next\" class=\"headerlink\" title=\"Where next?\"></a>Where next?</h1><p>Let’s step back and consider what we are trying to do. We want to show a golf course and place images near some of the holes on a golf course. We would like the program to be driven from data files (and later a dynamic graphql based feed). The first data file we need is a golf course.  I will structure the golf course data file using the GeoJSON specification.  GeoJSON creates a javascript object with an array of “Features” that include detailed information in properties about each feature. Also, notice the section called ‘initialRegion”.  When we render the map, we’ll use the data in this section to position the map over the golf course.  So, the first 2 holes on the course would be described like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">s''“type”: “Feature”,</span><br><span class=\"line\">s''“properties”: &#123;</span><br><span class=\"line\">s''s''“FlagLocation: &#123;</span><br><span class=\"line\">s''s''s''&quot;latitude&quot;: 39.79634856773296,</span><br><span class=\"line\">          \t\t\t&quot;longitude&quot;: -86.2293832770481</span><br><span class=\"line\">        \t\t&#125;,</span><br><span class=\"line\">s''s''“number”: 1,</span><br><span class=\"line\">s''&#125;,</span><br><span class=\"line\">s''“type”: “Feature”,</span><br><span class=\"line\">s''“properties”: &#123;</span><br><span class=\"line\">s''s''&quot;FlagLocation&quot;: &#123;</span><br><span class=\"line\">          \t\t\t&quot;latitude&quot;: 39.80071624700618,</span><br><span class=\"line\">          \t\t\t&quot;longitude&quot;: -86.22896065955706</span><br><span class=\"line\">       \t \t&#125;,</span><br><span class=\"line\">s''s''“number”: 2,</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">…</span><br><span class=\"line\"></span><br><span class=\"line\">s''  &quot;initialRegion&quot;: &#123;</span><br><span class=\"line\">    \t\t&quot;latitude&quot;: 39.79519990082653,</span><br><span class=\"line\">    \t\t&quot;longitude&quot;: -86.22999179295153,</span><br><span class=\"line\">    \t\t&quot;latitudeDelta&quot;: 0.0005,</span><br><span class=\"line\">    \t\t&quot;longitudeDelta&quot;: 0.0020</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>I clicked the green on each hole on google maps to get the latitude and longitude entries. </p>\n<p>Once the golf course has been specified we can start to modify the arc/App.js file.  Instead of placing all the code in one file I’ll use React’s composition powers to structure the project.  Let’s make a src/ShowMap.js component to hold the map rendering logic.  In a later version of this project you will see why I move map rendering out of App. ShowMap will handle getting the map tiles, setup and map rendering.  We will use the entries in the golf course file we just worked through to guide map rendering.</p>\n<p>Leaflet and React are two separate libraries and they don’t play together very nicely.  Leaflet wants to control everything to do with the map.  When you work with just Leaflet you use event listeners to have it change appearance due to external stimulus.  We only view the map, so this is not a problem for us.  To make this project even easier, we’ll use a npm package called ‘react-leaflet’.  The designers of the package have encapsulated leaflet interaction with React.  In this instance, we are going to use the Map component, providing it with enough details to get the map on the screen.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Map, TileLayer, Marker, Popup &#125; from &#x27;react-leaflet&#x27;;</span><br><span class=\"line\">import L from &#x27;leaflet&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class ShowMap extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // create a location object out of a &#123; Latitude, Longitude &#125;</span><br><span class=\"line\">  createMarkerLocation = (f) =&gt; &#123;</span><br><span class=\"line\">    let floc = []</span><br><span class=\"line\">    floc.push(f.latitude)</span><br><span class=\"line\">    floc.push(f.longitude)</span><br><span class=\"line\">    return floc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render = () =&gt; &#123;</span><br><span class=\"line\">    let pos = this.createMarkerLocation(course.initialRegion);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Map</span><br><span class=\"line\">        center=&#123;pos&#125;</span><br><span class=\"line\">        zoom=&#123;16&#125;&gt;</span><br><span class=\"line\">        &lt;TileLayer</span><br><span class=\"line\">          url=&quot;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&quot;</span><br><span class=\"line\">          attribution=&quot;&amp;copy; &lt;a href=&amp;quot;http://osm.org/copyright&amp;quot;&gt;OpenStreetMap&lt;/a&gt; contributors&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/Map&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ShowMap;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Let’s examine that code block. We import the Map, Tile and Marker components from react-leaflet.  The react-leaflet component needs a “center” and a “zoom” factor.  I hard coded the “zoom” factor for now (line 21).  The “center” object is an array of [ latitude, longitude ] (line 20).  The TileLayer requires a url pointing to the OpenStreetMap tile set.  See the OpenStreetMap docs to understand what you can do with that url.</p>\n<p>Restarting the app with yarn start (or saving the files if you left things running) should produce the following screen:</p>\n<p><img src=\"/images/indy.png\" alt=\"indy.png\"></p>\n<h1 id=\"But-wait-where-do-those-red-flags-and-toy-soldiers-come-from\"><a href=\"#But-wait-where-do-those-red-flags-and-toy-soldiers-come-from\" class=\"headerlink\" title=\"But wait, where do those red flags and toy soldiers come from?\"></a>But wait, where do those red flags and toy soldiers come from?</h1><p>Ok, that is the final screen!  Let’s get that going. The first thing we need is to draw a marker at each red flag.  To do that we will loop over the course file that was passed in as a prop to ShowMap.  </p>\n<p>As a bit of debugging, try placing the following as the first statement inside the render() function: console.log(“props-&gt;”, this.props).  In the browser console you will see that App passed the course file definition down to ShowMap.  We will use a javascript map function to loop over that course file and create a marker for each flag.  Change the render function to the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// render the current state of the app</span><br><span class=\"line\">render = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&quot;p-&gt;&quot;, this.props)</span><br><span class=\"line\">  let course = this.props.golfCourse</span><br><span class=\"line\">  // convert the prop initialRegion into a Leaflet position</span><br><span class=\"line\">  let pos = this.createMarkerLocation(course.initialRegion);</span><br><span class=\"line\"></span><br><span class=\"line\">  // reset the playerDrawing map</span><br><span class=\"line\">  playerDrawingUtils.mapLocationClear()</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Map</span><br><span class=\"line\">      center=&#123;pos&#125;</span><br><span class=\"line\">      zoom=&#123;16&#125;&gt;</span><br><span class=\"line\">      &lt;TileLayer</span><br><span class=\"line\">        url=&quot;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&quot;</span><br><span class=\"line\">        attribution=&quot;&amp;copy; &lt;a href=&amp;quot;http://osm.org/copyright&amp;quot;&gt;OpenStreetMap&lt;/a&gt; contributors&quot;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          course.Features.map((f, n) =&gt; &#123;</span><br><span class=\"line\">            return this.createMarker(f.properties.number, f.properties.FlagLocation)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/Map&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>Note that we added a map over the course file in lines 19-23.  The definition for createMarker is found on the accompanying <a href=\"https://github.com/muguira-james/toysoldiergolf\">github</a></p>\n<p>Now let’s get the soldiers showing.  First, let’s make a simple array to hold the soldier locations.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// as you can see from this structure the players are on hole &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">const players = [</span><br><span class=\"line\">  &#123;FirstName: &quot;Joan&quot;, LastName: &quot;Jet&quot;, ID: 1, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ruth&quot;, LastName: &quot;Crist&quot;, ID: 2, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Beth&quot;, LastName: &quot;Flick&quot;, ID: 3, Hole: 1, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Julie&quot;, LastName: &quot;Ant&quot;, ID: 4, Hole: 1, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ginny&quot;, LastName: &quot;Grey&quot;, ID: 5, Hole: 1, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Paula&quot;, LastName: &quot;Lamb&quot;, ID: 6, Hole: 1, HoleLocation: &quot;GRN&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Ingid&quot;, LastName: &quot;Jones&quot;, ID: 7, Hole: 2, HoleLocation: &quot;TEE&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Kelly&quot;, LastName: &quot;Smith&quot;, ID: 8, Hole: 2, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Eilean&quot;, LastName: &quot;Rams&quot;, ID: 9, Hole: 2, HoleLocation: &quot;GRN&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Barb&quot;, LastName: &quot;Sharp&quot;, ID: 10, Hole: 4, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Carol&quot;, LastName: &quot;Adams&quot;, ID: 11, Hole: 4, HoleLocation: &quot;FWY&quot;&#125;,</span><br><span class=\"line\">  &#123;FirstName: &quot;Faith&quot;, LastName: &quot;Hope&quot;, ID: 12, Hole: 4, HoleLocation: &quot;GRN&quot;&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Inspecting the array, we are providing the soldier name, their ID, the hole they are on and the location on the hole (tee, fairway or green). This block is included in to ShowMap between the inport statements and the definition of the ShowMap component.  We can now create a map over the soldier array and use Leaflet capabilities to create and show markers on the map.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">            players.map((p, n) =&gt; &#123;</span><br><span class=\"line\">              let name = p.FirstName + &quot; &quot; + p.LastName</span><br><span class=\"line\">              let plyr = this.createPlayer(n+1, name, p.Hole, p.HoleLocation, course)</span><br><span class=\"line\">              return plyr</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>There are a few functions not shown to save space.  A leaflet marker needs a position (an array of [latitude, longitude]) and an icon.  We are also providing the soldier name to the leaflet popup so when you click on a soldier their name pops up.  The images for the soldiers are arranged as a dictionary and indexed by number.  The same scheme is used for the flags.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This article has walked through just enough information to show a map in a React app.  The project used ReactJS, Leaflet and a node component called react-leaflet.  The map is a simple base map.  There are MANY more maps available from the OpenStreetMap collection.  The next article in this series will explore more of the OpenStreetMap collection.  But, the main focus of the next article is to bring GraphQL in to make the toysoldier player positions dynamic.</p>\n<p>I hope you found this useful, thank you!</p>"},{"title":"JUnit Testing in java","date":"2018-10-06T17:27:12.000Z","_content":"\n\n\nUsing JUint 5 and JDK 8\n<!-- more -->\n# Introduction\n\nThis post will examine testing in the java programming language.  We’ll use an implementation of a graph abstract data type to motivate testing at the unit and behavior levels using java.  A graph is a type of Abstract Data Type (ADT) that allows you to capture and reason about the relationships between objects in your problem.  There are several open source projects that implement a graph as their core data structure, for example: the Neo4J database and the open source Cassandra database.\n\nThe sample code for this article can be found on: ( [link to github]( https://github.com/muguira-james/GraphsTesting_Java ))\n\n# Tool set\n\nSince this post is going to explore java, let’s state the tool set we’ll use: \n\nJava 1.8 – openjdk\n\nEclipse – any recent version\n\nJUnit – 5.0.\n\n# What is a Graph?\n\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\nA graph is composed of nodes, also called vertices and edges.  A node contains information about characters in our game. In this case, a node contains information like the character name, their relative strength, what they are carrying, etc.  In our diagram: the oval with the name Jasper is a node.  Jasper is carrying a sword.  Another node is Emma.  She is carrying a wand.  You will notice that the nodes also have edges or arrows connecting them.  These edges represent relationships between the characters.\n\n# Implementation\n\nHow could we represent these nodes and edges in a graph ADT? Let’s first start with defining a java class for the overall graph and then we can create specialized extensions.  We’ll use a Java abstract class and define the interface that we want the specializations to implement.\n\n```\n\npackage grandview;\n\nimport java.util.List;\n\n// an abstract Graph type.\n//\n// To keep it simple, I’ll allow node and edge labels to be defined with integers.\npublic abstract class Graph {\n\tprivate int numVertices;\n\tprivate int numEdges;\n\n\tpublic Graph() {\n\t\tnumVertices = 0;\n\t\tnumEdges = 0;\n\t}\n\t\n\tpublic int getNumVertices() {\n\t\treturn numVertices;\n\t}\n\t\n\tpublic int getNumEdges() {\n\t\treturn numEdges;\n\t}\n\n\tpublic void addVertex() {\n\t\t\n\t\timplementAddVertex();\n\t\tnumVertices++ ;\n\t}\n\t\n\tpublic void addEdge(int v, int w) {\n\t\timplementAddEdge(v, w);\n\t\tnumEdges++;\n\t}\n\t\n\tpublic abstract void implementAddVertex();\n\tpublic abstract void implementAddEdge(int v, int w);\n\t\n\tpublic abstract List<Integer> getNeighbors(int v);\n}\n\n```\n\nThe Graph object contains methods for getNumVertices(), getNumEdges(), addVertex() and a constructor.  Graph object implementors must define the abstract methods: implementAddVertex(), implementAddEdge() and getNeighbors().\n\nTo get this going in Eclipse, define a new Java package (in my case called Grandview), and inside of that define a new class called Graph.  There are 2 ways we can implement the relationships in a graph, we can implement the relationships as an adjacency matrix or we can implement then as adjacency lists.  Since this post will cover testing let’s use adjacency lists as our implementation.\n\nFor the case of the node labeled Tom: the adjacency list would contain the node id (‘1’) and a list of each node that Tom has a relationship with (Charlie, node 3, Olivia, node 5, and Ben, node 4).  Notice that I’m only listing relationships that are “out bound” from Tom.\n\n![adjacencyList.png](/images/AdjacencyList.png)\n\nThe following code implements a concrete instance of a Graph object called GraphAdjList.\n\n```\n\npackage grandview;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GraphAdjList extends Graph {\n\n\tprivate Map<Integer, ArrayList<Integer>> adjListMap = \n\t\t\tnew HashMap<Integer, ArrayList<Integer>>();\n\t\n\t@Override\n\tpublic void implementAddVertex() {\n\t\t// add a new vertex (or node) to the graph\n\t\tint v = getNumVertices();\n\t\tArrayList<Integer> neighbors = new ArrayList<Integer>();\n\n\t\tadjListMap.put(v, neighbors);\n\n\t}\n\n\t@Override\n\tpublic void implementAddEdge(int v, int w) {\n\t\t// add edge w to node v\n\t\t(adjListMap.get(v)).add(w);\n\t}\n\t\n\t@Override\n\tpublic List<Integer> getNeighbors(int v) {\n\t\t// show the neighbors of the given node\n\t\t\n\t\treturn adjListMap.get(v);\n\t}\n\t\t\n\tpublic void showGraph() {\n\t\tSystem.out.println(\"-----------------------\");\n\t\tfor (int j=0; j<adjListMap.size(); j++) {\n\t\t\t\n\t\t\tSystem.out.format(\"Vertex num = %d\\n\", j);\n\t\t\t\n\t\t\tfor (Integer it: adjListMap.get(j)) {\n\t\t\t\tSystem.out.format(\"\\tconnected to: %d\\n\", it);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"-----------------------\");\n\t}\n\n}\n\n```\n\nYou should see the 3 “@Override” statements in the above code.  These are the methods we are required to implement when we extend Graph. \n\n# Testing\n\nNow, we can explore testing using JUnit.  Using Eclipse, select the file GraphAdjList.java and create a new JUnit  Test Case.  Notice that Eclipse will automatically name the file: GraphAdjListTest.java.  Using the defaults we see that Eclipse provided us with a “@Test” method we can fill in. \n\n```\n\npackage grandview;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass GraphAdjListTest {\n\n\t@Test\n\tvoid test() {\n\t}\t\n\n}\n\n\n```\n\nHow do we test our code?  One of the nice things about JUnit is that we can define as many different tests as we need.  JUnit provides many more methods that could be used to define a testing framework.  For our example we are only going to use the most basic elements.\n\n# Handling an Edge case\n\nLet’s first see if we can create a new GraphAdjList, add a new vertex and then create the relationship between Jasper and Tom.  For simplicity we’ll just deal with the node IDs.  So we’ll make a node 0 (Jasper) and a node 1 (Tom) and connect them.\n\nBefore we implement the JUnit code to do the test, let’s write out what we are doing in prose. We want to:\n\n+ Create a GraphAdjList\n\n+ Add a new vertex\n\n+ Add the relationship between Jasper and Tom\n\n+ Check to see if the graph represents this relationship.\n\n```\n\n\t@Test\n\tvoid testBasicRelationship() {\n\t\tGraphAdjList adjList = new GraphAdjList();\n\t\tadjList.addVertex();\n\t\t\n\t\tint numVerts = adjList.getNumVertices();\n\t\tSystem.out.format(\"number of vertices: %d\\n\", numVerts);\n\t\t\n\t\tadjList.addEdge(0, 1);\n\t\t// 1st, check to see if we have the right number of vertices\n\t\tassertEquals(1, numVerts);\n\n\t\t// check to see if the right nodes are \n\t\t// represented on each end of the edge\n\t\tList<Integer> lst = adjList.getNeighbors(0);\n\t\tint a = lst.get(0);\n\t\t\n\t\tassertEquals(1, a);\n\t\t// print out our graph\n\t\tadjList.showGraph();\n\t\t\n\t}\n\n```\n\nLet’s explore what is going on. First, on line 3 and 4 we create a new GraphAdjList and add a vertex to it. On line 9-18 we add the relationship between Jasper, node 0 and Tom, node 1.  Last, we explore the graph to make sure the Jasper to Tom relationship is linked up correctly and print the graph.  To run this test in Eclipse, select your project in the Package Explorer, right click and select ”Run As->JUnit Test”\n\nThe above test used one of the JUnit test tools: assertEquals.  If you consult the documentation you will see there are many more JUnit tools available. The test we just created tested to see if the following methods on GraphAdjList worked correctly: the constructor, addVertex, addEdge and getNeighbors.  However, not all of the possible cases for each of these calls are tested.  For example, what if we tried to:\n\n+ add a node with a negative ID?\n\n+ add an edge with a negative ID?\n\nLet’s try and add a node with a negative ID.  Here is the test case:\n\n```\n\n\t@Test\n\tvoid testNegativeNeighbor() {\n\t\tGraphAdjList al = new GraphAdjList();\n\t\tal.addVertex();\n\t\t\n\t\t// do edge cases:\n\t\t// can I add a vertex with a negative index?\n\t\tal.addEdge(0, 1);\n\t\tal.addVertex();\n\t\t\n\t\tal.addEdge(-1, 2);\n\t\tal.showGraph();\n\t\t\n\t}\n\n```\n\nWhen we run this code block in eclipse we get errors.  Again, select your project in the Package Explorer, right click and use “Run As->JUnit Test”.  The JUnit tab opens and shows you “red” and a stack trace:\n\n![GraphError.png](/images/GraphError.png)\n\nYou can use the stack trace to find what line in the code died.  In this case the test failed on line 52 (GraphAdjListTest.java), but more importantly, the graph code died on line 25 (GraphAdjList.java).  That line is trying to add an edge between node id == -1 and node id == 2.  The HashMap does not let us do this.\nNow, we can refactor the code to handle this case correctly.  First, we need to udate Graph.java to test for illegal arguments and throw exceptions.  Then we can refactor GraphAdjList.java to do the test and throw the exceptions.\n\nIn Graph.java, the addEdge method now looks like this: \n\npublic void addEdge(int v, int w) throws IllegalArgumentException { … }\n\nIn GraphAdjList.java, the implementAddEdge now looks like this:\n\n```\n\n\t@Override\n\tpublic void implementAddEdge(int v, int w) throws IllegalArgumentException {\n\t\t// add edge w to node v\n\t\tif (v < 0) {\n\t\t\tthrow new IllegalArgumentException(\"vertex id must be > 0\");\n\t\t}\n\t\tif (w < 0) {\n\t\t\tthrow new IllegalArgumentException(\"neighbor vertex id must be > 0\");\n\t\t}\n\t\t(adjListMap.get(v)).add(w);\n\t}\n\n```\n\n# Conclusion\n\nGenerating unit level test cases is a great way to enable collaboration with in a team.  Modern frameworks for writing code, such as Eclipse, automatically enable running test cases.  Test cases also can provide a way to share information about what a piece of code was meant to do.  This post has only touched on the most simple of JUnit tools.  However, we demonstrated an unhandled edge case and how to refactor the code base to take that edge case into consideration.\n","source":"_posts/2018-10-06-JUnit-Testing-in-Java.md","raw":"---\ntitle: JUnit Testing in java\ntags:\n  - Java\ncategories:\n  - Programming\ndate: 2018-10-06 13:27:12\n---\n\n\n\nUsing JUint 5 and JDK 8\n<!-- more -->\n# Introduction\n\nThis post will examine testing in the java programming language.  We’ll use an implementation of a graph abstract data type to motivate testing at the unit and behavior levels using java.  A graph is a type of Abstract Data Type (ADT) that allows you to capture and reason about the relationships between objects in your problem.  There are several open source projects that implement a graph as their core data structure, for example: the Neo4J database and the open source Cassandra database.\n\nThe sample code for this article can be found on: ( [link to github]( https://github.com/muguira-james/GraphsTesting_Java ))\n\n# Tool set\n\nSince this post is going to explore java, let’s state the tool set we’ll use: \n\nJava 1.8 – openjdk\n\nEclipse – any recent version\n\nJUnit – 5.0.\n\n# What is a Graph?\n\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\nA graph is composed of nodes, also called vertices and edges.  A node contains information about characters in our game. In this case, a node contains information like the character name, their relative strength, what they are carrying, etc.  In our diagram: the oval with the name Jasper is a node.  Jasper is carrying a sword.  Another node is Emma.  She is carrying a wand.  You will notice that the nodes also have edges or arrows connecting them.  These edges represent relationships between the characters.\n\n# Implementation\n\nHow could we represent these nodes and edges in a graph ADT? Let’s first start with defining a java class for the overall graph and then we can create specialized extensions.  We’ll use a Java abstract class and define the interface that we want the specializations to implement.\n\n```\n\npackage grandview;\n\nimport java.util.List;\n\n// an abstract Graph type.\n//\n// To keep it simple, I’ll allow node and edge labels to be defined with integers.\npublic abstract class Graph {\n\tprivate int numVertices;\n\tprivate int numEdges;\n\n\tpublic Graph() {\n\t\tnumVertices = 0;\n\t\tnumEdges = 0;\n\t}\n\t\n\tpublic int getNumVertices() {\n\t\treturn numVertices;\n\t}\n\t\n\tpublic int getNumEdges() {\n\t\treturn numEdges;\n\t}\n\n\tpublic void addVertex() {\n\t\t\n\t\timplementAddVertex();\n\t\tnumVertices++ ;\n\t}\n\t\n\tpublic void addEdge(int v, int w) {\n\t\timplementAddEdge(v, w);\n\t\tnumEdges++;\n\t}\n\t\n\tpublic abstract void implementAddVertex();\n\tpublic abstract void implementAddEdge(int v, int w);\n\t\n\tpublic abstract List<Integer> getNeighbors(int v);\n}\n\n```\n\nThe Graph object contains methods for getNumVertices(), getNumEdges(), addVertex() and a constructor.  Graph object implementors must define the abstract methods: implementAddVertex(), implementAddEdge() and getNeighbors().\n\nTo get this going in Eclipse, define a new Java package (in my case called Grandview), and inside of that define a new class called Graph.  There are 2 ways we can implement the relationships in a graph, we can implement the relationships as an adjacency matrix or we can implement then as adjacency lists.  Since this post will cover testing let’s use adjacency lists as our implementation.\n\nFor the case of the node labeled Tom: the adjacency list would contain the node id (‘1’) and a list of each node that Tom has a relationship with (Charlie, node 3, Olivia, node 5, and Ben, node 4).  Notice that I’m only listing relationships that are “out bound” from Tom.\n\n![adjacencyList.png](/images/AdjacencyList.png)\n\nThe following code implements a concrete instance of a Graph object called GraphAdjList.\n\n```\n\npackage grandview;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GraphAdjList extends Graph {\n\n\tprivate Map<Integer, ArrayList<Integer>> adjListMap = \n\t\t\tnew HashMap<Integer, ArrayList<Integer>>();\n\t\n\t@Override\n\tpublic void implementAddVertex() {\n\t\t// add a new vertex (or node) to the graph\n\t\tint v = getNumVertices();\n\t\tArrayList<Integer> neighbors = new ArrayList<Integer>();\n\n\t\tadjListMap.put(v, neighbors);\n\n\t}\n\n\t@Override\n\tpublic void implementAddEdge(int v, int w) {\n\t\t// add edge w to node v\n\t\t(adjListMap.get(v)).add(w);\n\t}\n\t\n\t@Override\n\tpublic List<Integer> getNeighbors(int v) {\n\t\t// show the neighbors of the given node\n\t\t\n\t\treturn adjListMap.get(v);\n\t}\n\t\t\n\tpublic void showGraph() {\n\t\tSystem.out.println(\"-----------------------\");\n\t\tfor (int j=0; j<adjListMap.size(); j++) {\n\t\t\t\n\t\t\tSystem.out.format(\"Vertex num = %d\\n\", j);\n\t\t\t\n\t\t\tfor (Integer it: adjListMap.get(j)) {\n\t\t\t\tSystem.out.format(\"\\tconnected to: %d\\n\", it);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"-----------------------\");\n\t}\n\n}\n\n```\n\nYou should see the 3 “@Override” statements in the above code.  These are the methods we are required to implement when we extend Graph. \n\n# Testing\n\nNow, we can explore testing using JUnit.  Using Eclipse, select the file GraphAdjList.java and create a new JUnit  Test Case.  Notice that Eclipse will automatically name the file: GraphAdjListTest.java.  Using the defaults we see that Eclipse provided us with a “@Test” method we can fill in. \n\n```\n\npackage grandview;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass GraphAdjListTest {\n\n\t@Test\n\tvoid test() {\n\t}\t\n\n}\n\n\n```\n\nHow do we test our code?  One of the nice things about JUnit is that we can define as many different tests as we need.  JUnit provides many more methods that could be used to define a testing framework.  For our example we are only going to use the most basic elements.\n\n# Handling an Edge case\n\nLet’s first see if we can create a new GraphAdjList, add a new vertex and then create the relationship between Jasper and Tom.  For simplicity we’ll just deal with the node IDs.  So we’ll make a node 0 (Jasper) and a node 1 (Tom) and connect them.\n\nBefore we implement the JUnit code to do the test, let’s write out what we are doing in prose. We want to:\n\n+ Create a GraphAdjList\n\n+ Add a new vertex\n\n+ Add the relationship between Jasper and Tom\n\n+ Check to see if the graph represents this relationship.\n\n```\n\n\t@Test\n\tvoid testBasicRelationship() {\n\t\tGraphAdjList adjList = new GraphAdjList();\n\t\tadjList.addVertex();\n\t\t\n\t\tint numVerts = adjList.getNumVertices();\n\t\tSystem.out.format(\"number of vertices: %d\\n\", numVerts);\n\t\t\n\t\tadjList.addEdge(0, 1);\n\t\t// 1st, check to see if we have the right number of vertices\n\t\tassertEquals(1, numVerts);\n\n\t\t// check to see if the right nodes are \n\t\t// represented on each end of the edge\n\t\tList<Integer> lst = adjList.getNeighbors(0);\n\t\tint a = lst.get(0);\n\t\t\n\t\tassertEquals(1, a);\n\t\t// print out our graph\n\t\tadjList.showGraph();\n\t\t\n\t}\n\n```\n\nLet’s explore what is going on. First, on line 3 and 4 we create a new GraphAdjList and add a vertex to it. On line 9-18 we add the relationship between Jasper, node 0 and Tom, node 1.  Last, we explore the graph to make sure the Jasper to Tom relationship is linked up correctly and print the graph.  To run this test in Eclipse, select your project in the Package Explorer, right click and select ”Run As->JUnit Test”\n\nThe above test used one of the JUnit test tools: assertEquals.  If you consult the documentation you will see there are many more JUnit tools available. The test we just created tested to see if the following methods on GraphAdjList worked correctly: the constructor, addVertex, addEdge and getNeighbors.  However, not all of the possible cases for each of these calls are tested.  For example, what if we tried to:\n\n+ add a node with a negative ID?\n\n+ add an edge with a negative ID?\n\nLet’s try and add a node with a negative ID.  Here is the test case:\n\n```\n\n\t@Test\n\tvoid testNegativeNeighbor() {\n\t\tGraphAdjList al = new GraphAdjList();\n\t\tal.addVertex();\n\t\t\n\t\t// do edge cases:\n\t\t// can I add a vertex with a negative index?\n\t\tal.addEdge(0, 1);\n\t\tal.addVertex();\n\t\t\n\t\tal.addEdge(-1, 2);\n\t\tal.showGraph();\n\t\t\n\t}\n\n```\n\nWhen we run this code block in eclipse we get errors.  Again, select your project in the Package Explorer, right click and use “Run As->JUnit Test”.  The JUnit tab opens and shows you “red” and a stack trace:\n\n![GraphError.png](/images/GraphError.png)\n\nYou can use the stack trace to find what line in the code died.  In this case the test failed on line 52 (GraphAdjListTest.java), but more importantly, the graph code died on line 25 (GraphAdjList.java).  That line is trying to add an edge between node id == -1 and node id == 2.  The HashMap does not let us do this.\nNow, we can refactor the code to handle this case correctly.  First, we need to udate Graph.java to test for illegal arguments and throw exceptions.  Then we can refactor GraphAdjList.java to do the test and throw the exceptions.\n\nIn Graph.java, the addEdge method now looks like this: \n\npublic void addEdge(int v, int w) throws IllegalArgumentException { … }\n\nIn GraphAdjList.java, the implementAddEdge now looks like this:\n\n```\n\n\t@Override\n\tpublic void implementAddEdge(int v, int w) throws IllegalArgumentException {\n\t\t// add edge w to node v\n\t\tif (v < 0) {\n\t\t\tthrow new IllegalArgumentException(\"vertex id must be > 0\");\n\t\t}\n\t\tif (w < 0) {\n\t\t\tthrow new IllegalArgumentException(\"neighbor vertex id must be > 0\");\n\t\t}\n\t\t(adjListMap.get(v)).add(w);\n\t}\n\n```\n\n# Conclusion\n\nGenerating unit level test cases is a great way to enable collaboration with in a team.  Modern frameworks for writing code, such as Eclipse, automatically enable running test cases.  Test cases also can provide a way to share information about what a piece of code was meant to do.  This post has only touched on the most simple of JUnit tools.  However, we demonstrated an unhandled edge case and how to refactor the code base to take that edge case into consideration.\n","slug":"2018-10-06-JUnit-Testing-in-Java","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0ab000ai7e85amsd4wm","content":"<p>Using JUint 5 and JDK 8</p>\n<span id=\"more\"></span>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This post will examine testing in the java programming language.  We’ll use an implementation of a graph abstract data type to motivate testing at the unit and behavior levels using java.  A graph is a type of Abstract Data Type (ADT) that allows you to capture and reason about the relationships between objects in your problem.  There are several open source projects that implement a graph as their core data structure, for example: the Neo4J database and the open source Cassandra database.</p>\n<p>The sample code for this article can be found on: ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">link to github</a>)</p>\n<h1 id=\"Tool-set\"><a href=\"#Tool-set\" class=\"headerlink\" title=\"Tool set\"></a>Tool set</h1><p>Since this post is going to explore java, let’s state the tool set we’ll use: </p>\n<p>Java 1.8 – openjdk</p>\n<p>Eclipse – any recent version</p>\n<p>JUnit – 5.0.</p>\n<h1 id=\"What-is-a-Graph\"><a href=\"#What-is-a-Graph\" class=\"headerlink\" title=\"What is a Graph?\"></a>What is a Graph?</h1><p><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<p>A graph is composed of nodes, also called vertices and edges.  A node contains information about characters in our game. In this case, a node contains information like the character name, their relative strength, what they are carrying, etc.  In our diagram: the oval with the name Jasper is a node.  Jasper is carrying a sword.  Another node is Emma.  She is carrying a wand.  You will notice that the nodes also have edges or arrows connecting them.  These edges represent relationships between the characters.</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>How could we represent these nodes and edges in a graph ADT? Let’s first start with defining a java class for the overall graph and then we can create specialized extensions.  We’ll use a Java abstract class and define the interface that we want the specializations to implement.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">// an abstract Graph type.</span><br><span class=\"line\">//</span><br><span class=\"line\">// To keep it simple, I’ll allow node and edge labels to be defined with integers.</span><br><span class=\"line\">public abstract class Graph &#123;</span><br><span class=\"line\">s''private int numVertices;</span><br><span class=\"line\">s''private int numEdges;</span><br><span class=\"line\"></span><br><span class=\"line\">s''public Graph() &#123;</span><br><span class=\"line\">s''s''numVertices = 0;</span><br><span class=\"line\">s''s''numEdges = 0;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public int getNumVertices() &#123;</span><br><span class=\"line\">s''s''return numVertices;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public int getNumEdges() &#123;</span><br><span class=\"line\">s''s''return numEdges;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s''public void addVertex() &#123;</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''implementAddVertex();</span><br><span class=\"line\">s''s''numVertices++ ;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void addEdge(int v, int w) &#123;</span><br><span class=\"line\">s''s''implementAddEdge(v, w);</span><br><span class=\"line\">s''s''numEdges++;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public abstract void implementAddVertex();</span><br><span class=\"line\">s''public abstract void implementAddEdge(int v, int w);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public abstract List&lt;Integer&gt; getNeighbors(int v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The Graph object contains methods for getNumVertices(), getNumEdges(), addVertex() and a constructor.  Graph object implementors must define the abstract methods: implementAddVertex(), implementAddEdge() and getNeighbors().</p>\n<p>To get this going in Eclipse, define a new Java package (in my case called Grandview), and inside of that define a new class called Graph.  There are 2 ways we can implement the relationships in a graph, we can implement the relationships as an adjacency matrix or we can implement then as adjacency lists.  Since this post will cover testing let’s use adjacency lists as our implementation.</p>\n<p>For the case of the node labeled Tom: the adjacency list would contain the node id (‘1’) and a list of each node that Tom has a relationship with (Charlie, node 3, Olivia, node 5, and Ben, node 4).  Notice that I’m only listing relationships that are “out bound” from Tom.</p>\n<p><img src=\"/images/AdjacencyList.png\" alt=\"adjacencyList.png\"></p>\n<p>The following code implements a concrete instance of a Graph object called GraphAdjList.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public class GraphAdjList extends Graph &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">s''private Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; adjListMap = </span><br><span class=\"line\">s''s''s''new HashMap&lt;Integer, ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public void implementAddVertex() &#123;</span><br><span class=\"line\">s''s''// add a new vertex (or node) to the graph</span><br><span class=\"line\">s''s''int v = getNumVertices();</span><br><span class=\"line\">s''s''ArrayList&lt;Integer&gt; neighbors = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">s''s''adjListMap.put(v, neighbors);</span><br><span class=\"line\"></span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public void implementAddEdge(int v, int w) &#123;</span><br><span class=\"line\">s''s''// add edge w to node v</span><br><span class=\"line\">s''s''(adjListMap.get(v)).add(w);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public List&lt;Integer&gt; getNeighbors(int v) &#123;</span><br><span class=\"line\">s''s''// show the neighbors of the given node</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''return adjListMap.get(v);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''public void showGraph() &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;-----------------------&quot;);</span><br><span class=\"line\">s''s''for (int j=0; j&lt;adjListMap.size(); j++) &#123;</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''s''System.out.format(&quot;Vertex num = %d\\n&quot;, j);</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''s''for (Integer it: adjListMap.get(j)) &#123;</span><br><span class=\"line\">s''s''s''s''System.out.format(&quot;\\tconnected to: %d\\n&quot;, it);</span><br><span class=\"line\">s''s''s''&#125;</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''&#125;</span><br><span class=\"line\">s''s''System.out.println(&quot;-----------------------&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You should see the 3 “@Override” statements in the above code.  These are the methods we are required to implement when we extend Graph. </p>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>Now, we can explore testing using JUnit.  Using Eclipse, select the file GraphAdjList.java and create a new JUnit  Test Case.  Notice that Eclipse will automatically name the file: GraphAdjListTest.java.  Using the defaults we see that Eclipse provided us with a “@Test” method we can fill in. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.junit.jupiter.api.Assertions.*;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">class GraphAdjListTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Test</span><br><span class=\"line\">s''void test() &#123;</span><br><span class=\"line\">s''&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>How do we test our code?  One of the nice things about JUnit is that we can define as many different tests as we need.  JUnit provides many more methods that could be used to define a testing framework.  For our example we are only going to use the most basic elements.</p>\n<h1 id=\"Handling-an-Edge-case\"><a href=\"#Handling-an-Edge-case\" class=\"headerlink\" title=\"Handling an Edge case\"></a>Handling an Edge case</h1><p>Let’s first see if we can create a new GraphAdjList, add a new vertex and then create the relationship between Jasper and Tom.  For simplicity we’ll just deal with the node IDs.  So we’ll make a node 0 (Jasper) and a node 1 (Tom) and connect them.</p>\n<p>Before we implement the JUnit code to do the test, let’s write out what we are doing in prose. We want to:</p>\n<ul>\n<li><p>Create a GraphAdjList</p>\n</li>\n<li><p>Add a new vertex</p>\n</li>\n<li><p>Add the relationship between Jasper and Tom</p>\n</li>\n<li><p>Check to see if the graph represents this relationship.</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">void testBasicRelationship() &#123;</span><br><span class=\"line\">s''GraphAdjList adjList = new GraphAdjList();</span><br><span class=\"line\">s''adjList.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''int numVerts = adjList.getNumVertices();</span><br><span class=\"line\">s''System.out.format(&quot;number of vertices: %d\\n&quot;, numVerts);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''adjList.addEdge(0, 1);</span><br><span class=\"line\">s''// 1st, check to see if we have the right number of vertices</span><br><span class=\"line\">s''assertEquals(1, numVerts);</span><br><span class=\"line\"></span><br><span class=\"line\">s''// check to see if the right nodes are </span><br><span class=\"line\">s''// represented on each end of the edge</span><br><span class=\"line\">s''List&lt;Integer&gt; lst = adjList.getNeighbors(0);</span><br><span class=\"line\">s''int a = lst.get(0);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''assertEquals(1, a);</span><br><span class=\"line\">s''// print out our graph</span><br><span class=\"line\">s''adjList.showGraph();</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Let’s explore what is going on. First, on line 3 and 4 we create a new GraphAdjList and add a vertex to it. On line 9-18 we add the relationship between Jasper, node 0 and Tom, node 1.  Last, we explore the graph to make sure the Jasper to Tom relationship is linked up correctly and print the graph.  To run this test in Eclipse, select your project in the Package Explorer, right click and select ”Run As-&gt;JUnit Test”</p>\n<p>The above test used one of the JUnit test tools: assertEquals.  If you consult the documentation you will see there are many more JUnit tools available. The test we just created tested to see if the following methods on GraphAdjList worked correctly: the constructor, addVertex, addEdge and getNeighbors.  However, not all of the possible cases for each of these calls are tested.  For example, what if we tried to:</p>\n<ul>\n<li><p>add a node with a negative ID?</p>\n</li>\n<li><p>add an edge with a negative ID?</p>\n</li>\n</ul>\n<p>Let’s try and add a node with a negative ID.  Here is the test case:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">void testNegativeNeighbor() &#123;</span><br><span class=\"line\">s''GraphAdjList al = new GraphAdjList();</span><br><span class=\"line\">s''al.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''// do edge cases:</span><br><span class=\"line\">s''// can I add a vertex with a negative index?</span><br><span class=\"line\">s''al.addEdge(0, 1);</span><br><span class=\"line\">s''al.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''al.addEdge(-1, 2);</span><br><span class=\"line\">s''al.showGraph();</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>When we run this code block in eclipse we get errors.  Again, select your project in the Package Explorer, right click and use “Run As-&gt;JUnit Test”.  The JUnit tab opens and shows you “red” and a stack trace:</p>\n<p><img src=\"/images/GraphError.png\" alt=\"GraphError.png\"></p>\n<p>You can use the stack trace to find what line in the code died.  In this case the test failed on line 52 (GraphAdjListTest.java), but more importantly, the graph code died on line 25 (GraphAdjList.java).  That line is trying to add an edge between node id == -1 and node id == 2.  The HashMap does not let us do this.<br>Now, we can refactor the code to handle this case correctly.  First, we need to udate Graph.java to test for illegal arguments and throw exceptions.  Then we can refactor GraphAdjList.java to do the test and throw the exceptions.</p>\n<p>In Graph.java, the addEdge method now looks like this: </p>\n<p>public void addEdge(int v, int w) throws IllegalArgumentException { … }</p>\n<p>In GraphAdjList.java, the implementAddEdge now looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void implementAddEdge(int v, int w) throws IllegalArgumentException &#123;</span><br><span class=\"line\">s''// add edge w to node v</span><br><span class=\"line\">s''if (v &lt; 0) &#123;</span><br><span class=\"line\">s''s''throw new IllegalArgumentException(&quot;vertex id must be &gt; 0&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''if (w &lt; 0) &#123;</span><br><span class=\"line\">s''s''throw new IllegalArgumentException(&quot;neighbor vertex id must be &gt; 0&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''(adjListMap.get(v)).add(w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Generating unit level test cases is a great way to enable collaboration with in a team.  Modern frameworks for writing code, such as Eclipse, automatically enable running test cases.  Test cases also can provide a way to share information about what a piece of code was meant to do.  This post has only touched on the most simple of JUnit tools.  However, we demonstrated an unhandled edge case and how to refactor the code base to take that edge case into consideration.</p>\n","site":{"data":{}},"excerpt":"<p>Using JUint 5 and JDK 8</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This post will examine testing in the java programming language.  We’ll use an implementation of a graph abstract data type to motivate testing at the unit and behavior levels using java.  A graph is a type of Abstract Data Type (ADT) that allows you to capture and reason about the relationships between objects in your problem.  There are several open source projects that implement a graph as their core data structure, for example: the Neo4J database and the open source Cassandra database.</p>\n<p>The sample code for this article can be found on: ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">link to github</a>)</p>\n<h1 id=\"Tool-set\"><a href=\"#Tool-set\" class=\"headerlink\" title=\"Tool set\"></a>Tool set</h1><p>Since this post is going to explore java, let’s state the tool set we’ll use: </p>\n<p>Java 1.8 – openjdk</p>\n<p>Eclipse – any recent version</p>\n<p>JUnit – 5.0.</p>\n<h1 id=\"What-is-a-Graph\"><a href=\"#What-is-a-Graph\" class=\"headerlink\" title=\"What is a Graph?\"></a>What is a Graph?</h1><p><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<p>A graph is composed of nodes, also called vertices and edges.  A node contains information about characters in our game. In this case, a node contains information like the character name, their relative strength, what they are carrying, etc.  In our diagram: the oval with the name Jasper is a node.  Jasper is carrying a sword.  Another node is Emma.  She is carrying a wand.  You will notice that the nodes also have edges or arrows connecting them.  These edges represent relationships between the characters.</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><p>How could we represent these nodes and edges in a graph ADT? Let’s first start with defining a java class for the overall graph and then we can create specialized extensions.  We’ll use a Java abstract class and define the interface that we want the specializations to implement.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">// an abstract Graph type.</span><br><span class=\"line\">//</span><br><span class=\"line\">// To keep it simple, I’ll allow node and edge labels to be defined with integers.</span><br><span class=\"line\">public abstract class Graph &#123;</span><br><span class=\"line\">s''private int numVertices;</span><br><span class=\"line\">s''private int numEdges;</span><br><span class=\"line\"></span><br><span class=\"line\">s''public Graph() &#123;</span><br><span class=\"line\">s''s''numVertices = 0;</span><br><span class=\"line\">s''s''numEdges = 0;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public int getNumVertices() &#123;</span><br><span class=\"line\">s''s''return numVertices;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public int getNumEdges() &#123;</span><br><span class=\"line\">s''s''return numEdges;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s''public void addVertex() &#123;</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''implementAddVertex();</span><br><span class=\"line\">s''s''numVertices++ ;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void addEdge(int v, int w) &#123;</span><br><span class=\"line\">s''s''implementAddEdge(v, w);</span><br><span class=\"line\">s''s''numEdges++;</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public abstract void implementAddVertex();</span><br><span class=\"line\">s''public abstract void implementAddEdge(int v, int w);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public abstract List&lt;Integer&gt; getNeighbors(int v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The Graph object contains methods for getNumVertices(), getNumEdges(), addVertex() and a constructor.  Graph object implementors must define the abstract methods: implementAddVertex(), implementAddEdge() and getNeighbors().</p>\n<p>To get this going in Eclipse, define a new Java package (in my case called Grandview), and inside of that define a new class called Graph.  There are 2 ways we can implement the relationships in a graph, we can implement the relationships as an adjacency matrix or we can implement then as adjacency lists.  Since this post will cover testing let’s use adjacency lists as our implementation.</p>\n<p>For the case of the node labeled Tom: the adjacency list would contain the node id (‘1’) and a list of each node that Tom has a relationship with (Charlie, node 3, Olivia, node 5, and Ben, node 4).  Notice that I’m only listing relationships that are “out bound” from Tom.</p>\n<p><img src=\"/images/AdjacencyList.png\" alt=\"adjacencyList.png\"></p>\n<p>The following code implements a concrete instance of a Graph object called GraphAdjList.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public class GraphAdjList extends Graph &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">s''private Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; adjListMap = </span><br><span class=\"line\">s''s''s''new HashMap&lt;Integer, ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public void implementAddVertex() &#123;</span><br><span class=\"line\">s''s''// add a new vertex (or node) to the graph</span><br><span class=\"line\">s''s''int v = getNumVertices();</span><br><span class=\"line\">s''s''ArrayList&lt;Integer&gt; neighbors = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">s''s''adjListMap.put(v, neighbors);</span><br><span class=\"line\"></span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public void implementAddEdge(int v, int w) &#123;</span><br><span class=\"line\">s''s''// add edge w to node v</span><br><span class=\"line\">s''s''(adjListMap.get(v)).add(w);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Override</span><br><span class=\"line\">s''public List&lt;Integer&gt; getNeighbors(int v) &#123;</span><br><span class=\"line\">s''s''// show the neighbors of the given node</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''return adjListMap.get(v);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''public void showGraph() &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;-----------------------&quot;);</span><br><span class=\"line\">s''s''for (int j=0; j&lt;adjListMap.size(); j++) &#123;</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''s''System.out.format(&quot;Vertex num = %d\\n&quot;, j);</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''s''for (Integer it: adjListMap.get(j)) &#123;</span><br><span class=\"line\">s''s''s''s''System.out.format(&quot;\\tconnected to: %d\\n&quot;, it);</span><br><span class=\"line\">s''s''s''&#125;</span><br><span class=\"line\">s''s''s''</span><br><span class=\"line\">s''s''&#125;</span><br><span class=\"line\">s''s''System.out.println(&quot;-----------------------&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You should see the 3 “@Override” statements in the above code.  These are the methods we are required to implement when we extend Graph. </p>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>Now, we can explore testing using JUnit.  Using Eclipse, select the file GraphAdjList.java and create a new JUnit  Test Case.  Notice that Eclipse will automatically name the file: GraphAdjListTest.java.  Using the defaults we see that Eclipse provided us with a “@Test” method we can fill in. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package grandview;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.junit.jupiter.api.Assertions.*;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">class GraphAdjListTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Test</span><br><span class=\"line\">s''void test() &#123;</span><br><span class=\"line\">s''&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>How do we test our code?  One of the nice things about JUnit is that we can define as many different tests as we need.  JUnit provides many more methods that could be used to define a testing framework.  For our example we are only going to use the most basic elements.</p>\n<h1 id=\"Handling-an-Edge-case\"><a href=\"#Handling-an-Edge-case\" class=\"headerlink\" title=\"Handling an Edge case\"></a>Handling an Edge case</h1><p>Let’s first see if we can create a new GraphAdjList, add a new vertex and then create the relationship between Jasper and Tom.  For simplicity we’ll just deal with the node IDs.  So we’ll make a node 0 (Jasper) and a node 1 (Tom) and connect them.</p>\n<p>Before we implement the JUnit code to do the test, let’s write out what we are doing in prose. We want to:</p>\n<ul>\n<li><p>Create a GraphAdjList</p>\n</li>\n<li><p>Add a new vertex</p>\n</li>\n<li><p>Add the relationship between Jasper and Tom</p>\n</li>\n<li><p>Check to see if the graph represents this relationship.</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">void testBasicRelationship() &#123;</span><br><span class=\"line\">s''GraphAdjList adjList = new GraphAdjList();</span><br><span class=\"line\">s''adjList.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''int numVerts = adjList.getNumVertices();</span><br><span class=\"line\">s''System.out.format(&quot;number of vertices: %d\\n&quot;, numVerts);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''adjList.addEdge(0, 1);</span><br><span class=\"line\">s''// 1st, check to see if we have the right number of vertices</span><br><span class=\"line\">s''assertEquals(1, numVerts);</span><br><span class=\"line\"></span><br><span class=\"line\">s''// check to see if the right nodes are </span><br><span class=\"line\">s''// represented on each end of the edge</span><br><span class=\"line\">s''List&lt;Integer&gt; lst = adjList.getNeighbors(0);</span><br><span class=\"line\">s''int a = lst.get(0);</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''assertEquals(1, a);</span><br><span class=\"line\">s''// print out our graph</span><br><span class=\"line\">s''adjList.showGraph();</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Let’s explore what is going on. First, on line 3 and 4 we create a new GraphAdjList and add a vertex to it. On line 9-18 we add the relationship between Jasper, node 0 and Tom, node 1.  Last, we explore the graph to make sure the Jasper to Tom relationship is linked up correctly and print the graph.  To run this test in Eclipse, select your project in the Package Explorer, right click and select ”Run As-&gt;JUnit Test”</p>\n<p>The above test used one of the JUnit test tools: assertEquals.  If you consult the documentation you will see there are many more JUnit tools available. The test we just created tested to see if the following methods on GraphAdjList worked correctly: the constructor, addVertex, addEdge and getNeighbors.  However, not all of the possible cases for each of these calls are tested.  For example, what if we tried to:</p>\n<ul>\n<li><p>add a node with a negative ID?</p>\n</li>\n<li><p>add an edge with a negative ID?</p>\n</li>\n</ul>\n<p>Let’s try and add a node with a negative ID.  Here is the test case:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">void testNegativeNeighbor() &#123;</span><br><span class=\"line\">s''GraphAdjList al = new GraphAdjList();</span><br><span class=\"line\">s''al.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''// do edge cases:</span><br><span class=\"line\">s''// can I add a vertex with a negative index?</span><br><span class=\"line\">s''al.addEdge(0, 1);</span><br><span class=\"line\">s''al.addVertex();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''al.addEdge(-1, 2);</span><br><span class=\"line\">s''al.showGraph();</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>When we run this code block in eclipse we get errors.  Again, select your project in the Package Explorer, right click and use “Run As-&gt;JUnit Test”.  The JUnit tab opens and shows you “red” and a stack trace:</p>\n<p><img src=\"/images/GraphError.png\" alt=\"GraphError.png\"></p>\n<p>You can use the stack trace to find what line in the code died.  In this case the test failed on line 52 (GraphAdjListTest.java), but more importantly, the graph code died on line 25 (GraphAdjList.java).  That line is trying to add an edge between node id == -1 and node id == 2.  The HashMap does not let us do this.<br>Now, we can refactor the code to handle this case correctly.  First, we need to udate Graph.java to test for illegal arguments and throw exceptions.  Then we can refactor GraphAdjList.java to do the test and throw the exceptions.</p>\n<p>In Graph.java, the addEdge method now looks like this: </p>\n<p>public void addEdge(int v, int w) throws IllegalArgumentException { … }</p>\n<p>In GraphAdjList.java, the implementAddEdge now looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void implementAddEdge(int v, int w) throws IllegalArgumentException &#123;</span><br><span class=\"line\">s''// add edge w to node v</span><br><span class=\"line\">s''if (v &lt; 0) &#123;</span><br><span class=\"line\">s''s''throw new IllegalArgumentException(&quot;vertex id must be &gt; 0&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''if (w &lt; 0) &#123;</span><br><span class=\"line\">s''s''throw new IllegalArgumentException(&quot;neighbor vertex id must be &gt; 0&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''(adjListMap.get(v)).add(w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Generating unit level test cases is a great way to enable collaboration with in a team.  Modern frameworks for writing code, such as Eclipse, automatically enable running test cases.  Test cases also can provide a way to share information about what a piece of code was meant to do.  This post has only touched on the most simple of JUnit tools.  However, we demonstrated an unhandled edge case and how to refactor the code base to take that edge case into consideration.</p>"},{"title":"Cucumber Testing in Java","date":"2018-10-09T17:27:12.000Z","_content":"\n\nUse Cucumber + JUint and Behavior Driven Development\n<!-- more -->\n## Introduction\n\nLet’s continue with our testing exercise.  The last post described how to add unit test cases to a java class.  It used the various tools and annotations available in JUnit 5.0 to validate the behavior of the java class at a very low level.  This project is going to change it up and work with higher-level test concepts. We are going to be working in Behavior Driven Development (BDD) and creating Feature Files in the Gherkin testing language.\n\n\nThe sample code for this article can be found on: ( [link to github]( https://github.com/muguira-james/GraphsTesting_Java ))\n\n\nMost of the projects I work on are oriented toward creating software to help a business accomplish some task.  Stakeholders and business analysts interact to solidify the business need and the proper behavior for the new system. These needs are captured and slowly transformed into a specification that engineers can use to create software. In an agile paradigm, these behavior specifications are captured in use cases, which are translated into user stories.  The business analyst and development team translate these user stories into features and finally, into working software.\n\nA software creation method called BDD uses feature files (written in Gherkin) to bridge the gap from business need specification to software development need specification. Feature files have a particular format: \n\n+ Feature – Name of the Feature (or business case)\n+ Scenario – description of the feature\n+ Given – specify the initial conditions\n+ When – specify some action or interaction with the feature\n+ Then – specify the result of the action or interaction.\n\nSo, the feature file is a mapping of business use cases down to testable software modules.  The business analyst is the bridge between the stakeholders and the developers.  They work with the stakeholders to capture business use cases, translating those to features.  Then, they work with the developers to translate features into tests.\n\nThe rest of the article will describe how to work with Eclipse and JUnit to incorporate BDD into the development process. \n\n## Our Scenario\n\nUsing the graph from our previous article, let’s build a story and then a business case that we can use for BDD.  In Figure 1, we see the graph that describes the relationships between 5 characters.  These characters are gathered together to go on a quest for treasure. From the figure, we see that Tom is a central character.  Tom is a very skilled thief and always carries a sack.  Charlie and Emma are both powerful mages.  Olivia is also a mage.  Ben is a human and is currently carrying food.  Finally, Jasper is a swordsman.\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\n## Some Business Rules\n\nFor a graph representation, we want to capture relationships between our characters.  We would also like to show these relationships.  In our low-level testing, we examined how to verify the correct working of our graph software by testing the operation of adding vertices, adding edges between vertices and asking for a list of neighbors of any vertex.  At a higher level, we are specifying use cases like in figure 2.\n\n![Use_Case.png](/images/Use_Case.png)\n\nFrom our use case diagram, we have 4 cases or features we want the system to implement: \n\n+ Create a character, \n+ Add character to a graph, \n+ Add an edge or relationship between two characters\n+ Show the graph.  \n\nLet’s take each of the top 3 items and state them in Gherkin Feature file format.  Show the graph is just a print to the console.\n\n# Create a character\n\nThe first test is creating a character.  A character has a name, a relative strength and is carrying something.  The feature file looks like the following:\n\n```\n\nFeature: Create a character\nCreate a character, by filling in a Graph Vertex\n\nScenario: Create a character\nGiven: A Name, a strength and something to carry\nWhen: Add the  name, strength and carried item to a vertex\nThen: Test to see if the vertex is initialized properly\n\n```\n\nThe first line of the feature file has to say “Feature:”.  We describe the feature and provide a Scenario.  Following those, we provide the Given, When and Then clauses.  These last 3 (Given, When Then) form the basis of the test for this feature.  \n\n# Add a character to the graph\n\nThe feature file is similar:\n\n```\n\nFeature: Add a character to the Graph\nTake the vertex containing the character and add it to the graph\n\nScenario: add vertex\nGiven: a filled in Vertex\nWhen: I add it to the Graph\nThen: the graph number of Vertex count should increase\n\n```\n\n# Add an edge or relationship between two characters\n\nThe Feature file:\n\n```\n\nFeature: Add an edge\nConnect to characters\n\nScenario: fill in an Edge \nGiven: 2 filled in Vertex, and a complete Edge\nWhen: I add them to the Graph\nThen: the Graph should reflect the new relationship\n\n```\n\nAlthough I have not told you how to organize this material in the project yet, if you were to run the project at this point it would do nothing.  The Feature file indicates the tests that we want to run.  It does not define the actual tests.  The last step would be to code the actual tests. The tests are organized as steps (the given step, the when step, the then step).  In this case, we’ll lump all of the tests for each Feature into a single file.  The CreateCharacter step definition file would look like this:\n\n```\n\npublic class StepDefs_createCharacter {\n\t\n\tprivate String name;\n\tprivate int strength;\n\tprivate List<String> carried = new ArrayList<String>();\n\t\n\tprivate Vertex v;\n\n\t@Given(\"^A Name, a strength and something to carry$\")\n\tpublic void A_Name_A_Strength_and_something_to_Carry() throws Exception {\n\t\tSystem.out.println(\"given: A Name, a strength and something to carry\");\n\t\t\n\t\tname = \"Jasper\";\n\t\tstrength = 11;\n\t\tcarried.add(\"sword\");\n\t}\n\t\n\t@When(\"^Add the  name, strength and carried item to a vertex$\")\n\tpublic void Add_the_name_strength_and_carried_item_to_a_vertex() throws Exception {\n\t\tSystem.out.println(\"when: Add the  name, strength and carried item to a vertex\");\n\t\t\n\t\tv = new Vertex(name, 0);\n\t\tv.setStrength(11);\n\t\tv.addToStuffCarried(\"sword\");\n\t}\n\t\n\t@Then(\"^Test to see if the vertex is initialized properly$\")\n\tpublic void Test_to_see_if_the_vertex_is_initialized_properly() throws Exception {\n\t\tSystem.out.println(\"given: Test to see if the vertex is initialized properly\");\n\t\t\n\t\t\n\t\tString n = v.name();\n\t\tint strength = v.strength();\n\t\tArrayList<String> items = v.getCarriedStuff();\n\t\t\n\t\tassertEquals(\"Japser\", n);\n\t\tassertEquals(11, strength);\n\t\tassertEquals(\"sword\", items.get(0));\n\t\t\n\t\t\n\t}\n\t\n}\n\n```\nThe “step definition” carries out the actual test.  I sets up the variables: name and strength. It then creates a Vertex with the data.  Finally, this step definition checks to see that the Vertex is organized correctly.  Each of the other step definition files are similar in structure. \n\n# Project Structure\n\nIn order to run the system with all of the tests you need to devise a structure.  You can use Eclipse to facilitate this.  I will choose Gradle since it aligns with the Continuous Integration and Continuous Deployment (CI/CD) used by most project teams.  Figure 3 gives you an idea of how to structure the project.  The main idea is to create 3 parts: a resource directory to contain the feature file; and 2 test packages to contain the TestRunner that corresponds to the feature specification and step definitions. \n\n![ProjectStructure](/images/ProjectStructure.png)\n\nLet’s examine the feature specification for TestRunner_createCharacter.  The test runner is a part of JUnit.  I created one TestRunner for each Feature file definition in the resource directory.  Each TestRunner is tied to its Feature definition by the annotation “@CucumberOptions”.  Furthermore, the TestRunner is tied to the step definition in the same annotation.\n\n```\n\npackage testRunners;\n\nimport org.junit.runner.RunWith;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.PendingException;\nimport cucumber.api.junit.Cucumber;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(features=\"resources/features\", glue=\"src/test/java/stepDefinitions\")\npublic class TestRunner_createCharacter {\n\n}\n\n```\n\nThis project was created as a gradle project in Eclipse.  Once this infrastructure is in place you can use the “Gradle Tasks” tab in Console output area to run the all the tests, just double click on the word “test” (see figure 3).  If you want to run a single test right click on the specific test runner file in the Package Explorer and select “Run As->Gradle Test”.\n\n![GradleTasksTab.png](/images/GradleTasksTab.png)\n\nAfter the task has run you should see the following (see figure 4)\n\n![SuccessfulGradleRun.png](/images/SuccessfulGradleRun.png)\n\n## Conclusion\n\nThis article introduced you to BDD.  We modeled the business problem as a UML use case, and then transformed that diagram into a BDD Feature File in the Gherkin language.  We demonstrated a possible way to organize the project so that gradle could automatically compile and run the tests.\n\n.\n\n","source":"_posts/2018-10-09-A-Cucumber-Testing-in-Java.md","raw":"---\ntitle: Cucumber Testing in Java\ntags:\n  - Cucumber\n  - Java\ncategories:\n  - Programming\ndate: 2018-10-09 13:27:12\n---\n\n\nUse Cucumber + JUint and Behavior Driven Development\n<!-- more -->\n## Introduction\n\nLet’s continue with our testing exercise.  The last post described how to add unit test cases to a java class.  It used the various tools and annotations available in JUnit 5.0 to validate the behavior of the java class at a very low level.  This project is going to change it up and work with higher-level test concepts. We are going to be working in Behavior Driven Development (BDD) and creating Feature Files in the Gherkin testing language.\n\n\nThe sample code for this article can be found on: ( [link to github]( https://github.com/muguira-james/GraphsTesting_Java ))\n\n\nMost of the projects I work on are oriented toward creating software to help a business accomplish some task.  Stakeholders and business analysts interact to solidify the business need and the proper behavior for the new system. These needs are captured and slowly transformed into a specification that engineers can use to create software. In an agile paradigm, these behavior specifications are captured in use cases, which are translated into user stories.  The business analyst and development team translate these user stories into features and finally, into working software.\n\nA software creation method called BDD uses feature files (written in Gherkin) to bridge the gap from business need specification to software development need specification. Feature files have a particular format: \n\n+ Feature – Name of the Feature (or business case)\n+ Scenario – description of the feature\n+ Given – specify the initial conditions\n+ When – specify some action or interaction with the feature\n+ Then – specify the result of the action or interaction.\n\nSo, the feature file is a mapping of business use cases down to testable software modules.  The business analyst is the bridge between the stakeholders and the developers.  They work with the stakeholders to capture business use cases, translating those to features.  Then, they work with the developers to translate features into tests.\n\nThe rest of the article will describe how to work with Eclipse and JUnit to incorporate BDD into the development process. \n\n## Our Scenario\n\nUsing the graph from our previous article, let’s build a story and then a business case that we can use for BDD.  In Figure 1, we see the graph that describes the relationships between 5 characters.  These characters are gathered together to go on a quest for treasure. From the figure, we see that Tom is a central character.  Tom is a very skilled thief and always carries a sack.  Charlie and Emma are both powerful mages.  Olivia is also a mage.  Ben is a human and is currently carrying food.  Finally, Jasper is a swordsman.\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\n## Some Business Rules\n\nFor a graph representation, we want to capture relationships between our characters.  We would also like to show these relationships.  In our low-level testing, we examined how to verify the correct working of our graph software by testing the operation of adding vertices, adding edges between vertices and asking for a list of neighbors of any vertex.  At a higher level, we are specifying use cases like in figure 2.\n\n![Use_Case.png](/images/Use_Case.png)\n\nFrom our use case diagram, we have 4 cases or features we want the system to implement: \n\n+ Create a character, \n+ Add character to a graph, \n+ Add an edge or relationship between two characters\n+ Show the graph.  \n\nLet’s take each of the top 3 items and state them in Gherkin Feature file format.  Show the graph is just a print to the console.\n\n# Create a character\n\nThe first test is creating a character.  A character has a name, a relative strength and is carrying something.  The feature file looks like the following:\n\n```\n\nFeature: Create a character\nCreate a character, by filling in a Graph Vertex\n\nScenario: Create a character\nGiven: A Name, a strength and something to carry\nWhen: Add the  name, strength and carried item to a vertex\nThen: Test to see if the vertex is initialized properly\n\n```\n\nThe first line of the feature file has to say “Feature:”.  We describe the feature and provide a Scenario.  Following those, we provide the Given, When and Then clauses.  These last 3 (Given, When Then) form the basis of the test for this feature.  \n\n# Add a character to the graph\n\nThe feature file is similar:\n\n```\n\nFeature: Add a character to the Graph\nTake the vertex containing the character and add it to the graph\n\nScenario: add vertex\nGiven: a filled in Vertex\nWhen: I add it to the Graph\nThen: the graph number of Vertex count should increase\n\n```\n\n# Add an edge or relationship between two characters\n\nThe Feature file:\n\n```\n\nFeature: Add an edge\nConnect to characters\n\nScenario: fill in an Edge \nGiven: 2 filled in Vertex, and a complete Edge\nWhen: I add them to the Graph\nThen: the Graph should reflect the new relationship\n\n```\n\nAlthough I have not told you how to organize this material in the project yet, if you were to run the project at this point it would do nothing.  The Feature file indicates the tests that we want to run.  It does not define the actual tests.  The last step would be to code the actual tests. The tests are organized as steps (the given step, the when step, the then step).  In this case, we’ll lump all of the tests for each Feature into a single file.  The CreateCharacter step definition file would look like this:\n\n```\n\npublic class StepDefs_createCharacter {\n\t\n\tprivate String name;\n\tprivate int strength;\n\tprivate List<String> carried = new ArrayList<String>();\n\t\n\tprivate Vertex v;\n\n\t@Given(\"^A Name, a strength and something to carry$\")\n\tpublic void A_Name_A_Strength_and_something_to_Carry() throws Exception {\n\t\tSystem.out.println(\"given: A Name, a strength and something to carry\");\n\t\t\n\t\tname = \"Jasper\";\n\t\tstrength = 11;\n\t\tcarried.add(\"sword\");\n\t}\n\t\n\t@When(\"^Add the  name, strength and carried item to a vertex$\")\n\tpublic void Add_the_name_strength_and_carried_item_to_a_vertex() throws Exception {\n\t\tSystem.out.println(\"when: Add the  name, strength and carried item to a vertex\");\n\t\t\n\t\tv = new Vertex(name, 0);\n\t\tv.setStrength(11);\n\t\tv.addToStuffCarried(\"sword\");\n\t}\n\t\n\t@Then(\"^Test to see if the vertex is initialized properly$\")\n\tpublic void Test_to_see_if_the_vertex_is_initialized_properly() throws Exception {\n\t\tSystem.out.println(\"given: Test to see if the vertex is initialized properly\");\n\t\t\n\t\t\n\t\tString n = v.name();\n\t\tint strength = v.strength();\n\t\tArrayList<String> items = v.getCarriedStuff();\n\t\t\n\t\tassertEquals(\"Japser\", n);\n\t\tassertEquals(11, strength);\n\t\tassertEquals(\"sword\", items.get(0));\n\t\t\n\t\t\n\t}\n\t\n}\n\n```\nThe “step definition” carries out the actual test.  I sets up the variables: name and strength. It then creates a Vertex with the data.  Finally, this step definition checks to see that the Vertex is organized correctly.  Each of the other step definition files are similar in structure. \n\n# Project Structure\n\nIn order to run the system with all of the tests you need to devise a structure.  You can use Eclipse to facilitate this.  I will choose Gradle since it aligns with the Continuous Integration and Continuous Deployment (CI/CD) used by most project teams.  Figure 3 gives you an idea of how to structure the project.  The main idea is to create 3 parts: a resource directory to contain the feature file; and 2 test packages to contain the TestRunner that corresponds to the feature specification and step definitions. \n\n![ProjectStructure](/images/ProjectStructure.png)\n\nLet’s examine the feature specification for TestRunner_createCharacter.  The test runner is a part of JUnit.  I created one TestRunner for each Feature file definition in the resource directory.  Each TestRunner is tied to its Feature definition by the annotation “@CucumberOptions”.  Furthermore, the TestRunner is tied to the step definition in the same annotation.\n\n```\n\npackage testRunners;\n\nimport org.junit.runner.RunWith;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.PendingException;\nimport cucumber.api.junit.Cucumber;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(features=\"resources/features\", glue=\"src/test/java/stepDefinitions\")\npublic class TestRunner_createCharacter {\n\n}\n\n```\n\nThis project was created as a gradle project in Eclipse.  Once this infrastructure is in place you can use the “Gradle Tasks” tab in Console output area to run the all the tests, just double click on the word “test” (see figure 3).  If you want to run a single test right click on the specific test runner file in the Package Explorer and select “Run As->Gradle Test”.\n\n![GradleTasksTab.png](/images/GradleTasksTab.png)\n\nAfter the task has run you should see the following (see figure 4)\n\n![SuccessfulGradleRun.png](/images/SuccessfulGradleRun.png)\n\n## Conclusion\n\nThis article introduced you to BDD.  We modeled the business problem as a UML use case, and then transformed that diagram into a BDD Feature File in the Gherkin language.  We demonstrated a possible way to organize the project so that gradle could automatically compile and run the tests.\n\n.\n\n","slug":"2018-10-09-A-Cucumber-Testing-in-Java","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0ad000ci7e8ew1mells","content":"<p>Use Cucumber + JUint and Behavior Driven Development</p>\n<span id=\"more\"></span>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Let’s continue with our testing exercise.  The last post described how to add unit test cases to a java class.  It used the various tools and annotations available in JUnit 5.0 to validate the behavior of the java class at a very low level.  This project is going to change it up and work with higher-level test concepts. We are going to be working in Behavior Driven Development (BDD) and creating Feature Files in the Gherkin testing language.</p>\n<p>The sample code for this article can be found on: ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">link to github</a>)</p>\n<p>Most of the projects I work on are oriented toward creating software to help a business accomplish some task.  Stakeholders and business analysts interact to solidify the business need and the proper behavior for the new system. These needs are captured and slowly transformed into a specification that engineers can use to create software. In an agile paradigm, these behavior specifications are captured in use cases, which are translated into user stories.  The business analyst and development team translate these user stories into features and finally, into working software.</p>\n<p>A software creation method called BDD uses feature files (written in Gherkin) to bridge the gap from business need specification to software development need specification. Feature files have a particular format: </p>\n<ul>\n<li>Feature – Name of the Feature (or business case)</li>\n<li>Scenario – description of the feature</li>\n<li>Given – specify the initial conditions</li>\n<li>When – specify some action or interaction with the feature</li>\n<li>Then – specify the result of the action or interaction.</li>\n</ul>\n<p>So, the feature file is a mapping of business use cases down to testable software modules.  The business analyst is the bridge between the stakeholders and the developers.  They work with the stakeholders to capture business use cases, translating those to features.  Then, they work with the developers to translate features into tests.</p>\n<p>The rest of the article will describe how to work with Eclipse and JUnit to incorporate BDD into the development process. </p>\n<h2 id=\"Our-Scenario\"><a href=\"#Our-Scenario\" class=\"headerlink\" title=\"Our Scenario\"></a>Our Scenario</h2><p>Using the graph from our previous article, let’s build a story and then a business case that we can use for BDD.  In Figure 1, we see the graph that describes the relationships between 5 characters.  These characters are gathered together to go on a quest for treasure. From the figure, we see that Tom is a central character.  Tom is a very skilled thief and always carries a sack.  Charlie and Emma are both powerful mages.  Olivia is also a mage.  Ben is a human and is currently carrying food.  Finally, Jasper is a swordsman.<br><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<h2 id=\"Some-Business-Rules\"><a href=\"#Some-Business-Rules\" class=\"headerlink\" title=\"Some Business Rules\"></a>Some Business Rules</h2><p>For a graph representation, we want to capture relationships between our characters.  We would also like to show these relationships.  In our low-level testing, we examined how to verify the correct working of our graph software by testing the operation of adding vertices, adding edges between vertices and asking for a list of neighbors of any vertex.  At a higher level, we are specifying use cases like in figure 2.</p>\n<p><img src=\"/images/Use_Case.png\" alt=\"Use_Case.png\"></p>\n<p>From our use case diagram, we have 4 cases or features we want the system to implement: </p>\n<ul>\n<li>Create a character, </li>\n<li>Add character to a graph, </li>\n<li>Add an edge or relationship between two characters</li>\n<li>Show the graph.  </li>\n</ul>\n<p>Let’s take each of the top 3 items and state them in Gherkin Feature file format.  Show the graph is just a print to the console.</p>\n<h1 id=\"Create-a-character\"><a href=\"#Create-a-character\" class=\"headerlink\" title=\"Create a character\"></a>Create a character</h1><p>The first test is creating a character.  A character has a name, a relative strength and is carrying something.  The feature file looks like the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Create a character</span><br><span class=\"line\">Create a character, by filling in a Graph Vertex</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: Create a character</span><br><span class=\"line\">Given: A Name, a strength and something to carry</span><br><span class=\"line\">When: Add the  name, strength and carried item to a vertex</span><br><span class=\"line\">Then: Test to see if the vertex is initialized properly</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The first line of the feature file has to say “Feature:”.  We describe the feature and provide a Scenario.  Following those, we provide the Given, When and Then clauses.  These last 3 (Given, When Then) form the basis of the test for this feature.  </p>\n<h1 id=\"Add-a-character-to-the-graph\"><a href=\"#Add-a-character-to-the-graph\" class=\"headerlink\" title=\"Add a character to the graph\"></a>Add a character to the graph</h1><p>The feature file is similar:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Add a character to the Graph</span><br><span class=\"line\">Take the vertex containing the character and add it to the graph</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: add vertex</span><br><span class=\"line\">Given: a filled in Vertex</span><br><span class=\"line\">When: I add it to the Graph</span><br><span class=\"line\">Then: the graph number of Vertex count should increase</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Add-an-edge-or-relationship-between-two-characters\"><a href=\"#Add-an-edge-or-relationship-between-two-characters\" class=\"headerlink\" title=\"Add an edge or relationship between two characters\"></a>Add an edge or relationship between two characters</h1><p>The Feature file:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Add an edge</span><br><span class=\"line\">Connect to characters</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: fill in an Edge </span><br><span class=\"line\">Given: 2 filled in Vertex, and a complete Edge</span><br><span class=\"line\">When: I add them to the Graph</span><br><span class=\"line\">Then: the Graph should reflect the new relationship</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Although I have not told you how to organize this material in the project yet, if you were to run the project at this point it would do nothing.  The Feature file indicates the tests that we want to run.  It does not define the actual tests.  The last step would be to code the actual tests. The tests are organized as steps (the given step, the when step, the then step).  In this case, we’ll lump all of the tests for each Feature into a single file.  The CreateCharacter step definition file would look like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class StepDefs_createCharacter &#123;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''private String name;</span><br><span class=\"line\">s''private int strength;</span><br><span class=\"line\">s''private List&lt;String&gt; carried = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''private Vertex v;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Given(&quot;^A Name, a strength and something to carry$&quot;)</span><br><span class=\"line\">s''public void A_Name_A_Strength_and_something_to_Carry() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;given: A Name, a strength and something to carry&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''name = &quot;Jasper&quot;;</span><br><span class=\"line\">s''s''strength = 11;</span><br><span class=\"line\">s''s''carried.add(&quot;sword&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@When(&quot;^Add the  name, strength and carried item to a vertex$&quot;)</span><br><span class=\"line\">s''public void Add_the_name_strength_and_carried_item_to_a_vertex() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;when: Add the  name, strength and carried item to a vertex&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''v = new Vertex(name, 0);</span><br><span class=\"line\">s''s''v.setStrength(11);</span><br><span class=\"line\">s''s''v.addToStuffCarried(&quot;sword&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Then(&quot;^Test to see if the vertex is initialized properly$&quot;)</span><br><span class=\"line\">s''public void Test_to_see_if_the_vertex_is_initialized_properly() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;given: Test to see if the vertex is initialized properly&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''String n = v.name();</span><br><span class=\"line\">s''s''int strength = v.strength();</span><br><span class=\"line\">s''s''ArrayList&lt;String&gt; items = v.getCarriedStuff();</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''assertEquals(&quot;Japser&quot;, n);</span><br><span class=\"line\">s''s''assertEquals(11, strength);</span><br><span class=\"line\">s''s''assertEquals(&quot;sword&quot;, items.get(0));</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The “step definition” carries out the actual test.  I sets up the variables: name and strength. It then creates a Vertex with the data.  Finally, this step definition checks to see that the Vertex is organized correctly.  Each of the other step definition files are similar in structure. </p>\n<h1 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h1><p>In order to run the system with all of the tests you need to devise a structure.  You can use Eclipse to facilitate this.  I will choose Gradle since it aligns with the Continuous Integration and Continuous Deployment (CI/CD) used by most project teams.  Figure 3 gives you an idea of how to structure the project.  The main idea is to create 3 parts: a resource directory to contain the feature file; and 2 test packages to contain the TestRunner that corresponds to the feature specification and step definitions. </p>\n<p><img src=\"/images/ProjectStructure.png\" alt=\"ProjectStructure\"></p>\n<p>Let’s examine the feature specification for TestRunner_createCharacter.  The test runner is a part of JUnit.  I created one TestRunner for each Feature file definition in the resource directory.  Each TestRunner is tied to its Feature definition by the annotation “@CucumberOptions”.  Furthermore, the TestRunner is tied to the step definition in the same annotation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package testRunners;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import cucumber.api.CucumberOptions;</span><br><span class=\"line\">import cucumber.api.PendingException;</span><br><span class=\"line\">import cucumber.api.junit.Cucumber;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(Cucumber.class)</span><br><span class=\"line\">@CucumberOptions(features=&quot;resources/features&quot;, glue=&quot;src/test/java/stepDefinitions&quot;)</span><br><span class=\"line\">public class TestRunner_createCharacter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>This project was created as a gradle project in Eclipse.  Once this infrastructure is in place you can use the “Gradle Tasks” tab in Console output area to run the all the tests, just double click on the word “test” (see figure 3).  If you want to run a single test right click on the specific test runner file in the Package Explorer and select “Run As-&gt;Gradle Test”.</p>\n<p><img src=\"/images/GradleTasksTab.png\" alt=\"GradleTasksTab.png\"></p>\n<p>After the task has run you should see the following (see figure 4)</p>\n<p><img src=\"/images/SuccessfulGradleRun.png\" alt=\"SuccessfulGradleRun.png\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This article introduced you to BDD.  We modeled the business problem as a UML use case, and then transformed that diagram into a BDD Feature File in the Gherkin language.  We demonstrated a possible way to organize the project so that gradle could automatically compile and run the tests.</p>\n<p>.</p>\n","site":{"data":{}},"excerpt":"<p>Use Cucumber + JUint and Behavior Driven Development</p>","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Let’s continue with our testing exercise.  The last post described how to add unit test cases to a java class.  It used the various tools and annotations available in JUnit 5.0 to validate the behavior of the java class at a very low level.  This project is going to change it up and work with higher-level test concepts. We are going to be working in Behavior Driven Development (BDD) and creating Feature Files in the Gherkin testing language.</p>\n<p>The sample code for this article can be found on: ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">link to github</a>)</p>\n<p>Most of the projects I work on are oriented toward creating software to help a business accomplish some task.  Stakeholders and business analysts interact to solidify the business need and the proper behavior for the new system. These needs are captured and slowly transformed into a specification that engineers can use to create software. In an agile paradigm, these behavior specifications are captured in use cases, which are translated into user stories.  The business analyst and development team translate these user stories into features and finally, into working software.</p>\n<p>A software creation method called BDD uses feature files (written in Gherkin) to bridge the gap from business need specification to software development need specification. Feature files have a particular format: </p>\n<ul>\n<li>Feature – Name of the Feature (or business case)</li>\n<li>Scenario – description of the feature</li>\n<li>Given – specify the initial conditions</li>\n<li>When – specify some action or interaction with the feature</li>\n<li>Then – specify the result of the action or interaction.</li>\n</ul>\n<p>So, the feature file is a mapping of business use cases down to testable software modules.  The business analyst is the bridge between the stakeholders and the developers.  They work with the stakeholders to capture business use cases, translating those to features.  Then, they work with the developers to translate features into tests.</p>\n<p>The rest of the article will describe how to work with Eclipse and JUnit to incorporate BDD into the development process. </p>\n<h2 id=\"Our-Scenario\"><a href=\"#Our-Scenario\" class=\"headerlink\" title=\"Our Scenario\"></a>Our Scenario</h2><p>Using the graph from our previous article, let’s build a story and then a business case that we can use for BDD.  In Figure 1, we see the graph that describes the relationships between 5 characters.  These characters are gathered together to go on a quest for treasure. From the figure, we see that Tom is a central character.  Tom is a very skilled thief and always carries a sack.  Charlie and Emma are both powerful mages.  Olivia is also a mage.  Ben is a human and is currently carrying food.  Finally, Jasper is a swordsman.<br><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<h2 id=\"Some-Business-Rules\"><a href=\"#Some-Business-Rules\" class=\"headerlink\" title=\"Some Business Rules\"></a>Some Business Rules</h2><p>For a graph representation, we want to capture relationships between our characters.  We would also like to show these relationships.  In our low-level testing, we examined how to verify the correct working of our graph software by testing the operation of adding vertices, adding edges between vertices and asking for a list of neighbors of any vertex.  At a higher level, we are specifying use cases like in figure 2.</p>\n<p><img src=\"/images/Use_Case.png\" alt=\"Use_Case.png\"></p>\n<p>From our use case diagram, we have 4 cases or features we want the system to implement: </p>\n<ul>\n<li>Create a character, </li>\n<li>Add character to a graph, </li>\n<li>Add an edge or relationship between two characters</li>\n<li>Show the graph.  </li>\n</ul>\n<p>Let’s take each of the top 3 items and state them in Gherkin Feature file format.  Show the graph is just a print to the console.</p>\n<h1 id=\"Create-a-character\"><a href=\"#Create-a-character\" class=\"headerlink\" title=\"Create a character\"></a>Create a character</h1><p>The first test is creating a character.  A character has a name, a relative strength and is carrying something.  The feature file looks like the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Create a character</span><br><span class=\"line\">Create a character, by filling in a Graph Vertex</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: Create a character</span><br><span class=\"line\">Given: A Name, a strength and something to carry</span><br><span class=\"line\">When: Add the  name, strength and carried item to a vertex</span><br><span class=\"line\">Then: Test to see if the vertex is initialized properly</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The first line of the feature file has to say “Feature:”.  We describe the feature and provide a Scenario.  Following those, we provide the Given, When and Then clauses.  These last 3 (Given, When Then) form the basis of the test for this feature.  </p>\n<h1 id=\"Add-a-character-to-the-graph\"><a href=\"#Add-a-character-to-the-graph\" class=\"headerlink\" title=\"Add a character to the graph\"></a>Add a character to the graph</h1><p>The feature file is similar:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Add a character to the Graph</span><br><span class=\"line\">Take the vertex containing the character and add it to the graph</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: add vertex</span><br><span class=\"line\">Given: a filled in Vertex</span><br><span class=\"line\">When: I add it to the Graph</span><br><span class=\"line\">Then: the graph number of Vertex count should increase</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Add-an-edge-or-relationship-between-two-characters\"><a href=\"#Add-an-edge-or-relationship-between-two-characters\" class=\"headerlink\" title=\"Add an edge or relationship between two characters\"></a>Add an edge or relationship between two characters</h1><p>The Feature file:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Feature: Add an edge</span><br><span class=\"line\">Connect to characters</span><br><span class=\"line\"></span><br><span class=\"line\">Scenario: fill in an Edge </span><br><span class=\"line\">Given: 2 filled in Vertex, and a complete Edge</span><br><span class=\"line\">When: I add them to the Graph</span><br><span class=\"line\">Then: the Graph should reflect the new relationship</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Although I have not told you how to organize this material in the project yet, if you were to run the project at this point it would do nothing.  The Feature file indicates the tests that we want to run.  It does not define the actual tests.  The last step would be to code the actual tests. The tests are organized as steps (the given step, the when step, the then step).  In this case, we’ll lump all of the tests for each Feature into a single file.  The CreateCharacter step definition file would look like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class StepDefs_createCharacter &#123;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''private String name;</span><br><span class=\"line\">s''private int strength;</span><br><span class=\"line\">s''private List&lt;String&gt; carried = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''private Vertex v;</span><br><span class=\"line\"></span><br><span class=\"line\">s''@Given(&quot;^A Name, a strength and something to carry$&quot;)</span><br><span class=\"line\">s''public void A_Name_A_Strength_and_something_to_Carry() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;given: A Name, a strength and something to carry&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''name = &quot;Jasper&quot;;</span><br><span class=\"line\">s''s''strength = 11;</span><br><span class=\"line\">s''s''carried.add(&quot;sword&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@When(&quot;^Add the  name, strength and carried item to a vertex$&quot;)</span><br><span class=\"line\">s''public void Add_the_name_strength_and_carried_item_to_a_vertex() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;when: Add the  name, strength and carried item to a vertex&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''v = new Vertex(name, 0);</span><br><span class=\"line\">s''s''v.setStrength(11);</span><br><span class=\"line\">s''s''v.addToStuffCarried(&quot;sword&quot;);</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''@Then(&quot;^Test to see if the vertex is initialized properly$&quot;)</span><br><span class=\"line\">s''public void Test_to_see_if_the_vertex_is_initialized_properly() throws Exception &#123;</span><br><span class=\"line\">s''s''System.out.println(&quot;given: Test to see if the vertex is initialized properly&quot;);</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''String n = v.name();</span><br><span class=\"line\">s''s''int strength = v.strength();</span><br><span class=\"line\">s''s''ArrayList&lt;String&gt; items = v.getCarriedStuff();</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''assertEquals(&quot;Japser&quot;, n);</span><br><span class=\"line\">s''s''assertEquals(11, strength);</span><br><span class=\"line\">s''s''assertEquals(&quot;sword&quot;, items.get(0));</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''s''</span><br><span class=\"line\">s''&#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The “step definition” carries out the actual test.  I sets up the variables: name and strength. It then creates a Vertex with the data.  Finally, this step definition checks to see that the Vertex is organized correctly.  Each of the other step definition files are similar in structure. </p>\n<h1 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h1><p>In order to run the system with all of the tests you need to devise a structure.  You can use Eclipse to facilitate this.  I will choose Gradle since it aligns with the Continuous Integration and Continuous Deployment (CI/CD) used by most project teams.  Figure 3 gives you an idea of how to structure the project.  The main idea is to create 3 parts: a resource directory to contain the feature file; and 2 test packages to contain the TestRunner that corresponds to the feature specification and step definitions. </p>\n<p><img src=\"/images/ProjectStructure.png\" alt=\"ProjectStructure\"></p>\n<p>Let’s examine the feature specification for TestRunner_createCharacter.  The test runner is a part of JUnit.  I created one TestRunner for each Feature file definition in the resource directory.  Each TestRunner is tied to its Feature definition by the annotation “@CucumberOptions”.  Furthermore, the TestRunner is tied to the step definition in the same annotation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package testRunners;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import cucumber.api.CucumberOptions;</span><br><span class=\"line\">import cucumber.api.PendingException;</span><br><span class=\"line\">import cucumber.api.junit.Cucumber;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(Cucumber.class)</span><br><span class=\"line\">@CucumberOptions(features=&quot;resources/features&quot;, glue=&quot;src/test/java/stepDefinitions&quot;)</span><br><span class=\"line\">public class TestRunner_createCharacter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>This project was created as a gradle project in Eclipse.  Once this infrastructure is in place you can use the “Gradle Tasks” tab in Console output area to run the all the tests, just double click on the word “test” (see figure 3).  If you want to run a single test right click on the specific test runner file in the Package Explorer and select “Run As-&gt;Gradle Test”.</p>\n<p><img src=\"/images/GradleTasksTab.png\" alt=\"GradleTasksTab.png\"></p>\n<p>After the task has run you should see the following (see figure 4)</p>\n<p><img src=\"/images/SuccessfulGradleRun.png\" alt=\"SuccessfulGradleRun.png\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This article introduced you to BDD.  We modeled the business problem as a UML use case, and then transformed that diagram into a BDD Feature File in the Gherkin language.  We demonstrated a possible way to organize the project so that gradle could automatically compile and run the tests.</p>\n<p>.</p>"},{"title":"Consuming a REST service with React and testing with Jest","date":"2018-10-18T17:27:12.000Z","_content":"\n\nAn example of how to consume a REST service and test the page with Jest\n<!-- more -->\n\n# Introduction\n\nIn a previous article we created a graph REST service.  This article will continue with that effort and show how to use ReactJS to consume the graph.  We will also show how to use Jest to do unit testing on a React application.  The code for this article is on ( [github]( https://github.com/muguira-james/GraphsTesting_Java\n).  Look inside the \"BackRiver\" repo for the client directory.\n\nThe REST service backend used our Graph ADT.  A graph is composed of vertices and edges.  Our example had a team of 6 people going on a qwest.  The following diagram shows our team:\n\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\nEach person in the team had a [name, a strength attribute and they were carrying something]. In our team there are 6 vertex components, one for each team member. Arrows show the relationships between the team members.  These arrows are called edges.  An example of an edge is the relationship between Jasper and Tom.  Jasper is the beginning vertex in the edge and Tom is the end vertex.  The java code for a vertex looks like this (without getters and setters):\n\n```\n\npublic class Vertex {\n\tprivate String _name;\n\tprivate int _strength;\n\tprivate ArrayList<String> _carries = new ArrayList<String>();\n\tprivate int _ID;\n\t\n\t... (getters/setters removed)\n\n\tpublic Vertex(String nm, int initialID) { _ID = initialID; _name = nm; }\n\tpublic Vertex() { _ID = 0; _name = \"\"; }\n}\n\n```\n\nThe code for an edge looks like this:\n\n```\n\n\npublic class Edge {\n\tpublic Vertex beginning;\n\tpublic Vertex end;\n\t\n\tpublic Edge(Vertex v, Vertex w) { beginning = v; end = w; }\t\n\t\n    ...\n}\n\n```\n\nA graph is a data structure to hold information and relationships between information.  The nodes, or vertices, hold information and the edges represent the relationships.  Calling the REST service would give us a graph, composed of Vertex objects and a set of Edge objects.\n\n## React app\n\nWe'll use create-react-app to create a framework for our consumer.  We'll replace the generated code with our components.  Before we code the components we should decide on and define the tests.  This way we know what we are trying to achieve and the list of tests keeps on track.  The create-react-app command has testing included into the generated output. Taking a look at the directory listing of our client you see 3 App* files: App.js, App.css and App.test.js. We'll focus on App.test.js first.\n\nOne way of testing a React app is to use Jest.  Jest defines a test framework with test setup, running the test and tear down. We are going to do a very simple set of tests:\n\n+ Does the app render without failing. This has 2 cases: if the server is running and if not\n+ Is the app able to gather data from a server\n+ Does the app render a graph.  This is a check to make sure that specific class names are rendered to the page\n+ does the app render an adjacency list\n\nAt a high level, the above handles basic unit testing.  The other aspect of the application we have to worry about is connecting to a server and getting data.  For this article we'll use javascript's fetch function to retrieve the data.  The retrieved data will be placed in the application state, which drives React's render mechanism. At a high-level the app flow is:\n\n+ mount & get data -> render\n\nWe are going to take advantage of React's lifecycle methods to accomplish gathering server data.  When the app mounts or creates itself and attaches to the DOM, we'll use fetch to get our data.  \n\n## Testing with Jest\n\nWe have the server we wrote from before and we have a few tests. The create-react-app comes pre-wired with Jest setup.  If you are running the app we issue: \"npm start\".  If you want to test you issue: \"npm test\".  This is some setup that should happen.  You have to write a test file, in our case it is called App.test.js.  The Jest framework knows to look for files that end in *.test.js.  That file starts out like any other React program, we import required libraries.  We are also going to use a test tool called enzyme. Here is our setup file: called enzyme.js:\n\n```\n\nimport Enzyme, { configure, shallow, mount, render } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\nexport { shallow, mount, render };\nexport default Enzyme;\n\n```\n\nWe import required libraries, configure the right adaptor and export or make several parts of the library visible to our test environment.\n\n### React is fast!\n\nOne thing to note is that React is very fast. A simple app like this can easily render before the data is ready. Let's see that in action.  First, turn off the server if you have it running.  Here is a definition of our app that does not handle things properly.  Do an \"npm start\"\n\n```javascript=\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { graph: null, }\n  }\n\n  // use javascript fetch to get the graph from the server\n  componentDidMount() {\n    let url = 'http://localhost:8080/getQwestTest'\n\n    // just fetch, no error handling here!  We'll never know if the fetch fails\n    // when the fetch completes, put the graph in \"state\"\n    fetch(url)\n      .then(response => response.json())\n      .then((resp) => {\n        console.log(\"g->\", resp.graph)\n        this.setState({ graph: resp.graph })\n      })\n\n  }\n  render() {\n\n    // if (this.state.graph === null) {\n    //   return (<p>nothing here yet</p>)\n    // }\n    return (\n      <div>\n        <ShowGraph graph={this.state.graph} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nIn this state, before the fetch can complete, React has tried to render the graph.  The app fails because there is no data associated with \"this.state.graph\".  Once we uncomment lines 23-25 the app does not fail.  But since we did not start the server the app simply displays \"nothing here yet\". \n\nThis first test shows that the app handles problems gracefully. What does this look like in Jest?  Jest testing is almost another programming language.  We write a file full of tests.  In this case the first test is does the app render without failing.  It looks like:\n\n```\n\n\ndescribe(\"Graph Tests\", () => {\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n```\n\nJest uses a \"Describe() test(), ..., test()\" structure.  You describe in a high level way what is tested and then fill in individual tests.  The above code creates a DOM div element and tries to render the app on that div.  If it renders with error the test passes.  The next test is more involved: we define a small graph with a vertex named \"Olivia\" and a single relationship between Olivia and Tom. The test checks to make sure the output DOM contains a single node of class of graph-vertex.\n\n```\n\n  test('renders a graph vertex', () => {\n    const g = { Olivia: [{ beginning: { name: \"Olivia\", id: 1 }, end: { name: 'Tom', id: 2}}]}\n    const wrapper = mount((<ShowGraph graph={g} />));\n  \n    const t = wrapper.find('.graph-vertex')\n    \n    expect((t.children()).length).toBe(1)\n  });\n\n  ```\n\n\nThe last test is to render an adjacency list.  We create the list, use Jest mount to render the ShowAdjacent component and test to see if we have the proper class name and text.\n\n```\n\n  test('render adjacent', () => {\n    let graph = [ { beginning: {name: 'Olivia' }, end: {name: 'Ben'}}, ] \n    \n    const wrapper = mount(<ShowAdjacent graph={graph} />)\n    \n    const t = wrapper.find('.graph-edge')\n    expect(wrapper.find('.graph-edge')).toBeDefined()\n    expect(t.text()).toBe('Ben')\n  })\n\n ```\n\nIf the DOM contains the correct elements after the \"mount\" the test passes.  \n\nTo use Jest, instead of starting your app with \"npm start\" you use \"npm test\".  The React app create-react-app included the required functionality into you environment for you.  Your package.json file includes a scripts section with a \"test\" section that runs \"react-scripts test\".  Issuing a \"npm test\" command at the command prompt will generate the following output: \n\n```\n  RUNS  src/App.test.js\n\nTest Suites: 0 of 1 total\nTests:       0 total\nSnapshots:   0 total\n  console.log src/ShowGraph.js:11\n    i-> Olivia\n\n  console.log src/ShowAdjacent.js:6\n    t-> { graph: [ { beginning: [Object], end: [Object] } ] }\n\n  console.log src/ShowGraph.js:11\n    i-> Olivia\n\n PASS  src/App.test.jsAdjacent.js:6\n  Graph Tests\n    ✓ renders without crashing (104ms)\n    ✓ renders a graph vertex (33ms)\n    ✓ render adjacent (7ms)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        2.411s\nRan all test suites.\n\nWatch Usage: Press w to show more.\n```\n\nJest will continue to try tests as you save your work.  Our setup defines a single test suit composed of specific tests.  As you can see, Jest exposes console.log messages and a debug object. This can be useful to determine what is happening during the test and to provide additional documentation.\n\n# Conclusion\n\nJest has many verbs for creating tests.  This article just described a very basic testing structure. Testing using frameworks like Jest provide a great way to determine if software is functioning properly. Unit tests provide engineers with a means to ensure components work at a basic level.  As components are joined together to form larger systems, integration testing and behavior testing ensure that the software meets business requirements and delivers proper functionality.\n","source":"_posts/2018-10-18-React-and-Jest.md","raw":"---\ntitle: Consuming a REST service with React and testing with Jest\ntags:\n  - React\n  - Jest\ndate: 2018-10-18 13:27:12\n---\n\n\nAn example of how to consume a REST service and test the page with Jest\n<!-- more -->\n\n# Introduction\n\nIn a previous article we created a graph REST service.  This article will continue with that effort and show how to use ReactJS to consume the graph.  We will also show how to use Jest to do unit testing on a React application.  The code for this article is on ( [github]( https://github.com/muguira-james/GraphsTesting_Java\n).  Look inside the \"BackRiver\" repo for the client directory.\n\nThe REST service backend used our Graph ADT.  A graph is composed of vertices and edges.  Our example had a team of 6 people going on a qwest.  The following diagram shows our team:\n\n![GraphOfPeople.png](/images/GraphOfPeople.png)\n\nEach person in the team had a [name, a strength attribute and they were carrying something]. In our team there are 6 vertex components, one for each team member. Arrows show the relationships between the team members.  These arrows are called edges.  An example of an edge is the relationship between Jasper and Tom.  Jasper is the beginning vertex in the edge and Tom is the end vertex.  The java code for a vertex looks like this (without getters and setters):\n\n```\n\npublic class Vertex {\n\tprivate String _name;\n\tprivate int _strength;\n\tprivate ArrayList<String> _carries = new ArrayList<String>();\n\tprivate int _ID;\n\t\n\t... (getters/setters removed)\n\n\tpublic Vertex(String nm, int initialID) { _ID = initialID; _name = nm; }\n\tpublic Vertex() { _ID = 0; _name = \"\"; }\n}\n\n```\n\nThe code for an edge looks like this:\n\n```\n\n\npublic class Edge {\n\tpublic Vertex beginning;\n\tpublic Vertex end;\n\t\n\tpublic Edge(Vertex v, Vertex w) { beginning = v; end = w; }\t\n\t\n    ...\n}\n\n```\n\nA graph is a data structure to hold information and relationships between information.  The nodes, or vertices, hold information and the edges represent the relationships.  Calling the REST service would give us a graph, composed of Vertex objects and a set of Edge objects.\n\n## React app\n\nWe'll use create-react-app to create a framework for our consumer.  We'll replace the generated code with our components.  Before we code the components we should decide on and define the tests.  This way we know what we are trying to achieve and the list of tests keeps on track.  The create-react-app command has testing included into the generated output. Taking a look at the directory listing of our client you see 3 App* files: App.js, App.css and App.test.js. We'll focus on App.test.js first.\n\nOne way of testing a React app is to use Jest.  Jest defines a test framework with test setup, running the test and tear down. We are going to do a very simple set of tests:\n\n+ Does the app render without failing. This has 2 cases: if the server is running and if not\n+ Is the app able to gather data from a server\n+ Does the app render a graph.  This is a check to make sure that specific class names are rendered to the page\n+ does the app render an adjacency list\n\nAt a high level, the above handles basic unit testing.  The other aspect of the application we have to worry about is connecting to a server and getting data.  For this article we'll use javascript's fetch function to retrieve the data.  The retrieved data will be placed in the application state, which drives React's render mechanism. At a high-level the app flow is:\n\n+ mount & get data -> render\n\nWe are going to take advantage of React's lifecycle methods to accomplish gathering server data.  When the app mounts or creates itself and attaches to the DOM, we'll use fetch to get our data.  \n\n## Testing with Jest\n\nWe have the server we wrote from before and we have a few tests. The create-react-app comes pre-wired with Jest setup.  If you are running the app we issue: \"npm start\".  If you want to test you issue: \"npm test\".  This is some setup that should happen.  You have to write a test file, in our case it is called App.test.js.  The Jest framework knows to look for files that end in *.test.js.  That file starts out like any other React program, we import required libraries.  We are also going to use a test tool called enzyme. Here is our setup file: called enzyme.js:\n\n```\n\nimport Enzyme, { configure, shallow, mount, render } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\nexport { shallow, mount, render };\nexport default Enzyme;\n\n```\n\nWe import required libraries, configure the right adaptor and export or make several parts of the library visible to our test environment.\n\n### React is fast!\n\nOne thing to note is that React is very fast. A simple app like this can easily render before the data is ready. Let's see that in action.  First, turn off the server if you have it running.  Here is a definition of our app that does not handle things properly.  Do an \"npm start\"\n\n```javascript=\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { graph: null, }\n  }\n\n  // use javascript fetch to get the graph from the server\n  componentDidMount() {\n    let url = 'http://localhost:8080/getQwestTest'\n\n    // just fetch, no error handling here!  We'll never know if the fetch fails\n    // when the fetch completes, put the graph in \"state\"\n    fetch(url)\n      .then(response => response.json())\n      .then((resp) => {\n        console.log(\"g->\", resp.graph)\n        this.setState({ graph: resp.graph })\n      })\n\n  }\n  render() {\n\n    // if (this.state.graph === null) {\n    //   return (<p>nothing here yet</p>)\n    // }\n    return (\n      <div>\n        <ShowGraph graph={this.state.graph} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nIn this state, before the fetch can complete, React has tried to render the graph.  The app fails because there is no data associated with \"this.state.graph\".  Once we uncomment lines 23-25 the app does not fail.  But since we did not start the server the app simply displays \"nothing here yet\". \n\nThis first test shows that the app handles problems gracefully. What does this look like in Jest?  Jest testing is almost another programming language.  We write a file full of tests.  In this case the first test is does the app render without failing.  It looks like:\n\n```\n\n\ndescribe(\"Graph Tests\", () => {\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n```\n\nJest uses a \"Describe() test(), ..., test()\" structure.  You describe in a high level way what is tested and then fill in individual tests.  The above code creates a DOM div element and tries to render the app on that div.  If it renders with error the test passes.  The next test is more involved: we define a small graph with a vertex named \"Olivia\" and a single relationship between Olivia and Tom. The test checks to make sure the output DOM contains a single node of class of graph-vertex.\n\n```\n\n  test('renders a graph vertex', () => {\n    const g = { Olivia: [{ beginning: { name: \"Olivia\", id: 1 }, end: { name: 'Tom', id: 2}}]}\n    const wrapper = mount((<ShowGraph graph={g} />));\n  \n    const t = wrapper.find('.graph-vertex')\n    \n    expect((t.children()).length).toBe(1)\n  });\n\n  ```\n\n\nThe last test is to render an adjacency list.  We create the list, use Jest mount to render the ShowAdjacent component and test to see if we have the proper class name and text.\n\n```\n\n  test('render adjacent', () => {\n    let graph = [ { beginning: {name: 'Olivia' }, end: {name: 'Ben'}}, ] \n    \n    const wrapper = mount(<ShowAdjacent graph={graph} />)\n    \n    const t = wrapper.find('.graph-edge')\n    expect(wrapper.find('.graph-edge')).toBeDefined()\n    expect(t.text()).toBe('Ben')\n  })\n\n ```\n\nIf the DOM contains the correct elements after the \"mount\" the test passes.  \n\nTo use Jest, instead of starting your app with \"npm start\" you use \"npm test\".  The React app create-react-app included the required functionality into you environment for you.  Your package.json file includes a scripts section with a \"test\" section that runs \"react-scripts test\".  Issuing a \"npm test\" command at the command prompt will generate the following output: \n\n```\n  RUNS  src/App.test.js\n\nTest Suites: 0 of 1 total\nTests:       0 total\nSnapshots:   0 total\n  console.log src/ShowGraph.js:11\n    i-> Olivia\n\n  console.log src/ShowAdjacent.js:6\n    t-> { graph: [ { beginning: [Object], end: [Object] } ] }\n\n  console.log src/ShowGraph.js:11\n    i-> Olivia\n\n PASS  src/App.test.jsAdjacent.js:6\n  Graph Tests\n    ✓ renders without crashing (104ms)\n    ✓ renders a graph vertex (33ms)\n    ✓ render adjacent (7ms)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        2.411s\nRan all test suites.\n\nWatch Usage: Press w to show more.\n```\n\nJest will continue to try tests as you save your work.  Our setup defines a single test suit composed of specific tests.  As you can see, Jest exposes console.log messages and a debug object. This can be useful to determine what is happening during the test and to provide additional documentation.\n\n# Conclusion\n\nJest has many verbs for creating tests.  This article just described a very basic testing structure. Testing using frameworks like Jest provide a great way to determine if software is functioning properly. Unit tests provide engineers with a means to ensure components work at a basic level.  As components are joined together to form larger systems, integration testing and behavior testing ensure that the software meets business requirements and delivers proper functionality.\n","slug":"2018-10-18-React-and-Jest","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0af000hi7e8f5rabaet","content":"<p>An example of how to consume a REST service and test the page with Jest</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>In a previous article we created a graph REST service.  This article will continue with that effort and show how to use ReactJS to consume the graph.  We will also show how to use Jest to do unit testing on a React application.  The code for this article is on ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">github</a>.  Look inside the “BackRiver” repo for the client directory.</p>\n<p>The REST service backend used our Graph ADT.  A graph is composed of vertices and edges.  Our example had a team of 6 people going on a qwest.  The following diagram shows our team:</p>\n<p><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<p>Each person in the team had a [name, a strength attribute and they were carrying something]. In our team there are 6 vertex components, one for each team member. Arrows show the relationships between the team members.  These arrows are called edges.  An example of an edge is the relationship between Jasper and Tom.  Jasper is the beginning vertex in the edge and Tom is the end vertex.  The java code for a vertex looks like this (without getters and setters):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Vertex &#123;</span><br><span class=\"line\">s''private String _name;</span><br><span class=\"line\">s''private int _strength;</span><br><span class=\"line\">s''private ArrayList&lt;String&gt; _carries = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''private int _ID;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''... (getters/setters removed)</span><br><span class=\"line\"></span><br><span class=\"line\">s''public Vertex(String nm, int initialID) &#123; _ID = initialID; _name = nm; &#125;</span><br><span class=\"line\">s''public Vertex() &#123; _ID = 0; _name = &quot;&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The code for an edge looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Edge &#123;</span><br><span class=\"line\">s''public Vertex beginning;</span><br><span class=\"line\">s''public Vertex end;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public Edge(Vertex v, Vertex w) &#123; beginning = v; end = w; &#125;\t</span><br><span class=\"line\">s''</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>A graph is a data structure to hold information and relationships between information.  The nodes, or vertices, hold information and the edges represent the relationships.  Calling the REST service would give us a graph, composed of Vertex objects and a set of Edge objects.</p>\n<h2 id=\"React-app\"><a href=\"#React-app\" class=\"headerlink\" title=\"React app\"></a>React app</h2><p>We’ll use create-react-app to create a framework for our consumer.  We’ll replace the generated code with our components.  Before we code the components we should decide on and define the tests.  This way we know what we are trying to achieve and the list of tests keeps on track.  The create-react-app command has testing included into the generated output. Taking a look at the directory listing of our client you see 3 App* files: App.js, App.css and App.test.js. We’ll focus on App.test.js first.</p>\n<p>One way of testing a React app is to use Jest.  Jest defines a test framework with test setup, running the test and tear down. We are going to do a very simple set of tests:</p>\n<ul>\n<li>Does the app render without failing. This has 2 cases: if the server is running and if not</li>\n<li>Is the app able to gather data from a server</li>\n<li>Does the app render a graph.  This is a check to make sure that specific class names are rendered to the page</li>\n<li>does the app render an adjacency list</li>\n</ul>\n<p>At a high level, the above handles basic unit testing.  The other aspect of the application we have to worry about is connecting to a server and getting data.  For this article we’ll use javascript’s fetch function to retrieve the data.  The retrieved data will be placed in the application state, which drives React’s render mechanism. At a high-level the app flow is:</p>\n<ul>\n<li>mount &amp; get data -&gt; render</li>\n</ul>\n<p>We are going to take advantage of React’s lifecycle methods to accomplish gathering server data.  When the app mounts or creates itself and attaches to the DOM, we’ll use fetch to get our data.  </p>\n<h2 id=\"Testing-with-Jest\"><a href=\"#Testing-with-Jest\" class=\"headerlink\" title=\"Testing with Jest\"></a>Testing with Jest</h2><p>We have the server we wrote from before and we have a few tests. The create-react-app comes pre-wired with Jest setup.  If you are running the app we issue: “npm start”.  If you want to test you issue: “npm test”.  This is some setup that should happen.  You have to write a test file, in our case it is called App.test.js.  The Jest framework knows to look for files that end in *.test.js.  That file starts out like any other React program, we import required libraries.  We are also going to use a test tool called enzyme. Here is our setup file: called enzyme.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import Enzyme, &#123; configure, shallow, mount, render &#125; from &#x27;enzyme&#x27;;</span><br><span class=\"line\">import Adapter from &#x27;enzyme-adapter-react-16&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(&#123; adapter: new Adapter() &#125;);</span><br><span class=\"line\">export &#123; shallow, mount, render &#125;;</span><br><span class=\"line\">export default Enzyme;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We import required libraries, configure the right adaptor and export or make several parts of the library visible to our test environment.</p>\n<h3 id=\"React-is-fast\"><a href=\"#React-is-fast\" class=\"headerlink\" title=\"React is fast!\"></a>React is fast!</h3><p>One thing to note is that React is very fast. A simple app like this can easily render before the data is ready. Let’s see that in action.  First, turn off the server if you have it running.  Here is a definition of our app that does not handle things properly.  Do an “npm start”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">graph</span>: <span class=\"literal\">null</span>, &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use javascript fetch to get the graph from the server</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://localhost:8080/getQwestTest&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// just fetch, no error handling here!  We&#x27;ll never know if the fetch fails</span></span><br><span class=\"line\">    <span class=\"comment\">// when the fetch completes, put the graph in &quot;state&quot;</span></span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;g-&gt;&quot;</span>, resp.graph)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">graph</span>: resp.graph &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if (this.state.graph === null) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return (&lt;p&gt;nothing here yet&lt;/p&gt;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">ShowGraph</span> <span class=\"attr\">graph</span>=<span class=\"string\">&#123;this.state.graph&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>In this state, before the fetch can complete, React has tried to render the graph.  The app fails because there is no data associated with “this.state.graph”.  Once we uncomment lines 23-25 the app does not fail.  But since we did not start the server the app simply displays “nothing here yet”. </p>\n<p>This first test shows that the app handles problems gracefully. What does this look like in Jest?  Jest testing is almost another programming language.  We write a file full of tests.  In this case the first test is does the app render without failing.  It looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(&quot;Graph Tests&quot;, () =&gt; &#123;</span><br><span class=\"line\">  test(&#x27;renders without crashing&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    const div = document.createElement(&#x27;div&#x27;);</span><br><span class=\"line\">    ReactDOM.render(&lt;App /&gt;, div);</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(div);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Jest uses a “Describe() test(), …, test()” structure.  You describe in a high level way what is tested and then fill in individual tests.  The above code creates a DOM div element and tries to render the app on that div.  If it renders with error the test passes.  The next test is more involved: we define a small graph with a vertex named “Olivia” and a single relationship between Olivia and Tom. The test checks to make sure the output DOM contains a single node of class of graph-vertex.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">test(&#x27;renders a graph vertex&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  const g = &#123; Olivia: [&#123; beginning: &#123; name: &quot;Olivia&quot;, id: 1 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 2&#125;&#125;]&#125;</span><br><span class=\"line\">  const wrapper = mount((&lt;ShowGraph graph=&#123;g&#125; /&gt;));</span><br><span class=\"line\"></span><br><span class=\"line\">  const t = wrapper.find(&#x27;.graph-vertex&#x27;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  expect((t.children()).length).toBe(1)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>The last test is to render an adjacency list.  We create the list, use Jest mount to render the ShowAdjacent component and test to see if we have the proper class name and text.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">test(&#x27;render adjacent&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  let graph = [ &#123; beginning: &#123;name: &#x27;Olivia&#x27; &#125;, end: &#123;name: &#x27;Ben&#x27;&#125;&#125;, ] </span><br><span class=\"line\">  </span><br><span class=\"line\">  const wrapper = mount(&lt;ShowAdjacent graph=&#123;graph&#125; /&gt;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  const t = wrapper.find(&#x27;.graph-edge&#x27;)</span><br><span class=\"line\">  expect(wrapper.find(&#x27;.graph-edge&#x27;)).toBeDefined()</span><br><span class=\"line\">  expect(t.text()).toBe(&#x27;Ben&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If the DOM contains the correct elements after the “mount” the test passes.  </p>\n<p>To use Jest, instead of starting your app with “npm start” you use “npm test”.  The React app create-react-app included the required functionality into you environment for you.  Your package.json file includes a scripts section with a “test” section that runs “react-scripts test”.  Issuing a “npm test” command at the command prompt will generate the following output: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  RUNS  src/App.test.js</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 0 of 1 total</span><br><span class=\"line\">Tests:       0 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">  console.log src/ShowGraph.js:11</span><br><span class=\"line\">    i-&gt; Olivia</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log src/ShowAdjacent.js:6</span><br><span class=\"line\">    t-&gt; &#123; graph: [ &#123; beginning: [Object], end: [Object] &#125; ] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log src/ShowGraph.js:11</span><br><span class=\"line\">    i-&gt; Olivia</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  src/App.test.jsAdjacent.js:6</span><br><span class=\"line\">  Graph Tests</span><br><span class=\"line\">    ✓ renders without crashing (104ms)</span><br><span class=\"line\">    ✓ renders a graph vertex (33ms)</span><br><span class=\"line\">    ✓ render adjacent (7ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       3 passed, 3 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        2.411s</span><br><span class=\"line\">Ran all test suites.</span><br><span class=\"line\"></span><br><span class=\"line\">Watch Usage: Press w to show more.</span><br></pre></td></tr></table></figure>\n\n<p>Jest will continue to try tests as you save your work.  Our setup defines a single test suit composed of specific tests.  As you can see, Jest exposes console.log messages and a debug object. This can be useful to determine what is happening during the test and to provide additional documentation.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Jest has many verbs for creating tests.  This article just described a very basic testing structure. Testing using frameworks like Jest provide a great way to determine if software is functioning properly. Unit tests provide engineers with a means to ensure components work at a basic level.  As components are joined together to form larger systems, integration testing and behavior testing ensure that the software meets business requirements and delivers proper functionality.</p>\n","site":{"data":{}},"excerpt":"<p>An example of how to consume a REST service and test the page with Jest</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>In a previous article we created a graph REST service.  This article will continue with that effort and show how to use ReactJS to consume the graph.  We will also show how to use Jest to do unit testing on a React application.  The code for this article is on ( <a href=\"https://github.com/muguira-james/GraphsTesting_Java\">github</a>.  Look inside the “BackRiver” repo for the client directory.</p>\n<p>The REST service backend used our Graph ADT.  A graph is composed of vertices and edges.  Our example had a team of 6 people going on a qwest.  The following diagram shows our team:</p>\n<p><img src=\"/images/GraphOfPeople.png\" alt=\"GraphOfPeople.png\"></p>\n<p>Each person in the team had a [name, a strength attribute and they were carrying something]. In our team there are 6 vertex components, one for each team member. Arrows show the relationships between the team members.  These arrows are called edges.  An example of an edge is the relationship between Jasper and Tom.  Jasper is the beginning vertex in the edge and Tom is the end vertex.  The java code for a vertex looks like this (without getters and setters):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Vertex &#123;</span><br><span class=\"line\">s''private String _name;</span><br><span class=\"line\">s''private int _strength;</span><br><span class=\"line\">s''private ArrayList&lt;String&gt; _carries = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''private int _ID;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''... (getters/setters removed)</span><br><span class=\"line\"></span><br><span class=\"line\">s''public Vertex(String nm, int initialID) &#123; _ID = initialID; _name = nm; &#125;</span><br><span class=\"line\">s''public Vertex() &#123; _ID = 0; _name = &quot;&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The code for an edge looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Edge &#123;</span><br><span class=\"line\">s''public Vertex beginning;</span><br><span class=\"line\">s''public Vertex end;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public Edge(Vertex v, Vertex w) &#123; beginning = v; end = w; &#125;\t</span><br><span class=\"line\">s''</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>A graph is a data structure to hold information and relationships between information.  The nodes, or vertices, hold information and the edges represent the relationships.  Calling the REST service would give us a graph, composed of Vertex objects and a set of Edge objects.</p>\n<h2 id=\"React-app\"><a href=\"#React-app\" class=\"headerlink\" title=\"React app\"></a>React app</h2><p>We’ll use create-react-app to create a framework for our consumer.  We’ll replace the generated code with our components.  Before we code the components we should decide on and define the tests.  This way we know what we are trying to achieve and the list of tests keeps on track.  The create-react-app command has testing included into the generated output. Taking a look at the directory listing of our client you see 3 App* files: App.js, App.css and App.test.js. We’ll focus on App.test.js first.</p>\n<p>One way of testing a React app is to use Jest.  Jest defines a test framework with test setup, running the test and tear down. We are going to do a very simple set of tests:</p>\n<ul>\n<li>Does the app render without failing. This has 2 cases: if the server is running and if not</li>\n<li>Is the app able to gather data from a server</li>\n<li>Does the app render a graph.  This is a check to make sure that specific class names are rendered to the page</li>\n<li>does the app render an adjacency list</li>\n</ul>\n<p>At a high level, the above handles basic unit testing.  The other aspect of the application we have to worry about is connecting to a server and getting data.  For this article we’ll use javascript’s fetch function to retrieve the data.  The retrieved data will be placed in the application state, which drives React’s render mechanism. At a high-level the app flow is:</p>\n<ul>\n<li>mount &amp; get data -&gt; render</li>\n</ul>\n<p>We are going to take advantage of React’s lifecycle methods to accomplish gathering server data.  When the app mounts or creates itself and attaches to the DOM, we’ll use fetch to get our data.  </p>\n<h2 id=\"Testing-with-Jest\"><a href=\"#Testing-with-Jest\" class=\"headerlink\" title=\"Testing with Jest\"></a>Testing with Jest</h2><p>We have the server we wrote from before and we have a few tests. The create-react-app comes pre-wired with Jest setup.  If you are running the app we issue: “npm start”.  If you want to test you issue: “npm test”.  This is some setup that should happen.  You have to write a test file, in our case it is called App.test.js.  The Jest framework knows to look for files that end in *.test.js.  That file starts out like any other React program, we import required libraries.  We are also going to use a test tool called enzyme. Here is our setup file: called enzyme.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import Enzyme, &#123; configure, shallow, mount, render &#125; from &#x27;enzyme&#x27;;</span><br><span class=\"line\">import Adapter from &#x27;enzyme-adapter-react-16&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(&#123; adapter: new Adapter() &#125;);</span><br><span class=\"line\">export &#123; shallow, mount, render &#125;;</span><br><span class=\"line\">export default Enzyme;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We import required libraries, configure the right adaptor and export or make several parts of the library visible to our test environment.</p>\n<h3 id=\"React-is-fast\"><a href=\"#React-is-fast\" class=\"headerlink\" title=\"React is fast!\"></a>React is fast!</h3><p>One thing to note is that React is very fast. A simple app like this can easily render before the data is ready. Let’s see that in action.  First, turn off the server if you have it running.  Here is a definition of our app that does not handle things properly.  Do an “npm start”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">graph</span>: <span class=\"literal\">null</span>, &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use javascript fetch to get the graph from the server</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://localhost:8080/getQwestTest&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// just fetch, no error handling here!  We&#x27;ll never know if the fetch fails</span></span><br><span class=\"line\">    <span class=\"comment\">// when the fetch completes, put the graph in &quot;state&quot;</span></span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;g-&gt;&quot;</span>, resp.graph)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">graph</span>: resp.graph &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if (this.state.graph === null) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return (&lt;p&gt;nothing here yet&lt;/p&gt;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">ShowGraph</span> <span class=\"attr\">graph</span>=<span class=\"string\">&#123;this.state.graph&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>In this state, before the fetch can complete, React has tried to render the graph.  The app fails because there is no data associated with “this.state.graph”.  Once we uncomment lines 23-25 the app does not fail.  But since we did not start the server the app simply displays “nothing here yet”. </p>\n<p>This first test shows that the app handles problems gracefully. What does this look like in Jest?  Jest testing is almost another programming language.  We write a file full of tests.  In this case the first test is does the app render without failing.  It looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">describe(&quot;Graph Tests&quot;, () =&gt; &#123;</span><br><span class=\"line\">  test(&#x27;renders without crashing&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    const div = document.createElement(&#x27;div&#x27;);</span><br><span class=\"line\">    ReactDOM.render(&lt;App /&gt;, div);</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(div);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Jest uses a “Describe() test(), …, test()” structure.  You describe in a high level way what is tested and then fill in individual tests.  The above code creates a DOM div element and tries to render the app on that div.  If it renders with error the test passes.  The next test is more involved: we define a small graph with a vertex named “Olivia” and a single relationship between Olivia and Tom. The test checks to make sure the output DOM contains a single node of class of graph-vertex.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">test(&#x27;renders a graph vertex&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  const g = &#123; Olivia: [&#123; beginning: &#123; name: &quot;Olivia&quot;, id: 1 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 2&#125;&#125;]&#125;</span><br><span class=\"line\">  const wrapper = mount((&lt;ShowGraph graph=&#123;g&#125; /&gt;));</span><br><span class=\"line\"></span><br><span class=\"line\">  const t = wrapper.find(&#x27;.graph-vertex&#x27;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  expect((t.children()).length).toBe(1)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>The last test is to render an adjacency list.  We create the list, use Jest mount to render the ShowAdjacent component and test to see if we have the proper class name and text.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">test(&#x27;render adjacent&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  let graph = [ &#123; beginning: &#123;name: &#x27;Olivia&#x27; &#125;, end: &#123;name: &#x27;Ben&#x27;&#125;&#125;, ] </span><br><span class=\"line\">  </span><br><span class=\"line\">  const wrapper = mount(&lt;ShowAdjacent graph=&#123;graph&#125; /&gt;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  const t = wrapper.find(&#x27;.graph-edge&#x27;)</span><br><span class=\"line\">  expect(wrapper.find(&#x27;.graph-edge&#x27;)).toBeDefined()</span><br><span class=\"line\">  expect(t.text()).toBe(&#x27;Ben&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If the DOM contains the correct elements after the “mount” the test passes.  </p>\n<p>To use Jest, instead of starting your app with “npm start” you use “npm test”.  The React app create-react-app included the required functionality into you environment for you.  Your package.json file includes a scripts section with a “test” section that runs “react-scripts test”.  Issuing a “npm test” command at the command prompt will generate the following output: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  RUNS  src/App.test.js</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 0 of 1 total</span><br><span class=\"line\">Tests:       0 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">  console.log src/ShowGraph.js:11</span><br><span class=\"line\">    i-&gt; Olivia</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log src/ShowAdjacent.js:6</span><br><span class=\"line\">    t-&gt; &#123; graph: [ &#123; beginning: [Object], end: [Object] &#125; ] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log src/ShowGraph.js:11</span><br><span class=\"line\">    i-&gt; Olivia</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  src/App.test.jsAdjacent.js:6</span><br><span class=\"line\">  Graph Tests</span><br><span class=\"line\">    ✓ renders without crashing (104ms)</span><br><span class=\"line\">    ✓ renders a graph vertex (33ms)</span><br><span class=\"line\">    ✓ render adjacent (7ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       3 passed, 3 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        2.411s</span><br><span class=\"line\">Ran all test suites.</span><br><span class=\"line\"></span><br><span class=\"line\">Watch Usage: Press w to show more.</span><br></pre></td></tr></table></figure>\n\n<p>Jest will continue to try tests as you save your work.  Our setup defines a single test suit composed of specific tests.  As you can see, Jest exposes console.log messages and a debug object. This can be useful to determine what is happening during the test and to provide additional documentation.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Jest has many verbs for creating tests.  This article just described a very basic testing structure. Testing using frameworks like Jest provide a great way to determine if software is functioning properly. Unit tests provide engineers with a means to ensure components work at a basic level.  As components are joined together to form larger systems, integration testing and behavior testing ensure that the software meets business requirements and delivers proper functionality.</p>"},{"title":"React UI construction and testing with Storybook","date":"2018-10-14T17:27:12.000Z","_content":"\n\nCreating and testing a UI should be visual.\n<!-- more -->\n# Introduction\n\nIn a previous article, I wrote about employing Jest and BDD to test a UI.  Jest is a powerful tool with a lot of primitives to structure UI testing.  However, it is not very intuitive. \n\nThis caused me to search around in the React eco-system looking for a better tool.  I wanted to be able to see what I was building and develop the tests as I go.  Storybook is a very nice tool. It is NOT a visual construction framework.  It IS a visual way to structure tests. Let's take the React app we wrote for the Graph ADT and rebuild it using Storybook.\n\n## Setup\n\nStorybook is very easy to setup.  I will recommend 2 sites: the Storybook \n\n+ [ storybookjs.org ]( https://storybook.js.org/ ) for how to install it; and \n+ [ learn storybook ]( https://www.learnstorybook.com/react/en/get-started/ ) as a good tutorial.  \n\nThis article will build on the \"learn Storybook\" material to build our graph adt consumer.  The original graph consumer and visualizer was very simple: it shows the graph as text with relationships show as indentions. This post will expand that a little to demo more of Storybook's features.  I am not going too deeply into what Storybook can do.  \n\nOur previous article started by describing the Vertex and Edge data structures.  Vertex are used to hold information about entities in our system.  Things like the name, strength of a player and a list of what they were carrying.  Edges represent the relationships between the players.  In our example, relationships were one directional. The previous article then described the tests.  This is where this article will differ.  Let's use Storybook to build the UI from the bottom up.\n\n## Testing the Adjacency List\n\nThe lowest level aspect of the UI is to display a single relationship, a graph Edge.  A Graph Edge is an Object with a beginning and an end vertex.  A vertex is composed of a name, a strength (we'll not worry about the list of carried items for now).  Let's start by displaying the \"end\" of the relationship, the name.  In the Storybook UI, this would look like: \n\n![ShowAdjacent default view](/images/ShowAdjacent_default.png)\n\nNot too interesting, just the name \"Tom\".  The Storybook interface contains several components: on the left is a nav panel showing each of the \"stories\" in your project, on the right is a visual of the UI in test and in the lower right is the log.  In Storybook, you code stories for each test of your UI. Our first story is to simply show the UI.  Storybook setup specifies that you create a __stories__ sub dir under your src dir.  I'm going to follow the Jest convention and name my story files like this: \"ShowAdjacent.stories.js\" and place them in the same dir as the file under test.  This implies we have to change Storybook's default config a little.  When we loaded storybook into our environment (with npm i @storybook/cli and then ran getstorybook) it created a directory called .storybook.  This dir contains a config file.  Here is mine after I changed it:\n\n```\nimport { configure } from '@storybook/react';\n\nconst req = require.context('../src', true, /.stories.js$/);\n\nfunction loadStories() {\n  req.keys().forEach(filename => req(filename));\n}\n\nconfigure(loadStories, module);\n```\n\nThe second line tells storybook to look in my src dir for files that fit the pattern \"*.stories.js\" and use those. My first stories file (ShowAdjacent.stories.js) looks like this:\n\n```\n\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowAdjacent from './ShowAdjacent';\n\nexport const adjacentList = [\n    {\n        beginning: { name: \"Jasper\",  id: 0 },\n        end: { name: 'Tom', id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  \n\n```\n\nStorybook story files follow a pattern: they import needed files, define data types and then define the stories (tests).  In this case, we defined an adjacent list that has a valid beginning (\"Jasper\") and end (\"Tom\") vertex.  The \"stories\" section of the file defines the test: we called it \"ShowAdjacent test\" and used the .add primitive to define a test called default.  The default test just calls the ShowAdjacent React component and hands it props.  The next test that comes to mind is what happens if the adjacent list is malformed? Let's build an adjacent list missing the name for the end of the relationship.\n\n```\n\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowAdjacent from './ShowAdjacent';\n\nexport const adjacentList = [\n    {\n        beginning: { name: \"Jasper\",  id: 0 },\n        end: { name: 'Tom', id: 1 }\n    }\n]\nexport const empty_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { name: \"\", id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  .add('undef name', () => <ShowAdjacent adjacentList={undef_name} />)\n\n```\n\nIn this case, the app should not crash, yet it does! The problem is that the ShowAdjacent component does not handle the case of badly formed adjacency lists. We'll have to refactor the code. The refactor is straight forward, we check to see if there is a name before we try and return the list item. Another test we should try here is to make sure the app gracefully handles no adjacency list. I'll just show the data and the story case:\n\n```\n\nexport const empty_adjacentList = []\n\nexport const empty_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { name: \"\", id: 1 }\n    }\n]\n\nexport const undef_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  .add('undef name', () => <ShowAdjacent adjacentList={undef_name} />)\n  .add('no data', () => <ShowAdjacent adjacentList={empty_adjacentList} />)\n\n```\n\n# Testing the Graph\n\nWe have created and run some stories for testing the Adjacency list.  Let's test the next component up, the graph.  The graph stories file follows the same pattern: import the files you need, setup some data, define the tests.  In our case, we'll run 4 tests: \n\n+ a default graph\n+ an empty graph\n+ an adjacency list with several entries\n+ a graph with several vertex entries\n\n```\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowGraph from './ShowGraph'\n\nexport const graph = {\n    Olivia: [ { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } } ]\n}\n\nexport const longer_adjacent = {\n    Olivia: [\n        { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Charlie', id: 1 } },\n    ]\n}\n\nexport const longer_graph = {\n    Olivia: [\n        { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Charlie', id: 1 } },\n    ],\n    Tom: [\n        { beginning: { name: \"Tom\", id: 0 }, end: { name: 'Ben', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Emma', id: 1 } },\n    ]\n}\n\nexport const empty_graph = {}\n\nstoriesOf('ShowGraph', module)\n    .add('default', () => <ShowGraph graph={graph} />)\n    .add('empty_graph', () => <ShowGraph graph={empty_graph} />)\n    .add('longer_adjacent', () => <ShowGraph graph={longer_adjacent} />)\n    .add('longer_graph', () => <ShowGraph graph={longer_graph} />)\n    \n```\n\nIn each case, we call our ShowGraph component with the test data.  This paradigm presents a visual way to check to see if your component will pass basic sanity checks.  More intense development environments would require continuous integration and continuous deploy (CI/CD).  That is out of scope for this article. We are going to stay with visual testing. \n\n# Conclusion\n\nWe used Storybook as a visual way to create and test a set of React JS components. Storybook runs in the browser and presents different stories of how the UI components should behave given supplied test data.  Like Jest, Storybook can mount each component in isolation so you can focus your coding and testing.  The big difference is that Storybook is a visual tool: you see what the component looks like as you create your tests.  This article just touched the surface of what Storybook can do.  I encourage you to head to their website and explore further.\n","source":"_posts/2018-10-23-React-UI-construction-and-testing-with-storybook.md","raw":"---\ntitle: React UI construction and testing with Storybook\ntags:\n  - React\n  - Javascript\ncategories:\n  - Programming\ndate: 2018-10-14 13:27:12\n---\n\n\nCreating and testing a UI should be visual.\n<!-- more -->\n# Introduction\n\nIn a previous article, I wrote about employing Jest and BDD to test a UI.  Jest is a powerful tool with a lot of primitives to structure UI testing.  However, it is not very intuitive. \n\nThis caused me to search around in the React eco-system looking for a better tool.  I wanted to be able to see what I was building and develop the tests as I go.  Storybook is a very nice tool. It is NOT a visual construction framework.  It IS a visual way to structure tests. Let's take the React app we wrote for the Graph ADT and rebuild it using Storybook.\n\n## Setup\n\nStorybook is very easy to setup.  I will recommend 2 sites: the Storybook \n\n+ [ storybookjs.org ]( https://storybook.js.org/ ) for how to install it; and \n+ [ learn storybook ]( https://www.learnstorybook.com/react/en/get-started/ ) as a good tutorial.  \n\nThis article will build on the \"learn Storybook\" material to build our graph adt consumer.  The original graph consumer and visualizer was very simple: it shows the graph as text with relationships show as indentions. This post will expand that a little to demo more of Storybook's features.  I am not going too deeply into what Storybook can do.  \n\nOur previous article started by describing the Vertex and Edge data structures.  Vertex are used to hold information about entities in our system.  Things like the name, strength of a player and a list of what they were carrying.  Edges represent the relationships between the players.  In our example, relationships were one directional. The previous article then described the tests.  This is where this article will differ.  Let's use Storybook to build the UI from the bottom up.\n\n## Testing the Adjacency List\n\nThe lowest level aspect of the UI is to display a single relationship, a graph Edge.  A Graph Edge is an Object with a beginning and an end vertex.  A vertex is composed of a name, a strength (we'll not worry about the list of carried items for now).  Let's start by displaying the \"end\" of the relationship, the name.  In the Storybook UI, this would look like: \n\n![ShowAdjacent default view](/images/ShowAdjacent_default.png)\n\nNot too interesting, just the name \"Tom\".  The Storybook interface contains several components: on the left is a nav panel showing each of the \"stories\" in your project, on the right is a visual of the UI in test and in the lower right is the log.  In Storybook, you code stories for each test of your UI. Our first story is to simply show the UI.  Storybook setup specifies that you create a __stories__ sub dir under your src dir.  I'm going to follow the Jest convention and name my story files like this: \"ShowAdjacent.stories.js\" and place them in the same dir as the file under test.  This implies we have to change Storybook's default config a little.  When we loaded storybook into our environment (with npm i @storybook/cli and then ran getstorybook) it created a directory called .storybook.  This dir contains a config file.  Here is mine after I changed it:\n\n```\nimport { configure } from '@storybook/react';\n\nconst req = require.context('../src', true, /.stories.js$/);\n\nfunction loadStories() {\n  req.keys().forEach(filename => req(filename));\n}\n\nconfigure(loadStories, module);\n```\n\nThe second line tells storybook to look in my src dir for files that fit the pattern \"*.stories.js\" and use those. My first stories file (ShowAdjacent.stories.js) looks like this:\n\n```\n\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowAdjacent from './ShowAdjacent';\n\nexport const adjacentList = [\n    {\n        beginning: { name: \"Jasper\",  id: 0 },\n        end: { name: 'Tom', id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  \n\n```\n\nStorybook story files follow a pattern: they import needed files, define data types and then define the stories (tests).  In this case, we defined an adjacent list that has a valid beginning (\"Jasper\") and end (\"Tom\") vertex.  The \"stories\" section of the file defines the test: we called it \"ShowAdjacent test\" and used the .add primitive to define a test called default.  The default test just calls the ShowAdjacent React component and hands it props.  The next test that comes to mind is what happens if the adjacent list is malformed? Let's build an adjacent list missing the name for the end of the relationship.\n\n```\n\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowAdjacent from './ShowAdjacent';\n\nexport const adjacentList = [\n    {\n        beginning: { name: \"Jasper\",  id: 0 },\n        end: { name: 'Tom', id: 1 }\n    }\n]\nexport const empty_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { name: \"\", id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  .add('undef name', () => <ShowAdjacent adjacentList={undef_name} />)\n\n```\n\nIn this case, the app should not crash, yet it does! The problem is that the ShowAdjacent component does not handle the case of badly formed adjacency lists. We'll have to refactor the code. The refactor is straight forward, we check to see if there is a name before we try and return the list item. Another test we should try here is to make sure the app gracefully handles no adjacency list. I'll just show the data and the story case:\n\n```\n\nexport const empty_adjacentList = []\n\nexport const empty_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { name: \"\", id: 1 }\n    }\n]\n\nexport const undef_name = [\n    {\n        beginning: { name: \"\",  id: 0 },\n        end: { id: 1 }\n    }\n]\n\nstoriesOf('ShowAdjacent test', module)\n  .add('default', () => <ShowAdjacent adjacentList={adjacentList} />)\n  .add('undef name', () => <ShowAdjacent adjacentList={undef_name} />)\n  .add('no data', () => <ShowAdjacent adjacentList={empty_adjacentList} />)\n\n```\n\n# Testing the Graph\n\nWe have created and run some stories for testing the Adjacency list.  Let's test the next component up, the graph.  The graph stories file follows the same pattern: import the files you need, setup some data, define the tests.  In our case, we'll run 4 tests: \n\n+ a default graph\n+ an empty graph\n+ an adjacency list with several entries\n+ a graph with several vertex entries\n\n```\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport ShowGraph from './ShowGraph'\n\nexport const graph = {\n    Olivia: [ { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } } ]\n}\n\nexport const longer_adjacent = {\n    Olivia: [\n        { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Charlie', id: 1 } },\n    ]\n}\n\nexport const longer_graph = {\n    Olivia: [\n        { beginning: { name: \"Jasper\", id: 0 }, end: { name: 'Tom', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Charlie', id: 1 } },\n    ],\n    Tom: [\n        { beginning: { name: \"Tom\", id: 0 }, end: { name: 'Ben', id: 1 } },\n        { beginning: { name: \"Olivia\", id: 0 }, end: { name: 'Emma', id: 1 } },\n    ]\n}\n\nexport const empty_graph = {}\n\nstoriesOf('ShowGraph', module)\n    .add('default', () => <ShowGraph graph={graph} />)\n    .add('empty_graph', () => <ShowGraph graph={empty_graph} />)\n    .add('longer_adjacent', () => <ShowGraph graph={longer_adjacent} />)\n    .add('longer_graph', () => <ShowGraph graph={longer_graph} />)\n    \n```\n\nIn each case, we call our ShowGraph component with the test data.  This paradigm presents a visual way to check to see if your component will pass basic sanity checks.  More intense development environments would require continuous integration and continuous deploy (CI/CD).  That is out of scope for this article. We are going to stay with visual testing. \n\n# Conclusion\n\nWe used Storybook as a visual way to create and test a set of React JS components. Storybook runs in the browser and presents different stories of how the UI components should behave given supplied test data.  Like Jest, Storybook can mount each component in isolation so you can focus your coding and testing.  The big difference is that Storybook is a visual tool: you see what the component looks like as you create your tests.  This article just touched the surface of what Storybook can do.  I encourage you to head to their website and explore further.\n","slug":"2018-10-23-React-UI-construction-and-testing-with-storybook","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0ah000ki7e81v972pwz","content":"<p>Creating and testing a UI should be visual.</p>\n<span id=\"more\"></span>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>In a previous article, I wrote about employing Jest and BDD to test a UI.  Jest is a powerful tool with a lot of primitives to structure UI testing.  However, it is not very intuitive. </p>\n<p>This caused me to search around in the React eco-system looking for a better tool.  I wanted to be able to see what I was building and develop the tests as I go.  Storybook is a very nice tool. It is NOT a visual construction framework.  It IS a visual way to structure tests. Let’s take the React app we wrote for the Graph ADT and rebuild it using Storybook.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Storybook is very easy to setup.  I will recommend 2 sites: the Storybook </p>\n<ul>\n<li><a href=\"https://storybook.js.org/\"> storybookjs.org </a> for how to install it; and </li>\n<li><a href=\"https://www.learnstorybook.com/react/en/get-started/\"> learn storybook </a> as a good tutorial.  </li>\n</ul>\n<p>This article will build on the “learn Storybook” material to build our graph adt consumer.  The original graph consumer and visualizer was very simple: it shows the graph as text with relationships show as indentions. This post will expand that a little to demo more of Storybook’s features.  I am not going too deeply into what Storybook can do.  </p>\n<p>Our previous article started by describing the Vertex and Edge data structures.  Vertex are used to hold information about entities in our system.  Things like the name, strength of a player and a list of what they were carrying.  Edges represent the relationships between the players.  In our example, relationships were one directional. The previous article then described the tests.  This is where this article will differ.  Let’s use Storybook to build the UI from the bottom up.</p>\n<h2 id=\"Testing-the-Adjacency-List\"><a href=\"#Testing-the-Adjacency-List\" class=\"headerlink\" title=\"Testing the Adjacency List\"></a>Testing the Adjacency List</h2><p>The lowest level aspect of the UI is to display a single relationship, a graph Edge.  A Graph Edge is an Object with a beginning and an end vertex.  A vertex is composed of a name, a strength (we’ll not worry about the list of carried items for now).  Let’s start by displaying the “end” of the relationship, the name.  In the Storybook UI, this would look like: </p>\n<p><img src=\"/images/ShowAdjacent_default.png\" alt=\"ShowAdjacent default view\"></p>\n<p>Not too interesting, just the name “Tom”.  The Storybook interface contains several components: on the left is a nav panel showing each of the “stories” in your project, on the right is a visual of the UI in test and in the lower right is the log.  In Storybook, you code stories for each test of your UI. Our first story is to simply show the UI.  Storybook setup specifies that you create a <strong>stories</strong> sub dir under your src dir.  I’m going to follow the Jest convention and name my story files like this: “ShowAdjacent.stories.js” and place them in the same dir as the file under test.  This implies we have to change Storybook’s default config a little.  When we loaded storybook into our environment (with npm i @storybook/cli and then ran getstorybook) it created a directory called .storybook.  This dir contains a config file.  Here is mine after I changed it:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; configure &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const req = require.context(&#x27;../src&#x27;, true, /.stories.js$/);</span><br><span class=\"line\"></span><br><span class=\"line\">function loadStories() &#123;</span><br><span class=\"line\">  req.keys().forEach(filename =&gt; req(filename));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(loadStories, module);</span><br></pre></td></tr></table></figure>\n\n<p>The second line tells storybook to look in my src dir for files that fit the pattern “*.stories.js” and use those. My first stories file (ShowAdjacent.stories.js) looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowAdjacent from &#x27;./ShowAdjacent&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const adjacentList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;Jasper&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Storybook story files follow a pattern: they import needed files, define data types and then define the stories (tests).  In this case, we defined an adjacent list that has a valid beginning (“Jasper”) and end (“Tom”) vertex.  The “stories” section of the file defines the test: we called it “ShowAdjacent test” and used the .add primitive to define a test called default.  The default test just calls the ShowAdjacent React component and hands it props.  The next test that comes to mind is what happens if the adjacent list is malformed? Let’s build an adjacent list missing the name for the end of the relationship.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowAdjacent from &#x27;./ShowAdjacent&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const adjacentList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;Jasper&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">export const empty_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &quot;&quot;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;undef name&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;undef_name&#125; /&gt;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this case, the app should not crash, yet it does! The problem is that the ShowAdjacent component does not handle the case of badly formed adjacency lists. We’ll have to refactor the code. The refactor is straight forward, we check to see if there is a name before we try and return the list item. Another test we should try here is to make sure the app gracefully handles no adjacency list. I’ll just show the data and the story case:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export const empty_adjacentList = []</span><br><span class=\"line\"></span><br><span class=\"line\">export const empty_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &quot;&quot;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">export const undef_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;undef name&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;undef_name&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;no data&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;empty_adjacentList&#125; /&gt;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Testing-the-Graph\"><a href=\"#Testing-the-Graph\" class=\"headerlink\" title=\"Testing the Graph\"></a>Testing the Graph</h1><p>We have created and run some stories for testing the Adjacency list.  Let’s test the next component up, the graph.  The graph stories file follows the same pattern: import the files you need, setup some data, define the tests.  In our case, we’ll run 4 tests: </p>\n<ul>\n<li>a default graph</li>\n<li>an empty graph</li>\n<li>an adjacency list with several entries</li>\n<li>a graph with several vertex entries</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowGraph from &#x27;./ShowGraph&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export const graph = &#123;</span><br><span class=\"line\">    Olivia: [ &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const longer_adjacent = &#123;</span><br><span class=\"line\">    Olivia: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Charlie&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const longer_graph = &#123;</span><br><span class=\"line\">    Olivia: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Charlie&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    Tom: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Tom&quot;, id: 0 &#125;, end: &#123; name: &#x27;Ben&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Emma&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const empty_graph = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowGraph&#x27;, module)</span><br><span class=\"line\">    .add(&#x27;default&#x27;, () =&gt; &lt;ShowGraph graph=&#123;graph&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;empty_graph&#x27;, () =&gt; &lt;ShowGraph graph=&#123;empty_graph&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;longer_adjacent&#x27;, () =&gt; &lt;ShowGraph graph=&#123;longer_adjacent&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;longer_graph&#x27;, () =&gt; &lt;ShowGraph graph=&#123;longer_graph&#125; /&gt;)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>In each case, we call our ShowGraph component with the test data.  This paradigm presents a visual way to check to see if your component will pass basic sanity checks.  More intense development environments would require continuous integration and continuous deploy (CI/CD).  That is out of scope for this article. We are going to stay with visual testing. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We used Storybook as a visual way to create and test a set of React JS components. Storybook runs in the browser and presents different stories of how the UI components should behave given supplied test data.  Like Jest, Storybook can mount each component in isolation so you can focus your coding and testing.  The big difference is that Storybook is a visual tool: you see what the component looks like as you create your tests.  This article just touched the surface of what Storybook can do.  I encourage you to head to their website and explore further.</p>\n","site":{"data":{}},"excerpt":"<p>Creating and testing a UI should be visual.</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>In a previous article, I wrote about employing Jest and BDD to test a UI.  Jest is a powerful tool with a lot of primitives to structure UI testing.  However, it is not very intuitive. </p>\n<p>This caused me to search around in the React eco-system looking for a better tool.  I wanted to be able to see what I was building and develop the tests as I go.  Storybook is a very nice tool. It is NOT a visual construction framework.  It IS a visual way to structure tests. Let’s take the React app we wrote for the Graph ADT and rebuild it using Storybook.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Storybook is very easy to setup.  I will recommend 2 sites: the Storybook </p>\n<ul>\n<li><a href=\"https://storybook.js.org/\"> storybookjs.org </a> for how to install it; and </li>\n<li><a href=\"https://www.learnstorybook.com/react/en/get-started/\"> learn storybook </a> as a good tutorial.  </li>\n</ul>\n<p>This article will build on the “learn Storybook” material to build our graph adt consumer.  The original graph consumer and visualizer was very simple: it shows the graph as text with relationships show as indentions. This post will expand that a little to demo more of Storybook’s features.  I am not going too deeply into what Storybook can do.  </p>\n<p>Our previous article started by describing the Vertex and Edge data structures.  Vertex are used to hold information about entities in our system.  Things like the name, strength of a player and a list of what they were carrying.  Edges represent the relationships between the players.  In our example, relationships were one directional. The previous article then described the tests.  This is where this article will differ.  Let’s use Storybook to build the UI from the bottom up.</p>\n<h2 id=\"Testing-the-Adjacency-List\"><a href=\"#Testing-the-Adjacency-List\" class=\"headerlink\" title=\"Testing the Adjacency List\"></a>Testing the Adjacency List</h2><p>The lowest level aspect of the UI is to display a single relationship, a graph Edge.  A Graph Edge is an Object with a beginning and an end vertex.  A vertex is composed of a name, a strength (we’ll not worry about the list of carried items for now).  Let’s start by displaying the “end” of the relationship, the name.  In the Storybook UI, this would look like: </p>\n<p><img src=\"/images/ShowAdjacent_default.png\" alt=\"ShowAdjacent default view\"></p>\n<p>Not too interesting, just the name “Tom”.  The Storybook interface contains several components: on the left is a nav panel showing each of the “stories” in your project, on the right is a visual of the UI in test and in the lower right is the log.  In Storybook, you code stories for each test of your UI. Our first story is to simply show the UI.  Storybook setup specifies that you create a <strong>stories</strong> sub dir under your src dir.  I’m going to follow the Jest convention and name my story files like this: “ShowAdjacent.stories.js” and place them in the same dir as the file under test.  This implies we have to change Storybook’s default config a little.  When we loaded storybook into our environment (with npm i @storybook/cli and then ran getstorybook) it created a directory called .storybook.  This dir contains a config file.  Here is mine after I changed it:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; configure &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const req = require.context(&#x27;../src&#x27;, true, /.stories.js$/);</span><br><span class=\"line\"></span><br><span class=\"line\">function loadStories() &#123;</span><br><span class=\"line\">  req.keys().forEach(filename =&gt; req(filename));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">configure(loadStories, module);</span><br></pre></td></tr></table></figure>\n\n<p>The second line tells storybook to look in my src dir for files that fit the pattern “*.stories.js” and use those. My first stories file (ShowAdjacent.stories.js) looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowAdjacent from &#x27;./ShowAdjacent&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const adjacentList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;Jasper&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Storybook story files follow a pattern: they import needed files, define data types and then define the stories (tests).  In this case, we defined an adjacent list that has a valid beginning (“Jasper”) and end (“Tom”) vertex.  The “stories” section of the file defines the test: we called it “ShowAdjacent test” and used the .add primitive to define a test called default.  The default test just calls the ShowAdjacent React component and hands it props.  The next test that comes to mind is what happens if the adjacent list is malformed? Let’s build an adjacent list missing the name for the end of the relationship.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowAdjacent from &#x27;./ShowAdjacent&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export const adjacentList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;Jasper&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">export const empty_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &quot;&quot;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;undef name&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;undef_name&#125; /&gt;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this case, the app should not crash, yet it does! The problem is that the ShowAdjacent component does not handle the case of badly formed adjacency lists. We’ll have to refactor the code. The refactor is straight forward, we check to see if there is a name before we try and return the list item. Another test we should try here is to make sure the app gracefully handles no adjacency list. I’ll just show the data and the story case:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export const empty_adjacentList = []</span><br><span class=\"line\"></span><br><span class=\"line\">export const empty_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; name: &quot;&quot;, id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">export const undef_name = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        beginning: &#123; name: &quot;&quot;,  id: 0 &#125;,</span><br><span class=\"line\">        end: &#123; id: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowAdjacent test&#x27;, module)</span><br><span class=\"line\">  .add(&#x27;default&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;adjacentList&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;undef name&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;undef_name&#125; /&gt;)</span><br><span class=\"line\">  .add(&#x27;no data&#x27;, () =&gt; &lt;ShowAdjacent adjacentList=&#123;empty_adjacentList&#125; /&gt;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Testing-the-Graph\"><a href=\"#Testing-the-Graph\" class=\"headerlink\" title=\"Testing the Graph\"></a>Testing the Graph</h1><p>We have created and run some stories for testing the Adjacency list.  Let’s test the next component up, the graph.  The graph stories file follows the same pattern: import the files you need, setup some data, define the tests.  In our case, we’ll run 4 tests: </p>\n<ul>\n<li>a default graph</li>\n<li>an empty graph</li>\n<li>an adjacency list with several entries</li>\n<li>a graph with several vertex entries</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; storiesOf &#125; from &#x27;@storybook/react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowGraph from &#x27;./ShowGraph&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export const graph = &#123;</span><br><span class=\"line\">    Olivia: [ &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const longer_adjacent = &#123;</span><br><span class=\"line\">    Olivia: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Charlie&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const longer_graph = &#123;</span><br><span class=\"line\">    Olivia: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Jasper&quot;, id: 0 &#125;, end: &#123; name: &#x27;Tom&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Charlie&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    Tom: [</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Tom&quot;, id: 0 &#125;, end: &#123; name: &#x27;Ben&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">        &#123; beginning: &#123; name: &quot;Olivia&quot;, id: 0 &#125;, end: &#123; name: &#x27;Emma&#x27;, id: 1 &#125; &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const empty_graph = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">storiesOf(&#x27;ShowGraph&#x27;, module)</span><br><span class=\"line\">    .add(&#x27;default&#x27;, () =&gt; &lt;ShowGraph graph=&#123;graph&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;empty_graph&#x27;, () =&gt; &lt;ShowGraph graph=&#123;empty_graph&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;longer_adjacent&#x27;, () =&gt; &lt;ShowGraph graph=&#123;longer_adjacent&#125; /&gt;)</span><br><span class=\"line\">    .add(&#x27;longer_graph&#x27;, () =&gt; &lt;ShowGraph graph=&#123;longer_graph&#125; /&gt;)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>In each case, we call our ShowGraph component with the test data.  This paradigm presents a visual way to check to see if your component will pass basic sanity checks.  More intense development environments would require continuous integration and continuous deploy (CI/CD).  That is out of scope for this article. We are going to stay with visual testing. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We used Storybook as a visual way to create and test a set of React JS components. Storybook runs in the browser and presents different stories of how the UI components should behave given supplied test data.  Like Jest, Storybook can mount each component in isolation so you can focus your coding and testing.  The big difference is that Storybook is a visual tool: you see what the component looks like as you create your tests.  This article just touched the surface of what Storybook can do.  I encourage you to head to their website and explore further.</p>"},{"title":"Using Express to serve a React app","date":"2018-10-26T17:27:12.000Z","_content":"\n\nUse node Express to serve a React app\n<!-- more -->\n# Introduction\n\nThis article will describe how to setup node express to serve a React app.  We will reuse the React app created for the article [Creating a basic React map with Leaflet](https://github.com/muguira-james/toysoldiergolf).  The code for this article is [here](https://github.com/muguira-james/React-Express). The article has several parts: \n\n+ Getting a simple express server working on your computer\n+ Enhancing the React App to fetch data from a server\n\nThere are many tutorials on the web that describe the process of creating a React app.  There are also numerous articles that walk through creating apps with Express. The main contribution here will be demonstrating how to go from development to production with an existing React app.  The production version of the React app will be served by Express.\n\n## Setup Node and Express\n\nI advise you use Mozilla's great material to install Node [Mozilla MDM](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs).  I also advise you to follow the instructions for obtaining Node from the Node website.  You could use the package manager for your distribution or Brew for the Mac.  However, getting your code directly from the source is best.  Once nodeJS is installed installing Express is simply: \"npm install express -g\"\n\nThis article will build a couple of versions of the server. I'll do this to show how simple it is to use Express. The first version will just start a server and serve the React app as a static page.  We'll then add features to that version: very simple routing and a very simple DB.\n\n## First server\n\nUsing node + Express can be very simple.  Make a directory called simple_express and use \"cd simple_express; npm init\". Then add this 4-line program as simple_press.js:\n\n```\nvar express = require('express')\nvar app = express()\nvar port = 9000\n\napp.get('/', (request, response) => {\n    response.send(\"hello World\")\n})\n\napp.listen(port, () => {\n    console.log(`app listening on port ${port}`)\n})\n```\n\nThe first 2 lines pull in express (after you install it with npm install express -g) and create a variable to hold the reference.  The statement \"app.get\" sets up a route or a way to translate the url into something the server can return to the caller.  In this case, the browser url would be \"http://localhost:9000/\" and the server would return \"hello world\" as a string.  Express handles all setting of the headers.  We'll do more with that in a bit. The last statement (\"app.listen\") starts the server and waits on input from localhost port 9000.  If you point your server to localhost:9000 you should get \"hello world\" back.\n\nAt this point we could create complex html pages and serve them by adding more modules to Express.  But the article goal is to serve a React app.  How to do that?\n\nA React app created from the create-react-app command provides a number of \"canned\" scripts.  For example, we can start the app and show it in the default browser (npm start), we start the Jest test fixture (npm test) and we can have the built-in webpack bundle together our app in a build directory.  This bundled app will have the javascript code joined into a single file (or maybe 2 files, depending on your setup - we do a directory listing down below).  It will have all of the paths setup to run from a static path and the package.json file adjusted to run from a relative url.  Thus, the app is bundled together as a static uri resource.\n\nThis article will reuse the React app we wrote to use Leaflet in React [React + Leaflet](https://muguira-james.github.io/A-creating-basic-React-app-with-a-leaflet-map/). Issuing “npm start” from the command line can run the code.  It opens port 3000 on localhost.  Fro the browser point of view, the React app is just static content.  It is html and javascript and images.  So, we want Express to treat the React app as static content when a client requests the React App. However, the React app is setup to run from the create-react-app infrastructure.  We need to convert it to a static format for serving from our Express server.  To accomplish this we use \"npm run build\".  That command will create a build dir and add all of the required content.  We can copy the contents of the build dir to our Express server \"public\".  We are going to run the build step manually, but you might want to look into Jenkins to handle it automatically.\n\n### Setup Express for serving static content\n\nThe first thing we need to do is to tell Express how to serve static content, such as index.html files and images.  When you work with Express you have the ability to extend it by adding \"middle-ware\" that helps with adding functionality.  We are going to take advantage of a middle-ware that let's Express serve static information.  It is a single line that we add right before we setup our route:\n\n+ app.use(express.static('public'))\n\nIn Express, adding middle-ware happens \"in order\" and BEFORE you add routes and start the server.  In our case we will add a middle-ware to handle static content.  We'll point to the \"public\" directory and store all of our React bundled software there. The server now looks like:\n\n```\nvar express = require('express')\nvar app = express()\n\napp.use(express.static('public'))\n\napp.get('/', (request, response) => {\n    response.send(\"hello World\")\n})\n\napp.listen(3000, () => {\n    console.log(' app listening on port 3000')\n})\n```\n\nAfter we copy all of our bundled React app, from the build directory into the Express \"public\" directoy, our structure for the project looks like this:\n\n```\nasset-manifest.json\tfavicon.ico\t\tindex.html\t\tmanifest.json\t\tservice-worker.js\tstatic\n\npublic//static:\ncss\tjs\tmedia\n\npublic//static/css:\nmain.65027555.css\tmain.65027555.css.map\n\npublic//static/js:\nmain.c70caac9.js\tmain.c70caac9.js.map\n\npublic//static/media:\nHole1.813cb29b.png\t...\n\n```\n\nInspecting this you can see: a css, js and media directories under public. The \"npm build\" command gathered up all of the javascript, our source and the modules under node_modules and put them into the \"public/static/js\" dir. Since the React app has several image files they are saved into \"public/static/media\". If we run the server and point our browser at localhost:9000/index.html we see the following:\n\n![ProdReact.png](/images/ProdReact.png)\n \n## Our Second Server\n\nWe have created enough infrastructure to serve a static React app.  Express is using the static middle-ware to serve our React App. But, the data for the React app is defined in the React program.  Now, let's define it in the server and have the React App fetch it.\n\nThe first change is to define the server API in our server for the React app.  We can take the data out of the React app and place it in the server.  This will form a simple in-memory db.  Then we define the API using Express routes.  \n\n### Cross Origin Support (CORS)\n\nIf you look at the code for the server you will see 2 new items: CORS support and the data for the list players.  If you study the urls and ports in our application you will notice that we were careful to serve the React App from localhost on port 9000.  We were also careful to have the React App request data from localhost port 9000.  We defined a new API for the React App to get the data from: /api/players.  These definitions do not violate Cross Origin Resource Support, or CORS, rules.  \n\nA lot happens behind the scenes when a browser asks for a web page.  When a browser first asks for a web page it sends a small message to the server called a \"pre-flight message\".  The web server checks this message, specifically the headers, to see if the requesting host and ports match its own.  If they do, the web server sends back a positive acknowledgement to the requesting client and the browser continuous to load the requested page.  If not the web server checks to see if it has had CORS enabled.  If this is true, it will send back a positive acknowledgement anyway to let the browser proceed.  If CORS is not enabled the server sends back a negative acknowledgement and the browser reports the error in the console.\n\nWe can test this out in our current setup.  Here is the full server code so far\n\n```javascript=\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar port = 9000\n\n// as you can see from this structure the players are on hole {1, 2, 3, 4}\nconst players = {\n    graph: [\n    {FirstName: \"Joan\", LastName: \"Jet\", ID: 1, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Ruth\", LastName: \"Crist\", ID: 2, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Beth\", LastName: \"Flick\", ID: 3, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Julie\", LastName: \"Ant\", ID: 4, Hole: 1, HoleLocation: \"FWY\"},\n    {FirstName: \"Ginny\", LastName: \"Grey\", ID: 5, Hole: 1, HoleLocation: \"FWY\"},\n    {FirstName: \"Paula\", LastName: \"Lamb\", ID: 6, Hole: 1, HoleLocation: \"GRN\"},\n    {FirstName: \"Ingid\", LastName: \"Jones\", ID: 7, Hole: 2, HoleLocation: \"TEE\"},\n    {FirstName: \"Kelly\", LastName: \"Smith\", ID: 8, Hole: 2, HoleLocation: \"FWY\"},\n    {FirstName: \"Eilean\", LastName: \"Rams\", ID: 9, Hole: 2, HoleLocation: \"GRN\"},\n    {FirstName: \"Barb\", LastName: \"Sharp\", ID: 10, Hole: 4, HoleLocation: \"FWY\"},\n    {FirstName: \"Carol\", LastName: \"Adams\", ID: 11, Hole: 4, HoleLocation: \"FWY\"},\n    {FirstName: \"Faith\", LastName: \"Hope\", ID: 12, Hole: 4, HoleLocation: \"GRN\"}\n  ]\n}\n\napp.use(cors())\n\napp.use(express.static('public'))\n\napp.get('/api/players', (request, response) => {\n    // console.log(\"players...\", JSON.stringify(players))\n    response.setHeader('Content-Type', 'application/json');\n    response.send(JSON.stringify(players))\n})\n\napp.listen(9000, () => {\n    console.log(`app listening on port ${port}`)\n})\n```\n\nNotice lines: 2, 25.  Line 2 brings in the CORS support and line 25 enables the middle-ware.  If you comment out line 25 and run the React App from its original directory with npm start, you should see a failure message on the browser console log.  The reason for the failure is that the React app is being served from a server running on localhost port 3000 (by default from create-react-app) and our Express server is running on localhost port 9000.  That is a cross origin violation.  Now uncomment line 25 in the Express server and restart it.  If you refresh the \"React App\" tab in your browser, you should see the map.\n\nIf you consider lines 7-23 of the Express server you will see the in-memory database.  These player definitions are served to callers on line 33 of the Express server.\n\nWhat does the React App look like?  The original app had the data defined in the code.  We changed that to use javascript fetch in a React lifecycle method.  React's componentDidMount lifcycle method is called after the component mounts (or, is initialized and attached to the browser DOM). In our new overide of componentDidMount, we fetch our data and place it in state.\n\n```\nimport React from 'react';\n\nimport ShowMap from './ShowMap'\n\nvar golfCourse = require('./indy.json')\n\nexport default class SimpleExample extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      playerList: null,\n    }\n  }\n  // // use javascript fetch to get the graph from the server\n  componentDidMount() {\n    let url = 'http://localhost:9000/api/players'\n\n    // just fetch, no error handling here!\n    // when the fetch completes, put the graph in \"state\"\n    fetch(url)\n      .then(resp => { return resp.json() })\n      .then((resp) => {\n        this.setState({ playerList: resp.graph })\n      })\n\n  }\n\n  render() {\n    if (this.state.playerList !== null) {\n      return (\n        <ShowMap golfCourse={golfCourse} listOfPlayers={this.state.playerList} />\n      );\n    } else {\n      return null\n    }\n\n  }\n}\n```\n\n# Conclusion\n\nWe reused a React app and showed how to create an Express server to serve both the React app and content.  Very little changed in the React.  We:\n\n+ Moved the data used to draw the toy soldiers out of the app and into our Express server\n+ We used javascript fetch to get data from the server\n+ We used npm run build to set the React app up as static content\n\nOn the server side, we:\n\n+ Created a very simple server and set it up to serve static content using the built-in middle-ware \"static\".\n+ Created a 'public' directory and copied the React app build into it\n+ Created an api (\"/api/players\") to serve data to the React app.\n\nExpress is very flexible.  It has a broad eco-system with many supported middle-ware definitions.  These can be used to create a very wide varity of web serve instances.\n","source":"_posts/2018-10-25-Using-Express-to-serve-a-React-JS-app.md","raw":"---\ntitle: Using Express to serve a React app\ntags:\n  - Node\n  - Express\n  - React\n  - MongoDB\ncategories:\n  - Programming\ndate: 2018-10-26 13:27:12\n---\n\n\nUse node Express to serve a React app\n<!-- more -->\n# Introduction\n\nThis article will describe how to setup node express to serve a React app.  We will reuse the React app created for the article [Creating a basic React map with Leaflet](https://github.com/muguira-james/toysoldiergolf).  The code for this article is [here](https://github.com/muguira-james/React-Express). The article has several parts: \n\n+ Getting a simple express server working on your computer\n+ Enhancing the React App to fetch data from a server\n\nThere are many tutorials on the web that describe the process of creating a React app.  There are also numerous articles that walk through creating apps with Express. The main contribution here will be demonstrating how to go from development to production with an existing React app.  The production version of the React app will be served by Express.\n\n## Setup Node and Express\n\nI advise you use Mozilla's great material to install Node [Mozilla MDM](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs).  I also advise you to follow the instructions for obtaining Node from the Node website.  You could use the package manager for your distribution or Brew for the Mac.  However, getting your code directly from the source is best.  Once nodeJS is installed installing Express is simply: \"npm install express -g\"\n\nThis article will build a couple of versions of the server. I'll do this to show how simple it is to use Express. The first version will just start a server and serve the React app as a static page.  We'll then add features to that version: very simple routing and a very simple DB.\n\n## First server\n\nUsing node + Express can be very simple.  Make a directory called simple_express and use \"cd simple_express; npm init\". Then add this 4-line program as simple_press.js:\n\n```\nvar express = require('express')\nvar app = express()\nvar port = 9000\n\napp.get('/', (request, response) => {\n    response.send(\"hello World\")\n})\n\napp.listen(port, () => {\n    console.log(`app listening on port ${port}`)\n})\n```\n\nThe first 2 lines pull in express (after you install it with npm install express -g) and create a variable to hold the reference.  The statement \"app.get\" sets up a route or a way to translate the url into something the server can return to the caller.  In this case, the browser url would be \"http://localhost:9000/\" and the server would return \"hello world\" as a string.  Express handles all setting of the headers.  We'll do more with that in a bit. The last statement (\"app.listen\") starts the server and waits on input from localhost port 9000.  If you point your server to localhost:9000 you should get \"hello world\" back.\n\nAt this point we could create complex html pages and serve them by adding more modules to Express.  But the article goal is to serve a React app.  How to do that?\n\nA React app created from the create-react-app command provides a number of \"canned\" scripts.  For example, we can start the app and show it in the default browser (npm start), we start the Jest test fixture (npm test) and we can have the built-in webpack bundle together our app in a build directory.  This bundled app will have the javascript code joined into a single file (or maybe 2 files, depending on your setup - we do a directory listing down below).  It will have all of the paths setup to run from a static path and the package.json file adjusted to run from a relative url.  Thus, the app is bundled together as a static uri resource.\n\nThis article will reuse the React app we wrote to use Leaflet in React [React + Leaflet](https://muguira-james.github.io/A-creating-basic-React-app-with-a-leaflet-map/). Issuing “npm start” from the command line can run the code.  It opens port 3000 on localhost.  Fro the browser point of view, the React app is just static content.  It is html and javascript and images.  So, we want Express to treat the React app as static content when a client requests the React App. However, the React app is setup to run from the create-react-app infrastructure.  We need to convert it to a static format for serving from our Express server.  To accomplish this we use \"npm run build\".  That command will create a build dir and add all of the required content.  We can copy the contents of the build dir to our Express server \"public\".  We are going to run the build step manually, but you might want to look into Jenkins to handle it automatically.\n\n### Setup Express for serving static content\n\nThe first thing we need to do is to tell Express how to serve static content, such as index.html files and images.  When you work with Express you have the ability to extend it by adding \"middle-ware\" that helps with adding functionality.  We are going to take advantage of a middle-ware that let's Express serve static information.  It is a single line that we add right before we setup our route:\n\n+ app.use(express.static('public'))\n\nIn Express, adding middle-ware happens \"in order\" and BEFORE you add routes and start the server.  In our case we will add a middle-ware to handle static content.  We'll point to the \"public\" directory and store all of our React bundled software there. The server now looks like:\n\n```\nvar express = require('express')\nvar app = express()\n\napp.use(express.static('public'))\n\napp.get('/', (request, response) => {\n    response.send(\"hello World\")\n})\n\napp.listen(3000, () => {\n    console.log(' app listening on port 3000')\n})\n```\n\nAfter we copy all of our bundled React app, from the build directory into the Express \"public\" directoy, our structure for the project looks like this:\n\n```\nasset-manifest.json\tfavicon.ico\t\tindex.html\t\tmanifest.json\t\tservice-worker.js\tstatic\n\npublic//static:\ncss\tjs\tmedia\n\npublic//static/css:\nmain.65027555.css\tmain.65027555.css.map\n\npublic//static/js:\nmain.c70caac9.js\tmain.c70caac9.js.map\n\npublic//static/media:\nHole1.813cb29b.png\t...\n\n```\n\nInspecting this you can see: a css, js and media directories under public. The \"npm build\" command gathered up all of the javascript, our source and the modules under node_modules and put them into the \"public/static/js\" dir. Since the React app has several image files they are saved into \"public/static/media\". If we run the server and point our browser at localhost:9000/index.html we see the following:\n\n![ProdReact.png](/images/ProdReact.png)\n \n## Our Second Server\n\nWe have created enough infrastructure to serve a static React app.  Express is using the static middle-ware to serve our React App. But, the data for the React app is defined in the React program.  Now, let's define it in the server and have the React App fetch it.\n\nThe first change is to define the server API in our server for the React app.  We can take the data out of the React app and place it in the server.  This will form a simple in-memory db.  Then we define the API using Express routes.  \n\n### Cross Origin Support (CORS)\n\nIf you look at the code for the server you will see 2 new items: CORS support and the data for the list players.  If you study the urls and ports in our application you will notice that we were careful to serve the React App from localhost on port 9000.  We were also careful to have the React App request data from localhost port 9000.  We defined a new API for the React App to get the data from: /api/players.  These definitions do not violate Cross Origin Resource Support, or CORS, rules.  \n\nA lot happens behind the scenes when a browser asks for a web page.  When a browser first asks for a web page it sends a small message to the server called a \"pre-flight message\".  The web server checks this message, specifically the headers, to see if the requesting host and ports match its own.  If they do, the web server sends back a positive acknowledgement to the requesting client and the browser continuous to load the requested page.  If not the web server checks to see if it has had CORS enabled.  If this is true, it will send back a positive acknowledgement anyway to let the browser proceed.  If CORS is not enabled the server sends back a negative acknowledgement and the browser reports the error in the console.\n\nWe can test this out in our current setup.  Here is the full server code so far\n\n```javascript=\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar port = 9000\n\n// as you can see from this structure the players are on hole {1, 2, 3, 4}\nconst players = {\n    graph: [\n    {FirstName: \"Joan\", LastName: \"Jet\", ID: 1, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Ruth\", LastName: \"Crist\", ID: 2, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Beth\", LastName: \"Flick\", ID: 3, Hole: 1, HoleLocation: \"TEE\"},\n    {FirstName: \"Julie\", LastName: \"Ant\", ID: 4, Hole: 1, HoleLocation: \"FWY\"},\n    {FirstName: \"Ginny\", LastName: \"Grey\", ID: 5, Hole: 1, HoleLocation: \"FWY\"},\n    {FirstName: \"Paula\", LastName: \"Lamb\", ID: 6, Hole: 1, HoleLocation: \"GRN\"},\n    {FirstName: \"Ingid\", LastName: \"Jones\", ID: 7, Hole: 2, HoleLocation: \"TEE\"},\n    {FirstName: \"Kelly\", LastName: \"Smith\", ID: 8, Hole: 2, HoleLocation: \"FWY\"},\n    {FirstName: \"Eilean\", LastName: \"Rams\", ID: 9, Hole: 2, HoleLocation: \"GRN\"},\n    {FirstName: \"Barb\", LastName: \"Sharp\", ID: 10, Hole: 4, HoleLocation: \"FWY\"},\n    {FirstName: \"Carol\", LastName: \"Adams\", ID: 11, Hole: 4, HoleLocation: \"FWY\"},\n    {FirstName: \"Faith\", LastName: \"Hope\", ID: 12, Hole: 4, HoleLocation: \"GRN\"}\n  ]\n}\n\napp.use(cors())\n\napp.use(express.static('public'))\n\napp.get('/api/players', (request, response) => {\n    // console.log(\"players...\", JSON.stringify(players))\n    response.setHeader('Content-Type', 'application/json');\n    response.send(JSON.stringify(players))\n})\n\napp.listen(9000, () => {\n    console.log(`app listening on port ${port}`)\n})\n```\n\nNotice lines: 2, 25.  Line 2 brings in the CORS support and line 25 enables the middle-ware.  If you comment out line 25 and run the React App from its original directory with npm start, you should see a failure message on the browser console log.  The reason for the failure is that the React app is being served from a server running on localhost port 3000 (by default from create-react-app) and our Express server is running on localhost port 9000.  That is a cross origin violation.  Now uncomment line 25 in the Express server and restart it.  If you refresh the \"React App\" tab in your browser, you should see the map.\n\nIf you consider lines 7-23 of the Express server you will see the in-memory database.  These player definitions are served to callers on line 33 of the Express server.\n\nWhat does the React App look like?  The original app had the data defined in the code.  We changed that to use javascript fetch in a React lifecycle method.  React's componentDidMount lifcycle method is called after the component mounts (or, is initialized and attached to the browser DOM). In our new overide of componentDidMount, we fetch our data and place it in state.\n\n```\nimport React from 'react';\n\nimport ShowMap from './ShowMap'\n\nvar golfCourse = require('./indy.json')\n\nexport default class SimpleExample extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      playerList: null,\n    }\n  }\n  // // use javascript fetch to get the graph from the server\n  componentDidMount() {\n    let url = 'http://localhost:9000/api/players'\n\n    // just fetch, no error handling here!\n    // when the fetch completes, put the graph in \"state\"\n    fetch(url)\n      .then(resp => { return resp.json() })\n      .then((resp) => {\n        this.setState({ playerList: resp.graph })\n      })\n\n  }\n\n  render() {\n    if (this.state.playerList !== null) {\n      return (\n        <ShowMap golfCourse={golfCourse} listOfPlayers={this.state.playerList} />\n      );\n    } else {\n      return null\n    }\n\n  }\n}\n```\n\n# Conclusion\n\nWe reused a React app and showed how to create an Express server to serve both the React app and content.  Very little changed in the React.  We:\n\n+ Moved the data used to draw the toy soldiers out of the app and into our Express server\n+ We used javascript fetch to get data from the server\n+ We used npm run build to set the React app up as static content\n\nOn the server side, we:\n\n+ Created a very simple server and set it up to serve static content using the built-in middle-ware \"static\".\n+ Created a 'public' directory and copied the React app build into it\n+ Created an api (\"/api/players\") to serve data to the React app.\n\nExpress is very flexible.  It has a broad eco-system with many supported middle-ware definitions.  These can be used to create a very wide varity of web serve instances.\n","slug":"2018-10-25-Using-Express-to-serve-a-React-JS-app","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0am000oi7e8f2cy7n9w","content":"<p>Use node Express to serve a React app</p>\n<span id=\"more\"></span>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This article will describe how to setup node express to serve a React app.  We will reuse the React app created for the article <a href=\"https://github.com/muguira-james/toysoldiergolf\">Creating a basic React map with Leaflet</a>.  The code for this article is <a href=\"https://github.com/muguira-james/React-Express\">here</a>. The article has several parts: </p>\n<ul>\n<li>Getting a simple express server working on your computer</li>\n<li>Enhancing the React App to fetch data from a server</li>\n</ul>\n<p>There are many tutorials on the web that describe the process of creating a React app.  There are also numerous articles that walk through creating apps with Express. The main contribution here will be demonstrating how to go from development to production with an existing React app.  The production version of the React app will be served by Express.</p>\n<h2 id=\"Setup-Node-and-Express\"><a href=\"#Setup-Node-and-Express\" class=\"headerlink\" title=\"Setup Node and Express\"></a>Setup Node and Express</h2><p>I advise you use Mozilla’s great material to install Node <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs\">Mozilla MDM</a>.  I also advise you to follow the instructions for obtaining Node from the Node website.  You could use the package manager for your distribution or Brew for the Mac.  However, getting your code directly from the source is best.  Once nodeJS is installed installing Express is simply: “npm install express -g”</p>\n<p>This article will build a couple of versions of the server. I’ll do this to show how simple it is to use Express. The first version will just start a server and serve the React app as a static page.  We’ll then add features to that version: very simple routing and a very simple DB.</p>\n<h2 id=\"First-server\"><a href=\"#First-server\" class=\"headerlink\" title=\"First server\"></a>First server</h2><p>Using node + Express can be very simple.  Make a directory called simple_express and use “cd simple_express; npm init”. Then add this 4-line program as simple_press.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&#x27;express&#x27;)</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\">var port = 9000</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class=\"line\">    response.send(&quot;hello World&quot;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`app listening on port $&#123;port&#125;`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>The first 2 lines pull in express (after you install it with npm install express -g) and create a variable to hold the reference.  The statement “app.get” sets up a route or a way to translate the url into something the server can return to the caller.  In this case, the browser url would be “<a href=\"http://localhost:9000/&quot;\">http://localhost:9000/&quot;</a> and the server would return “hello world” as a string.  Express handles all setting of the headers.  We’ll do more with that in a bit. The last statement (“app.listen”) starts the server and waits on input from localhost port 9000.  If you point your server to localhost:9000 you should get “hello world” back.</p>\n<p>At this point we could create complex html pages and serve them by adding more modules to Express.  But the article goal is to serve a React app.  How to do that?</p>\n<p>A React app created from the create-react-app command provides a number of “canned” scripts.  For example, we can start the app and show it in the default browser (npm start), we start the Jest test fixture (npm test) and we can have the built-in webpack bundle together our app in a build directory.  This bundled app will have the javascript code joined into a single file (or maybe 2 files, depending on your setup - we do a directory listing down below).  It will have all of the paths setup to run from a static path and the package.json file adjusted to run from a relative url.  Thus, the app is bundled together as a static uri resource.</p>\n<p>This article will reuse the React app we wrote to use Leaflet in React <a href=\"https://muguira-james.github.io/A-creating-basic-React-app-with-a-leaflet-map/\">React + Leaflet</a>. Issuing “npm start” from the command line can run the code.  It opens port 3000 on localhost.  Fro the browser point of view, the React app is just static content.  It is html and javascript and images.  So, we want Express to treat the React app as static content when a client requests the React App. However, the React app is setup to run from the create-react-app infrastructure.  We need to convert it to a static format for serving from our Express server.  To accomplish this we use “npm run build”.  That command will create a build dir and add all of the required content.  We can copy the contents of the build dir to our Express server “public”.  We are going to run the build step manually, but you might want to look into Jenkins to handle it automatically.</p>\n<h3 id=\"Setup-Express-for-serving-static-content\"><a href=\"#Setup-Express-for-serving-static-content\" class=\"headerlink\" title=\"Setup Express for serving static content\"></a>Setup Express for serving static content</h3><p>The first thing we need to do is to tell Express how to serve static content, such as index.html files and images.  When you work with Express you have the ability to extend it by adding “middle-ware” that helps with adding functionality.  We are going to take advantage of a middle-ware that let’s Express serve static information.  It is a single line that we add right before we setup our route:</p>\n<ul>\n<li>app.use(express.static(‘public’))</li>\n</ul>\n<p>In Express, adding middle-ware happens “in order” and BEFORE you add routes and start the server.  In our case we will add a middle-ware to handle static content.  We’ll point to the “public” directory and store all of our React bundled software there. The server now looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&#x27;express&#x27;)</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(&#x27;public&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class=\"line\">    response.send(&quot;hello World&quot;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27; app listening on port 3000&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>After we copy all of our bundled React app, from the build directory into the Express “public” directoy, our structure for the project looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asset-manifest.json\tfavicon.ico\t\tindex.html\t\tmanifest.json\t\tservice-worker.js\tstatic</span><br><span class=\"line\"></span><br><span class=\"line\">public//static:</span><br><span class=\"line\">css\tjs\tmedia</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/css:</span><br><span class=\"line\">main.65027555.css\tmain.65027555.css.map</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/js:</span><br><span class=\"line\">main.c70caac9.js\tmain.c70caac9.js.map</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/media:</span><br><span class=\"line\">Hole1.813cb29b.png\t...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Inspecting this you can see: a css, js and media directories under public. The “npm build” command gathered up all of the javascript, our source and the modules under node_modules and put them into the “public/static/js” dir. Since the React app has several image files they are saved into “public/static/media”. If we run the server and point our browser at localhost:9000/index.html we see the following:</p>\n<p><img src=\"/images/ProdReact.png\" alt=\"ProdReact.png\"></p>\n<h2 id=\"Our-Second-Server\"><a href=\"#Our-Second-Server\" class=\"headerlink\" title=\"Our Second Server\"></a>Our Second Server</h2><p>We have created enough infrastructure to serve a static React app.  Express is using the static middle-ware to serve our React App. But, the data for the React app is defined in the React program.  Now, let’s define it in the server and have the React App fetch it.</p>\n<p>The first change is to define the server API in our server for the React app.  We can take the data out of the React app and place it in the server.  This will form a simple in-memory db.  Then we define the API using Express routes.  </p>\n<h3 id=\"Cross-Origin-Support-CORS\"><a href=\"#Cross-Origin-Support-CORS\" class=\"headerlink\" title=\"Cross Origin Support (CORS)\"></a>Cross Origin Support (CORS)</h3><p>If you look at the code for the server you will see 2 new items: CORS support and the data for the list players.  If you study the urls and ports in our application you will notice that we were careful to serve the React App from localhost on port 9000.  We were also careful to have the React App request data from localhost port 9000.  We defined a new API for the React App to get the data from: /api/players.  These definitions do not violate Cross Origin Resource Support, or CORS, rules.  </p>\n<p>A lot happens behind the scenes when a browser asks for a web page.  When a browser first asks for a web page it sends a small message to the server called a “pre-flight message”.  The web server checks this message, specifically the headers, to see if the requesting host and ports match its own.  If they do, the web server sends back a positive acknowledgement to the requesting client and the browser continuous to load the requested page.  If not the web server checks to see if it has had CORS enabled.  If this is true, it will send back a positive acknowledgement anyway to let the browser proceed.  If CORS is not enabled the server sends back a negative acknowledgement and the browser reports the error in the console.</p>\n<p>We can test this out in our current setup.  Here is the full server code so far</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cors&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">9000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// as you can see from this structure the players are on hole &#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> players = &#123;</span><br><span class=\"line\">    <span class=\"attr\">graph</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Joan&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Jet&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">1</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ruth&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Crist&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">2</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Beth&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Flick&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">3</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Julie&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Ant&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">4</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ginny&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Grey&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">5</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Paula&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Lamb&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">6</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ingid&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Jones&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">7</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Kelly&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Smith&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">8</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Eilean&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Rams&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">9</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Barb&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Sharp&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">10</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Carol&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Adams&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">11</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Faith&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Hope&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">12</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cors())</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/api/players&#x27;</span>, <span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;players...&quot;, JSON.stringify(players))</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">    response.send(<span class=\"built_in\">JSON</span>.stringify(players))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">9000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`app listening on port <span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Notice lines: 2, 25.  Line 2 brings in the CORS support and line 25 enables the middle-ware.  If you comment out line 25 and run the React App from its original directory with npm start, you should see a failure message on the browser console log.  The reason for the failure is that the React app is being served from a server running on localhost port 3000 (by default from create-react-app) and our Express server is running on localhost port 9000.  That is a cross origin violation.  Now uncomment line 25 in the Express server and restart it.  If you refresh the “React App” tab in your browser, you should see the map.</p>\n<p>If you consider lines 7-23 of the Express server you will see the in-memory database.  These player definitions are served to callers on line 33 of the Express server.</p>\n<p>What does the React App look like?  The original app had the data defined in the code.  We changed that to use javascript fetch in a React lifecycle method.  React’s componentDidMount lifcycle method is called after the component mounts (or, is initialized and attached to the browser DOM). In our new overide of componentDidMount, we fetch our data and place it in state.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowMap from &#x27;./ShowMap&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var golfCourse = require(&#x27;./indy.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default class SimpleExample extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      playerList: null,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // // use javascript fetch to get the graph from the server</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    let url = &#x27;http://localhost:9000/api/players&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    // just fetch, no error handling here!</span><br><span class=\"line\">    // when the fetch completes, put the graph in &quot;state&quot;</span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(resp =&gt; &#123; return resp.json() &#125;)</span><br><span class=\"line\">      .then((resp) =&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123; playerList: resp.graph &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if (this.state.playerList !== null) &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;ShowMap golfCourse=&#123;golfCourse&#125; listOfPlayers=&#123;this.state.playerList&#125; /&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We reused a React app and showed how to create an Express server to serve both the React app and content.  Very little changed in the React.  We:</p>\n<ul>\n<li>Moved the data used to draw the toy soldiers out of the app and into our Express server</li>\n<li>We used javascript fetch to get data from the server</li>\n<li>We used npm run build to set the React app up as static content</li>\n</ul>\n<p>On the server side, we:</p>\n<ul>\n<li>Created a very simple server and set it up to serve static content using the built-in middle-ware “static”.</li>\n<li>Created a ‘public’ directory and copied the React app build into it</li>\n<li>Created an api (“/api/players”) to serve data to the React app.</li>\n</ul>\n<p>Express is very flexible.  It has a broad eco-system with many supported middle-ware definitions.  These can be used to create a very wide varity of web serve instances.</p>\n","site":{"data":{}},"excerpt":"<p>Use node Express to serve a React app</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This article will describe how to setup node express to serve a React app.  We will reuse the React app created for the article <a href=\"https://github.com/muguira-james/toysoldiergolf\">Creating a basic React map with Leaflet</a>.  The code for this article is <a href=\"https://github.com/muguira-james/React-Express\">here</a>. The article has several parts: </p>\n<ul>\n<li>Getting a simple express server working on your computer</li>\n<li>Enhancing the React App to fetch data from a server</li>\n</ul>\n<p>There are many tutorials on the web that describe the process of creating a React app.  There are also numerous articles that walk through creating apps with Express. The main contribution here will be demonstrating how to go from development to production with an existing React app.  The production version of the React app will be served by Express.</p>\n<h2 id=\"Setup-Node-and-Express\"><a href=\"#Setup-Node-and-Express\" class=\"headerlink\" title=\"Setup Node and Express\"></a>Setup Node and Express</h2><p>I advise you use Mozilla’s great material to install Node <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs\">Mozilla MDM</a>.  I also advise you to follow the instructions for obtaining Node from the Node website.  You could use the package manager for your distribution or Brew for the Mac.  However, getting your code directly from the source is best.  Once nodeJS is installed installing Express is simply: “npm install express -g”</p>\n<p>This article will build a couple of versions of the server. I’ll do this to show how simple it is to use Express. The first version will just start a server and serve the React app as a static page.  We’ll then add features to that version: very simple routing and a very simple DB.</p>\n<h2 id=\"First-server\"><a href=\"#First-server\" class=\"headerlink\" title=\"First server\"></a>First server</h2><p>Using node + Express can be very simple.  Make a directory called simple_express and use “cd simple_express; npm init”. Then add this 4-line program as simple_press.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&#x27;express&#x27;)</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\">var port = 9000</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class=\"line\">    response.send(&quot;hello World&quot;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`app listening on port $&#123;port&#125;`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>The first 2 lines pull in express (after you install it with npm install express -g) and create a variable to hold the reference.  The statement “app.get” sets up a route or a way to translate the url into something the server can return to the caller.  In this case, the browser url would be “<a href=\"http://localhost:9000/&quot;\">http://localhost:9000/&quot;</a> and the server would return “hello world” as a string.  Express handles all setting of the headers.  We’ll do more with that in a bit. The last statement (“app.listen”) starts the server and waits on input from localhost port 9000.  If you point your server to localhost:9000 you should get “hello world” back.</p>\n<p>At this point we could create complex html pages and serve them by adding more modules to Express.  But the article goal is to serve a React app.  How to do that?</p>\n<p>A React app created from the create-react-app command provides a number of “canned” scripts.  For example, we can start the app and show it in the default browser (npm start), we start the Jest test fixture (npm test) and we can have the built-in webpack bundle together our app in a build directory.  This bundled app will have the javascript code joined into a single file (or maybe 2 files, depending on your setup - we do a directory listing down below).  It will have all of the paths setup to run from a static path and the package.json file adjusted to run from a relative url.  Thus, the app is bundled together as a static uri resource.</p>\n<p>This article will reuse the React app we wrote to use Leaflet in React <a href=\"https://muguira-james.github.io/A-creating-basic-React-app-with-a-leaflet-map/\">React + Leaflet</a>. Issuing “npm start” from the command line can run the code.  It opens port 3000 on localhost.  Fro the browser point of view, the React app is just static content.  It is html and javascript and images.  So, we want Express to treat the React app as static content when a client requests the React App. However, the React app is setup to run from the create-react-app infrastructure.  We need to convert it to a static format for serving from our Express server.  To accomplish this we use “npm run build”.  That command will create a build dir and add all of the required content.  We can copy the contents of the build dir to our Express server “public”.  We are going to run the build step manually, but you might want to look into Jenkins to handle it automatically.</p>\n<h3 id=\"Setup-Express-for-serving-static-content\"><a href=\"#Setup-Express-for-serving-static-content\" class=\"headerlink\" title=\"Setup Express for serving static content\"></a>Setup Express for serving static content</h3><p>The first thing we need to do is to tell Express how to serve static content, such as index.html files and images.  When you work with Express you have the ability to extend it by adding “middle-ware” that helps with adding functionality.  We are going to take advantage of a middle-ware that let’s Express serve static information.  It is a single line that we add right before we setup our route:</p>\n<ul>\n<li>app.use(express.static(‘public’))</li>\n</ul>\n<p>In Express, adding middle-ware happens “in order” and BEFORE you add routes and start the server.  In our case we will add a middle-ware to handle static content.  We’ll point to the “public” directory and store all of our React bundled software there. The server now looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&#x27;express&#x27;)</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(&#x27;public&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class=\"line\">    response.send(&quot;hello World&quot;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27; app listening on port 3000&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>After we copy all of our bundled React app, from the build directory into the Express “public” directoy, our structure for the project looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asset-manifest.json\tfavicon.ico\t\tindex.html\t\tmanifest.json\t\tservice-worker.js\tstatic</span><br><span class=\"line\"></span><br><span class=\"line\">public//static:</span><br><span class=\"line\">css\tjs\tmedia</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/css:</span><br><span class=\"line\">main.65027555.css\tmain.65027555.css.map</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/js:</span><br><span class=\"line\">main.c70caac9.js\tmain.c70caac9.js.map</span><br><span class=\"line\"></span><br><span class=\"line\">public//static/media:</span><br><span class=\"line\">Hole1.813cb29b.png\t...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Inspecting this you can see: a css, js and media directories under public. The “npm build” command gathered up all of the javascript, our source and the modules under node_modules and put them into the “public/static/js” dir. Since the React app has several image files they are saved into “public/static/media”. If we run the server and point our browser at localhost:9000/index.html we see the following:</p>\n<p><img src=\"/images/ProdReact.png\" alt=\"ProdReact.png\"></p>\n<h2 id=\"Our-Second-Server\"><a href=\"#Our-Second-Server\" class=\"headerlink\" title=\"Our Second Server\"></a>Our Second Server</h2><p>We have created enough infrastructure to serve a static React app.  Express is using the static middle-ware to serve our React App. But, the data for the React app is defined in the React program.  Now, let’s define it in the server and have the React App fetch it.</p>\n<p>The first change is to define the server API in our server for the React app.  We can take the data out of the React app and place it in the server.  This will form a simple in-memory db.  Then we define the API using Express routes.  </p>\n<h3 id=\"Cross-Origin-Support-CORS\"><a href=\"#Cross-Origin-Support-CORS\" class=\"headerlink\" title=\"Cross Origin Support (CORS)\"></a>Cross Origin Support (CORS)</h3><p>If you look at the code for the server you will see 2 new items: CORS support and the data for the list players.  If you study the urls and ports in our application you will notice that we were careful to serve the React App from localhost on port 9000.  We were also careful to have the React App request data from localhost port 9000.  We defined a new API for the React App to get the data from: /api/players.  These definitions do not violate Cross Origin Resource Support, or CORS, rules.  </p>\n<p>A lot happens behind the scenes when a browser asks for a web page.  When a browser first asks for a web page it sends a small message to the server called a “pre-flight message”.  The web server checks this message, specifically the headers, to see if the requesting host and ports match its own.  If they do, the web server sends back a positive acknowledgement to the requesting client and the browser continuous to load the requested page.  If not the web server checks to see if it has had CORS enabled.  If this is true, it will send back a positive acknowledgement anyway to let the browser proceed.  If CORS is not enabled the server sends back a negative acknowledgement and the browser reports the error in the console.</p>\n<p>We can test this out in our current setup.  Here is the full server code so far</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cors&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">9000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// as you can see from this structure the players are on hole &#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> players = &#123;</span><br><span class=\"line\">    <span class=\"attr\">graph</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Joan&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Jet&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">1</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ruth&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Crist&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">2</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Beth&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Flick&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">3</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Julie&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Ant&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">4</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ginny&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Grey&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">5</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Paula&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Lamb&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">6</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">1</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Ingid&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Jones&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">7</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;TEE&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Kelly&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Smith&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">8</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Eilean&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Rams&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">9</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">2</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Barb&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Sharp&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">10</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Carol&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Adams&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">11</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;FWY&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">FirstName</span>: <span class=\"string\">&quot;Faith&quot;</span>, <span class=\"attr\">LastName</span>: <span class=\"string\">&quot;Hope&quot;</span>, <span class=\"attr\">ID</span>: <span class=\"number\">12</span>, <span class=\"attr\">Hole</span>: <span class=\"number\">4</span>, <span class=\"attr\">HoleLocation</span>: <span class=\"string\">&quot;GRN&quot;</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cors())</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/api/players&#x27;</span>, <span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;players...&quot;, JSON.stringify(players))</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">    response.send(<span class=\"built_in\">JSON</span>.stringify(players))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">9000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`app listening on port <span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Notice lines: 2, 25.  Line 2 brings in the CORS support and line 25 enables the middle-ware.  If you comment out line 25 and run the React App from its original directory with npm start, you should see a failure message on the browser console log.  The reason for the failure is that the React app is being served from a server running on localhost port 3000 (by default from create-react-app) and our Express server is running on localhost port 9000.  That is a cross origin violation.  Now uncomment line 25 in the Express server and restart it.  If you refresh the “React App” tab in your browser, you should see the map.</p>\n<p>If you consider lines 7-23 of the Express server you will see the in-memory database.  These player definitions are served to callers on line 33 of the Express server.</p>\n<p>What does the React App look like?  The original app had the data defined in the code.  We changed that to use javascript fetch in a React lifecycle method.  React’s componentDidMount lifcycle method is called after the component mounts (or, is initialized and attached to the browser DOM). In our new overide of componentDidMount, we fetch our data and place it in state.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import ShowMap from &#x27;./ShowMap&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var golfCourse = require(&#x27;./indy.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default class SimpleExample extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      playerList: null,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // // use javascript fetch to get the graph from the server</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    let url = &#x27;http://localhost:9000/api/players&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    // just fetch, no error handling here!</span><br><span class=\"line\">    // when the fetch completes, put the graph in &quot;state&quot;</span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(resp =&gt; &#123; return resp.json() &#125;)</span><br><span class=\"line\">      .then((resp) =&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123; playerList: resp.graph &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if (this.state.playerList !== null) &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;ShowMap golfCourse=&#123;golfCourse&#125; listOfPlayers=&#123;this.state.playerList&#125; /&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We reused a React app and showed how to create an Express server to serve both the React app and content.  Very little changed in the React.  We:</p>\n<ul>\n<li>Moved the data used to draw the toy soldiers out of the app and into our Express server</li>\n<li>We used javascript fetch to get data from the server</li>\n<li>We used npm run build to set the React app up as static content</li>\n</ul>\n<p>On the server side, we:</p>\n<ul>\n<li>Created a very simple server and set it up to serve static content using the built-in middle-ware “static”.</li>\n<li>Created a ‘public’ directory and copied the React app build into it</li>\n<li>Created an api (“/api/players”) to serve data to the React app.</li>\n</ul>\n<p>Express is very flexible.  It has a broad eco-system with many supported middle-ware definitions.  These can be used to create a very wide varity of web serve instances.</p>"},{"title":"Create a REST service with Spring","date":"2018-10-14T17:27:12.000Z","_content":"\n\nCreate  REST service using Spring Boot and our Graph ADT\n<!-- more -->\n# Introduction\n\nWe’ve been working with a Graph abstract data type (ADT).  We’ve shown how to: \n\n+ define the ADT in Java\n+ Create unit tests, in JUnit, to demonstrate that our implementation basically functions correctly,\n+ Define higher-level tests, using Cucumber and JUint, related to our overall needs (business needs),\n\nIn this article, we’ll examine how to place the ADT behind a REST service.  Defining a web service used to be an exercise in writing boilerplate before Pivotal Software defined Spring Boot. Spring Boot handles the entire boiler plating and wiring of the components together into a service.  Spring Boot envisions our ADT as a Java Bean.  It uses several additional libraries to make it easy to convert Java objects into the language of the web, JSON.\n\nA Java Bean is a component.  It defines a standard interface with “getter/setter” access to private properties.  It is meant to be a reusable component.  In our case, we have several beans we use to realize the Graph: \n\n+ A Vertex, \n+ An Edge,\n+ A Graph.  \n\nOur original specification of a Vertex uses 2 constructors: create a new Vertex with default state (name=””, and id=0) or supply a name and id.  The Edge requires you to supply 2 completed Vertex.  Finally, the Graph can be constructed without any supplied parameters.  These 3 beans need to be converted into JSON if we are going to expose them to a consumer.  Spring boot uses the Jackson library to handle the conversion.  Out of the box, Jackson assumes that you have used the “getVariable” and “setVariable” convention throughout your software.  Close inspection reveals we did not do that originally.  To make our job easy, let’s redefine Vertex:\n\n```\n\npublic class Vertex {\n\tprivate String _name;\n\tprivate int _strength;\n\tprivate ArrayList<String> _carries = new ArrayList<String>();\n\tprivate int _ID;\n\t\n\tpublic String getName() { return _name; }\n\tpublic ArrayList<String> getCarriedStuff() { return _carries; }\n\tpublic int getId() { return _ID; }\n\tpublic int getStrength() { return _strength; }\n\t\n\tpublic void setName(String n) { _name = n; }\n\tpublic void addToStuffCarried(String thing) { _carries.add(thing); }\n\tpublic void setID(int id) { _ID = id; }\n\tpublic void setStrength(int s) { _strength = s; }\n\t\n\tpublic void setVertex(String name, int id) { _name = name; _ID = id; }\n\t\n\tpublic Vertex(String nm, int initialID) { _ID = initialID; _name = nm; }\n\tpublic Vertex() { _ID = 0; _name = \"\"; }\n}\n\n```\n\nBecause Edge uses public instance variables we don’t have any modifications.   The Graph definition is abstract.  However, the definition of GraphAdjList required one simple modification: adding a method to return the graph so Jackson can serialize it in JSON.  We also defined an easier way to add Edges to the Graph by creating an Edge calling addEdge(Edge e).\n\nWith these changes in place we can define the Spring Boot components we need.  First, we define the overall Application class and add the Spring Boot annotations required to wire it to the Spring Framework.\n\n```\n\npackage BackRiverContainer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ContainerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ContainerApplication.class, args);\n    }\n\n}\n\n```\n\nThen we define the controller class.  The Spring framework uses several annotations to wire your classes.  The “RestController” annotation marks each method in the class as returning a response object or something that can be serialized in JSON.  The HTTP protocol defines that each method handles a request and a response.  Returning a response object (vs. a view) allows for further processing in the Spring framework.  \n\n```\n\npackage BackRiverContainer;\n\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\n\nimport grandview.Edge;\nimport grandview.Vertex;\nimport grandview.GraphAdjList;\n\n@RestController\npublic class GraphController {\n\t private static final String template = \"%s!\";\n\t    private final AtomicInteger counter = new AtomicInteger();\n\n\t   @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/AddVertex\")\n\t    public String AddVertex(@RequestParam(value=\"VertexName\", \t\t\t\t\tdefaultValue=\"Jim\") String name) {\n\t    \t\n\t    \tVertex v = new Vertex();\n\t    \tv.setName(name);\n\t    \tadjListMap.addVertex(v);\n\t    \t\n\t    \treturn v.getName();\n\t    }\n\t    \n\t    @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/AddEdge\")\n\t    public String AddEdge(@RequestParam String vertexName1, \t\t\t\t@RequestParam String vertexName2) {\n\t    \t\n\t\n\t        Vertex v = new Vertex();\n\t    \tv.setName(vertexName1);\n\t    \t\n\t    \tVertex w = new Vertex();\n\t    \tw.setName(vertexName2);\n\t    \t\n\t    \tadjListMap.addEdge(v, w);\n\t    \t\n\t    \treturn \"Edge Added\";\n\t    }\n\t    \n\t    @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/getGraph\")\n\t    public GraphAdjList getGraph() {\n\t    \treturn adjListMap;\n\t    }\n\t    \n}\n\n```\n\nNotice there is a “GetMapping” annotation and a “CrossOrigin” annotation on each method.  The “GetMapping” annotation exposes the method name as an end point (i.e. http://localhost:port/AddVertex).  The “CrossOrigin” annotation enables “cross origin resource sharing” or CORS.  I’ve handled CORS at the method level (see: http://spring.io/guides/gs/rest-service-cors/ for details on further approaches).  This code does a poor job of handling error.  Error handling in REST is beyond this article.\n\nTo test these end points we construct a url in the browser.  For example, let’s add a few vertices and edges and retrieve the resulting graph:\n\n```\n\nhttp://localhost:8080/AddVertex?vertexName=Jasper\n\nhttp://localhost:8080/AddVertex?vertexName=Tom\nhttp://localhost:8080/AddVertex?vertexName=Charlie\nhttp://localhost:8080/AddVertex?vertexName=Emma\nhttp://localhost:8080/AddVertex?vertexName=Olivia\nhttp://localhost:8080/AddVertex?vertexName=Ben\n\nhttp://localhost:8080/AddEdge?vertexName1=Jasper&vertexName2=Tom\n\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Charlie\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Olivia\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Ben\n\nAnd the result is:\n\n\t\nnumVertices\t6\nnumEdges\t4\ngraph\t\nOlivia\t[]\nJasper\t\n0\t\nbeginning\t\nname\t\"Jasper\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nTom\t\n0\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Charlie\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\n1\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Olivia\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\n2\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Ben\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nCharlie\t[]\nBen\t[]\nEmma\t[]\n\n\n```\n\nTo see the connections, you have to find each “beginning / end” pair for each Edge.  Not the easiest output to parse! However, the graph is connected and again, there is no error handling.\n\n## Conclusion\n\nSpring Boot really does make creating REST services easy.  This article has covered some of the more useful Spring Boot annotations and shown how to make simple java beans for realizing the REST service components.  There is a lot more that can be done in this space and I would encourage you to consult the excellent Spring Boot guides (see http://spring.io/guides ).\n","source":"_posts/2019-10-14-A-Create-a-REST-service-with-Spring.md","raw":"---\ntitle: Create a REST service with Spring\ntags:\n  - REST\n  - Java\ncategories:\n  - Programming\ndate: 2018-10-14 13:27:12\n---\n\n\nCreate  REST service using Spring Boot and our Graph ADT\n<!-- more -->\n# Introduction\n\nWe’ve been working with a Graph abstract data type (ADT).  We’ve shown how to: \n\n+ define the ADT in Java\n+ Create unit tests, in JUnit, to demonstrate that our implementation basically functions correctly,\n+ Define higher-level tests, using Cucumber and JUint, related to our overall needs (business needs),\n\nIn this article, we’ll examine how to place the ADT behind a REST service.  Defining a web service used to be an exercise in writing boilerplate before Pivotal Software defined Spring Boot. Spring Boot handles the entire boiler plating and wiring of the components together into a service.  Spring Boot envisions our ADT as a Java Bean.  It uses several additional libraries to make it easy to convert Java objects into the language of the web, JSON.\n\nA Java Bean is a component.  It defines a standard interface with “getter/setter” access to private properties.  It is meant to be a reusable component.  In our case, we have several beans we use to realize the Graph: \n\n+ A Vertex, \n+ An Edge,\n+ A Graph.  \n\nOur original specification of a Vertex uses 2 constructors: create a new Vertex with default state (name=””, and id=0) or supply a name and id.  The Edge requires you to supply 2 completed Vertex.  Finally, the Graph can be constructed without any supplied parameters.  These 3 beans need to be converted into JSON if we are going to expose them to a consumer.  Spring boot uses the Jackson library to handle the conversion.  Out of the box, Jackson assumes that you have used the “getVariable” and “setVariable” convention throughout your software.  Close inspection reveals we did not do that originally.  To make our job easy, let’s redefine Vertex:\n\n```\n\npublic class Vertex {\n\tprivate String _name;\n\tprivate int _strength;\n\tprivate ArrayList<String> _carries = new ArrayList<String>();\n\tprivate int _ID;\n\t\n\tpublic String getName() { return _name; }\n\tpublic ArrayList<String> getCarriedStuff() { return _carries; }\n\tpublic int getId() { return _ID; }\n\tpublic int getStrength() { return _strength; }\n\t\n\tpublic void setName(String n) { _name = n; }\n\tpublic void addToStuffCarried(String thing) { _carries.add(thing); }\n\tpublic void setID(int id) { _ID = id; }\n\tpublic void setStrength(int s) { _strength = s; }\n\t\n\tpublic void setVertex(String name, int id) { _name = name; _ID = id; }\n\t\n\tpublic Vertex(String nm, int initialID) { _ID = initialID; _name = nm; }\n\tpublic Vertex() { _ID = 0; _name = \"\"; }\n}\n\n```\n\nBecause Edge uses public instance variables we don’t have any modifications.   The Graph definition is abstract.  However, the definition of GraphAdjList required one simple modification: adding a method to return the graph so Jackson can serialize it in JSON.  We also defined an easier way to add Edges to the Graph by creating an Edge calling addEdge(Edge e).\n\nWith these changes in place we can define the Spring Boot components we need.  First, we define the overall Application class and add the Spring Boot annotations required to wire it to the Spring Framework.\n\n```\n\npackage BackRiverContainer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ContainerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ContainerApplication.class, args);\n    }\n\n}\n\n```\n\nThen we define the controller class.  The Spring framework uses several annotations to wire your classes.  The “RestController” annotation marks each method in the class as returning a response object or something that can be serialized in JSON.  The HTTP protocol defines that each method handles a request and a response.  Returning a response object (vs. a view) allows for further processing in the Spring framework.  \n\n```\n\npackage BackRiverContainer;\n\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\n\nimport grandview.Edge;\nimport grandview.Vertex;\nimport grandview.GraphAdjList;\n\n@RestController\npublic class GraphController {\n\t private static final String template = \"%s!\";\n\t    private final AtomicInteger counter = new AtomicInteger();\n\n\t   @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/AddVertex\")\n\t    public String AddVertex(@RequestParam(value=\"VertexName\", \t\t\t\t\tdefaultValue=\"Jim\") String name) {\n\t    \t\n\t    \tVertex v = new Vertex();\n\t    \tv.setName(name);\n\t    \tadjListMap.addVertex(v);\n\t    \t\n\t    \treturn v.getName();\n\t    }\n\t    \n\t    @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/AddEdge\")\n\t    public String AddEdge(@RequestParam String vertexName1, \t\t\t\t@RequestParam String vertexName2) {\n\t    \t\n\t\n\t        Vertex v = new Vertex();\n\t    \tv.setName(vertexName1);\n\t    \t\n\t    \tVertex w = new Vertex();\n\t    \tw.setName(vertexName2);\n\t    \t\n\t    \tadjListMap.addEdge(v, w);\n\t    \t\n\t    \treturn \"Edge Added\";\n\t    }\n\t    \n\t    @CrossOrigin(origins = \"http://localhost:3000\")\n\t    @GetMapping(\"/getGraph\")\n\t    public GraphAdjList getGraph() {\n\t    \treturn adjListMap;\n\t    }\n\t    \n}\n\n```\n\nNotice there is a “GetMapping” annotation and a “CrossOrigin” annotation on each method.  The “GetMapping” annotation exposes the method name as an end point (i.e. http://localhost:port/AddVertex).  The “CrossOrigin” annotation enables “cross origin resource sharing” or CORS.  I’ve handled CORS at the method level (see: http://spring.io/guides/gs/rest-service-cors/ for details on further approaches).  This code does a poor job of handling error.  Error handling in REST is beyond this article.\n\nTo test these end points we construct a url in the browser.  For example, let’s add a few vertices and edges and retrieve the resulting graph:\n\n```\n\nhttp://localhost:8080/AddVertex?vertexName=Jasper\n\nhttp://localhost:8080/AddVertex?vertexName=Tom\nhttp://localhost:8080/AddVertex?vertexName=Charlie\nhttp://localhost:8080/AddVertex?vertexName=Emma\nhttp://localhost:8080/AddVertex?vertexName=Olivia\nhttp://localhost:8080/AddVertex?vertexName=Ben\n\nhttp://localhost:8080/AddEdge?vertexName1=Jasper&vertexName2=Tom\n\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Charlie\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Olivia\nhttp://localhost:8080/AddEdge?vertexName1=Tom&vertexName2=Ben\n\nAnd the result is:\n\n\t\nnumVertices\t6\nnumEdges\t4\ngraph\t\nOlivia\t[]\nJasper\t\n0\t\nbeginning\t\nname\t\"Jasper\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nTom\t\n0\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Charlie\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\n1\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Olivia\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\n2\t\nbeginning\t\nname\t\"Tom\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nend\t\nname\t\"Ben\"\nid\t0\nstrength\t0\ncarriedStuff\t[]\nCharlie\t[]\nBen\t[]\nEmma\t[]\n\n\n```\n\nTo see the connections, you have to find each “beginning / end” pair for each Edge.  Not the easiest output to parse! However, the graph is connected and again, there is no error handling.\n\n## Conclusion\n\nSpring Boot really does make creating REST services easy.  This article has covered some of the more useful Spring Boot annotations and shown how to make simple java beans for realizing the REST service components.  There is a lot more that can be done in this space and I would encourage you to consult the excellent Spring Boot guides (see http://spring.io/guides ).\n","slug":"2019-10-14-A-Create-a-REST-service-with-Spring","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0an000pi7e8arj6a165","content":"<p>Create  REST service using Spring Boot and our Graph ADT</p>\n<span id=\"more\"></span>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>We’ve been working with a Graph abstract data type (ADT).  We’ve shown how to: </p>\n<ul>\n<li>define the ADT in Java</li>\n<li>Create unit tests, in JUnit, to demonstrate that our implementation basically functions correctly,</li>\n<li>Define higher-level tests, using Cucumber and JUint, related to our overall needs (business needs),</li>\n</ul>\n<p>In this article, we’ll examine how to place the ADT behind a REST service.  Defining a web service used to be an exercise in writing boilerplate before Pivotal Software defined Spring Boot. Spring Boot handles the entire boiler plating and wiring of the components together into a service.  Spring Boot envisions our ADT as a Java Bean.  It uses several additional libraries to make it easy to convert Java objects into the language of the web, JSON.</p>\n<p>A Java Bean is a component.  It defines a standard interface with “getter/setter” access to private properties.  It is meant to be a reusable component.  In our case, we have several beans we use to realize the Graph: </p>\n<ul>\n<li>A Vertex, </li>\n<li>An Edge,</li>\n<li>A Graph.  </li>\n</ul>\n<p>Our original specification of a Vertex uses 2 constructors: create a new Vertex with default state (name=””, and id=0) or supply a name and id.  The Edge requires you to supply 2 completed Vertex.  Finally, the Graph can be constructed without any supplied parameters.  These 3 beans need to be converted into JSON if we are going to expose them to a consumer.  Spring boot uses the Jackson library to handle the conversion.  Out of the box, Jackson assumes that you have used the “getVariable” and “setVariable” convention throughout your software.  Close inspection reveals we did not do that originally.  To make our job easy, let’s redefine Vertex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Vertex &#123;</span><br><span class=\"line\">s''private String _name;</span><br><span class=\"line\">s''private int _strength;</span><br><span class=\"line\">s''private ArrayList&lt;String&gt; _carries = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''private int _ID;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public String getName() &#123; return _name; &#125;</span><br><span class=\"line\">s''public ArrayList&lt;String&gt; getCarriedStuff() &#123; return _carries; &#125;</span><br><span class=\"line\">s''public int getId() &#123; return _ID; &#125;</span><br><span class=\"line\">s''public int getStrength() &#123; return _strength; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setName(String n) &#123; _name = n; &#125;</span><br><span class=\"line\">s''public void addToStuffCarried(String thing) &#123; _carries.add(thing); &#125;</span><br><span class=\"line\">s''public void setID(int id) &#123; _ID = id; &#125;</span><br><span class=\"line\">s''public void setStrength(int s) &#123; _strength = s; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setVertex(String name, int id) &#123; _name = name; _ID = id; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public Vertex(String nm, int initialID) &#123; _ID = initialID; _name = nm; &#125;</span><br><span class=\"line\">s''public Vertex() &#123; _ID = 0; _name = &quot;&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Because Edge uses public instance variables we don’t have any modifications.   The Graph definition is abstract.  However, the definition of GraphAdjList required one simple modification: adding a method to return the graph so Jackson can serialize it in JSON.  We also defined an easier way to add Edges to the Graph by creating an Edge calling addEdge(Edge e).</p>\n<p>With these changes in place we can define the Spring Boot components we need.  First, we define the overall Application class and add the Spring Boot annotations required to wire it to the Spring Framework.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ContainerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ContainerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Then we define the controller class.  The Spring framework uses several annotations to wire your classes.  The “RestController” annotation marks each method in the class as returning a response object or something that can be serialized in JSON.  The HTTP protocol defines that each method handles a request and a response.  Returning a response object (vs. a view) allows for further processing in the Spring framework.  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class=\"line\"></span><br><span class=\"line\">import grandview.Edge;</span><br><span class=\"line\">import grandview.Vertex;</span><br><span class=\"line\">import grandview.GraphAdjList;</span><br><span class=\"line\"></span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class GraphController &#123;</span><br><span class=\"line\">s'' private static final String template = &quot;%s!&quot;;</span><br><span class=\"line\">s''    private final AtomicInteger counter = new AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">s''   @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddVertex&quot;)</span><br><span class=\"line\">s''    public String AddVertex(@RequestParam(value=&quot;VertexName&quot;, \t\t\t\t\tdefaultValue=&quot;Jim&quot;) String name) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(name);</span><br><span class=\"line\">s''    \tadjListMap.addVertex(v);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn v.getName();</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddEdge&quot;)</span><br><span class=\"line\">s''    public String AddEdge(@RequestParam String vertexName1, \t\t\t\t@RequestParam String vertexName2) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''        Vertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(vertexName1);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex w = new Vertex();</span><br><span class=\"line\">s''    \tw.setName(vertexName2);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tadjListMap.addEdge(v, w);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn &quot;Edge Added&quot;;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/getGraph&quot;)</span><br><span class=\"line\">s''    public GraphAdjList getGraph() &#123;</span><br><span class=\"line\">s''    \treturn adjListMap;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Notice there is a “GetMapping” annotation and a “CrossOrigin” annotation on each method.  The “GetMapping” annotation exposes the method name as an end point (i.e. <a href=\"http://localhost:port/AddVertex\">http://localhost:port/AddVertex</a>).  The “CrossOrigin” annotation enables “cross origin resource sharing” or CORS.  I’ve handled CORS at the method level (see: <a href=\"http://spring.io/guides/gs/rest-service-cors/\">http://spring.io/guides/gs/rest-service-cors/</a> for details on further approaches).  This code does a poor job of handling error.  Error handling in REST is beyond this article.</p>\n<p>To test these end points we construct a url in the browser.  For example, let’s add a few vertices and edges and retrieve the resulting graph:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Jasper</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Tom</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Charlie</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Emma</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Olivia</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Jasper&amp;vertexName2=Tom</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Charlie</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Olivia</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">And the result is:</span><br><span class=\"line\"></span><br><span class=\"line\">s''</span><br><span class=\"line\">numVertices\t6</span><br><span class=\"line\">numEdges\t4</span><br><span class=\"line\">graph\t</span><br><span class=\"line\">Olivia\t[]</span><br><span class=\"line\">Jasper\t</span><br><span class=\"line\">0\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Jasper&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">Tom\t</span><br><span class=\"line\">0\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Charlie&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">1\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Olivia&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">2\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Ben&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">Charlie\t[]</span><br><span class=\"line\">Ben\t[]</span><br><span class=\"line\">Emma\t[]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To see the connections, you have to find each “beginning / end” pair for each Edge.  Not the easiest output to parse! However, the graph is connected and again, there is no error handling.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring Boot really does make creating REST services easy.  This article has covered some of the more useful Spring Boot annotations and shown how to make simple java beans for realizing the REST service components.  There is a lot more that can be done in this space and I would encourage you to consult the excellent Spring Boot guides (see <a href=\"http://spring.io/guides\">http://spring.io/guides</a> ).</p>\n","site":{"data":{}},"excerpt":"<p>Create  REST service using Spring Boot and our Graph ADT</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>We’ve been working with a Graph abstract data type (ADT).  We’ve shown how to: </p>\n<ul>\n<li>define the ADT in Java</li>\n<li>Create unit tests, in JUnit, to demonstrate that our implementation basically functions correctly,</li>\n<li>Define higher-level tests, using Cucumber and JUint, related to our overall needs (business needs),</li>\n</ul>\n<p>In this article, we’ll examine how to place the ADT behind a REST service.  Defining a web service used to be an exercise in writing boilerplate before Pivotal Software defined Spring Boot. Spring Boot handles the entire boiler plating and wiring of the components together into a service.  Spring Boot envisions our ADT as a Java Bean.  It uses several additional libraries to make it easy to convert Java objects into the language of the web, JSON.</p>\n<p>A Java Bean is a component.  It defines a standard interface with “getter/setter” access to private properties.  It is meant to be a reusable component.  In our case, we have several beans we use to realize the Graph: </p>\n<ul>\n<li>A Vertex, </li>\n<li>An Edge,</li>\n<li>A Graph.  </li>\n</ul>\n<p>Our original specification of a Vertex uses 2 constructors: create a new Vertex with default state (name=””, and id=0) or supply a name and id.  The Edge requires you to supply 2 completed Vertex.  Finally, the Graph can be constructed without any supplied parameters.  These 3 beans need to be converted into JSON if we are going to expose them to a consumer.  Spring boot uses the Jackson library to handle the conversion.  Out of the box, Jackson assumes that you have used the “getVariable” and “setVariable” convention throughout your software.  Close inspection reveals we did not do that originally.  To make our job easy, let’s redefine Vertex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Vertex &#123;</span><br><span class=\"line\">s''private String _name;</span><br><span class=\"line\">s''private int _strength;</span><br><span class=\"line\">s''private ArrayList&lt;String&gt; _carries = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">s''private int _ID;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public String getName() &#123; return _name; &#125;</span><br><span class=\"line\">s''public ArrayList&lt;String&gt; getCarriedStuff() &#123; return _carries; &#125;</span><br><span class=\"line\">s''public int getId() &#123; return _ID; &#125;</span><br><span class=\"line\">s''public int getStrength() &#123; return _strength; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setName(String n) &#123; _name = n; &#125;</span><br><span class=\"line\">s''public void addToStuffCarried(String thing) &#123; _carries.add(thing); &#125;</span><br><span class=\"line\">s''public void setID(int id) &#123; _ID = id; &#125;</span><br><span class=\"line\">s''public void setStrength(int s) &#123; _strength = s; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public void setVertex(String name, int id) &#123; _name = name; _ID = id; &#125;</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''public Vertex(String nm, int initialID) &#123; _ID = initialID; _name = nm; &#125;</span><br><span class=\"line\">s''public Vertex() &#123; _ID = 0; _name = &quot;&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Because Edge uses public instance variables we don’t have any modifications.   The Graph definition is abstract.  However, the definition of GraphAdjList required one simple modification: adding a method to return the graph so Jackson can serialize it in JSON.  We also defined an easier way to add Edges to the Graph by creating an Edge calling addEdge(Edge e).</p>\n<p>With these changes in place we can define the Spring Boot components we need.  First, we define the overall Application class and add the Spring Boot annotations required to wire it to the Spring Framework.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ContainerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ContainerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Then we define the controller class.  The Spring framework uses several annotations to wire your classes.  The “RestController” annotation marks each method in the class as returning a response object or something that can be serialized in JSON.  The HTTP protocol defines that each method handles a request and a response.  Returning a response object (vs. a view) allows for further processing in the Spring framework.  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package BackRiverContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class=\"line\"></span><br><span class=\"line\">import grandview.Edge;</span><br><span class=\"line\">import grandview.Vertex;</span><br><span class=\"line\">import grandview.GraphAdjList;</span><br><span class=\"line\"></span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class GraphController &#123;</span><br><span class=\"line\">s'' private static final String template = &quot;%s!&quot;;</span><br><span class=\"line\">s''    private final AtomicInteger counter = new AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">s''   @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddVertex&quot;)</span><br><span class=\"line\">s''    public String AddVertex(@RequestParam(value=&quot;VertexName&quot;, \t\t\t\t\tdefaultValue=&quot;Jim&quot;) String name) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(name);</span><br><span class=\"line\">s''    \tadjListMap.addVertex(v);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn v.getName();</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/AddEdge&quot;)</span><br><span class=\"line\">s''    public String AddEdge(@RequestParam String vertexName1, \t\t\t\t@RequestParam String vertexName2) &#123;</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''</span><br><span class=\"line\">s''        Vertex v = new Vertex();</span><br><span class=\"line\">s''    \tv.setName(vertexName1);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tVertex w = new Vertex();</span><br><span class=\"line\">s''    \tw.setName(vertexName2);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \tadjListMap.addEdge(v, w);</span><br><span class=\"line\">s''    \t</span><br><span class=\"line\">s''    \treturn &quot;Edge Added&quot;;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">s''    @CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class=\"line\">s''    @GetMapping(&quot;/getGraph&quot;)</span><br><span class=\"line\">s''    public GraphAdjList getGraph() &#123;</span><br><span class=\"line\">s''    \treturn adjListMap;</span><br><span class=\"line\">s''    &#125;</span><br><span class=\"line\">s''    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Notice there is a “GetMapping” annotation and a “CrossOrigin” annotation on each method.  The “GetMapping” annotation exposes the method name as an end point (i.e. <a href=\"http://localhost:port/AddVertex\">http://localhost:port/AddVertex</a>).  The “CrossOrigin” annotation enables “cross origin resource sharing” or CORS.  I’ve handled CORS at the method level (see: <a href=\"http://spring.io/guides/gs/rest-service-cors/\">http://spring.io/guides/gs/rest-service-cors/</a> for details on further approaches).  This code does a poor job of handling error.  Error handling in REST is beyond this article.</p>\n<p>To test these end points we construct a url in the browser.  For example, let’s add a few vertices and edges and retrieve the resulting graph:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Jasper</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Tom</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Charlie</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Emma</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Olivia</span><br><span class=\"line\">http://localhost:8080/AddVertex?vertexName=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Jasper&amp;vertexName2=Tom</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Charlie</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Olivia</span><br><span class=\"line\">http://localhost:8080/AddEdge?vertexName1=Tom&amp;vertexName2=Ben</span><br><span class=\"line\"></span><br><span class=\"line\">And the result is:</span><br><span class=\"line\"></span><br><span class=\"line\">s''</span><br><span class=\"line\">numVertices\t6</span><br><span class=\"line\">numEdges\t4</span><br><span class=\"line\">graph\t</span><br><span class=\"line\">Olivia\t[]</span><br><span class=\"line\">Jasper\t</span><br><span class=\"line\">0\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Jasper&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">Tom\t</span><br><span class=\"line\">0\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Charlie&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">1\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Olivia&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">2\t</span><br><span class=\"line\">beginning\t</span><br><span class=\"line\">name\t&quot;Tom&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">end\t</span><br><span class=\"line\">name\t&quot;Ben&quot;</span><br><span class=\"line\">id\t0</span><br><span class=\"line\">strength\t0</span><br><span class=\"line\">carriedStuff\t[]</span><br><span class=\"line\">Charlie\t[]</span><br><span class=\"line\">Ben\t[]</span><br><span class=\"line\">Emma\t[]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To see the connections, you have to find each “beginning / end” pair for each Edge.  Not the easiest output to parse! However, the graph is connected and again, there is no error handling.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Spring Boot really does make creating REST services easy.  This article has covered some of the more useful Spring Boot annotations and shown how to make simple java beans for realizing the REST service components.  There is a lot more that can be done in this space and I would encourage you to consult the excellent Spring Boot guides (see <a href=\"http://spring.io/guides\">http://spring.io/guides</a> ).</p>"},{"title":"Using Racket in Docker containers","date":"2021-09-20T17:27:12.000Z","_content":"\n\nUsing Racket in Docker\n<!-- more -->\n# Introduction\n\nThe Racket programming language is an implementation of the Scheme standard. Racket is very well supported. It has great capabilities as a teaching language. To get  started with Racket see https://racket-lang.org\n\nThis post came about because one of the people on my team said that lisp and scheme were \"no good for production, becuase you  can't put them in containers.\" This post will describe how to put Racket into a Docker container. In production environments, deploying software can be problematic. For example, many programming languages / solutions require loading additional components and libraries beyond the standard set that is shipped with the language. \n\nThis post assumes you have installed both Racket and Docker on your machine. I also use the command line tool dive to inspect the container contents. Dive is a great tool.\n\n# A simple case of saying hello\n\nThis post covers 2 things: \n\n* building the basic container with a working racket program, \n* exploiting Racket tooling to create a compiled version of the sample program.\n\n\nFirst, we need a simple program. \n\nOur first sample Racket program is very simple. It will make use of Racket's http services stack. This post is not a tutorial for Racket, there are many very well written tutorials in the Racket documentation.\n\nOur basic program will start, initialize Racket's web stack, and return a message when somebody hits the URL with a browser.\n\n```\n\n#lang racket\n\n; bring in the racket web stack\n(require web-server/servlet\n         web-server/servlet-env)\n\n; this function will return some html to the requestor\n(define (start request)\n  (response/xexpr\n   '(html\n     (head (title \"James and his blog\"))\n     (body (h1 \"My Blog under construction\")))))\n\n; start the server on port 8000 and don't launch a browser\n; #:listen-ip tells the network stack to listen on all ip addresses\n; #:launch-broswer says don't start a new browser\n(serve/servlet start #:port 8000 #:listen-ip #f #:launch-browser? #f)\n\n\n```\n\nFrom a container perspective, this program highlights a couple of concerns:\n\n* The container will be running a server capable of responding to browser requests,\n* The container will require a port to be opened,\n* The program needs to have all of its dependencies loaded into the container.\n\nRacket, installed on my Mac is a dynamically linked application. That means libraries are loaded at run time, from system libraries. That is our first huddle to over come. Docker containers create a self contained environment. That means all dynamic code and dependent libraries needs to be inside inside the container.\n\nLet's take a simple approach to get something running. Then we'll improve it over several steps. As a first step, we'll create a docker configuration file.\n\n```\n\nFROM ubuntu\nRUN apt update -y && apt install -y racket\nWORKDIR /app\nCOPY web1.rkt .\nEXPOSE 8080\nCMD [\"racket\", \"web1.rkt\"]\n\n```\n\nThat Dockerfile will create the container, update ubuntu to it's latest  configuration, install Racket into the container, expose the port and run racket with the mentioned script. \n\nLet's see this in action. The following first builds the container. The second line runs the comtainer:\n\n```\n\n$ docker build -t foo .\n$ docker run -it -p 8000:8000 foo \nYour Web application is running at http://localhost:8080.\nStop this program at any time to terminate the Web Server.\n\n```\n\nIf you open Firefox and enter http://localhost:8000 in the URL bar you should see:\n\n```\n\nWelcome to the Racket Web Server\n\nFind out more about writing servlets by reading the Continue tutorial in the Help Desk.\n\nFind out more about the server by reading its reference manual in the Help Desk.\n\nPlease replace this page with your favorite index page.\n\nPowered by Racket\n\nFor more information on Racket, please follow the icon link.\n\n```\n\nHumm,  that was not what  I expected?  Reading into the Racket docs, I see I need to use a different URL:  http://localhost:8000/servlets/standalone.rkt. Ok, that worked, the container builds and runs. Use Ctl-C to stop things. Let us examine what we have created. Issue the following command:\n\n```\n\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nfoo          latest    836d83e4f6b9   44 hours ago   490MB\n\n```\n\n# Packaging without loading Racket\n\nOn my machine, I see a large container, wieghing in at 490 megabytes. That is pretty large for such a simple program. Using the program \"dive\" i can see that the first line of the Dockerfile: \"FROM ubnutu\" created a 73 MB layer in the container. The sencond line, which updates ubuntu and installs Racket, adds 417 MB !!! Doing the copy of the web1.rkt script adds 352 bytes.\n\nWe can improve this. We loaded the full Racket environment into the container. We don't need to do that. Our current setup assumes we will run Racket and let it run the web1.rkt script. So, we are interpreting the script. Ideally, we should be able to compile our Racket script.  Racket has command line tools, let's explore those.\n\nThe Racket documentation describes a set of tools for compiling and distributing Racket code. We'll now explore raco. The raco tool provides a number of tools that are run from the command line. This is perfect for including racket into Ci/CD pipelines. We will explore raco exe and raco distribute.\n\nLet's go back to what I said earlier about Racket being a dynamically linked  language.  Most  modern programming languages assume you are going to link your program dynamically. The executable will depend on libraries loading as the program is running. In a unix environment (Mac & Linux), there is an environment  variable  called \"LD_LIBRARY_PATH\" that points to where system libraries are loaded from. For Windows machines  see https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications.\n\nTo make a ccontainer work, we  need to gather all of  the dependencies together and load them all  into the  container.  This means we have to ;\n\n* compile our Racket code into a  standalone executable,\n* have just the Racket run-time load into the container vs. the entire Racket environment,\n* have all libraries loaded into  the  container.\n\nRaco exe is used to compile our script. Instead of interpreting, after using raco exe, we get a stand alone executable. This means that the Racket run-time is included in. Raco exe alone creates a program that dependes on having the racket system installed on your machine. That is not quite what we want but let's explore it.\n\n```\n\nraco exe web1.rkt\n$ ls -lh\n-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile\n-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1\n-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt\n$\n\n```\n\nThe directoy listing shows a 62 MB executable (web1).  That is a lot better than 490MB. However, that executable does depend on a working Racket installation. \n\nWhat we need is a way to combine the parts of Racket we need and the script to produce a working program. Raco distribute is the command for that! Raco Distribute creates a pacckage that can be run on other machines (without Racket installed). The command places the standalone executable and all dependencies into a directory.  For this example I'll call that directory \"build\".\n\n```\n\nraco distribute build web1\n$ ls -lh\ntotal 126120\n-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile\ndrwxr-xr-x   4 muguira  staff   128B Sep 26 13:43 build\n-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1\n-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt\n\n$ du -d1 -h build\n 62M\tbuild/bin\n5.7M\tbuild/lib\n 67M\tbuild\n\n$ ls -lh build/bin\ntotal 125992\n-rwxr-xr-x  1 muguira  staff    62M Sep 26 13:43 web1\n\n```\n\nThe result is a 67MB self-contained directory that contains everything we want in one place. Under build/bin we see the executable  file web1, which is 62MB. The build/lib directory contains all of the dependencies. Now let's change the Dockerfile and compare our results:\n\n```\n\nFROM ubuntu\nWORKDIR /app\nCOPY build .\nEXPOSE 8080\nCMD [\"/app/bin/web1\"]\n\n```\n\nNotice, that we DO NOT update ubuntu or install Racket. Instead, we set a working directory in the container called /app and we copy the build directory into /app in the container. We still expose the port. Last, we change the command to run our program to point to \"/app/bin/web1\"\n\nTo compare, let's change the name of the container for this build to be foosmall:\n\n```\n\n$ docker build -t foosmall .\n\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED              SIZE\nfoo          latest    fee0476d757a   About a minute ago   490MB\nfoosmall     latest    24d628917cf5   8 minutes ago        143MB\n\n```\n\nOur final container size is 143 MB. Using dive, we see that the docker copy added 70MB to the 73 Mb ubuntu base image.\n\n# Conclusion\n\nThis post walked through the steps to create a docker container with a working Racket program.  The small Racket program demonstrated how to create a simple web server that could reply with html to a browser.  Our first container effort created a large 490 MB container with the full Racket environment installed  inside the container. From a security point of view this is less than optmial.  We don't need a full Racket install in the container to reply to a simple request. Our second effort reduced the container size and placed only the elements of the Raclet run-time in the container. The Racket environment supplied two commands  that helped us create a standalone executable. Finally we used docker commands to copy that executable into the container and expose the proper  ports. \n\n","source":"_posts/2021-09-20-Docker-with-racket.md","raw":"---\ntitle: Using Racket in Docker containers\ntags:\n  - Racket\n  - Docker\ncategories:\n  - Programming\n  - Containers\ndate: 2021-09-20 13:27:12\n---\n\n\nUsing Racket in Docker\n<!-- more -->\n# Introduction\n\nThe Racket programming language is an implementation of the Scheme standard. Racket is very well supported. It has great capabilities as a teaching language. To get  started with Racket see https://racket-lang.org\n\nThis post came about because one of the people on my team said that lisp and scheme were \"no good for production, becuase you  can't put them in containers.\" This post will describe how to put Racket into a Docker container. In production environments, deploying software can be problematic. For example, many programming languages / solutions require loading additional components and libraries beyond the standard set that is shipped with the language. \n\nThis post assumes you have installed both Racket and Docker on your machine. I also use the command line tool dive to inspect the container contents. Dive is a great tool.\n\n# A simple case of saying hello\n\nThis post covers 2 things: \n\n* building the basic container with a working racket program, \n* exploiting Racket tooling to create a compiled version of the sample program.\n\n\nFirst, we need a simple program. \n\nOur first sample Racket program is very simple. It will make use of Racket's http services stack. This post is not a tutorial for Racket, there are many very well written tutorials in the Racket documentation.\n\nOur basic program will start, initialize Racket's web stack, and return a message when somebody hits the URL with a browser.\n\n```\n\n#lang racket\n\n; bring in the racket web stack\n(require web-server/servlet\n         web-server/servlet-env)\n\n; this function will return some html to the requestor\n(define (start request)\n  (response/xexpr\n   '(html\n     (head (title \"James and his blog\"))\n     (body (h1 \"My Blog under construction\")))))\n\n; start the server on port 8000 and don't launch a browser\n; #:listen-ip tells the network stack to listen on all ip addresses\n; #:launch-broswer says don't start a new browser\n(serve/servlet start #:port 8000 #:listen-ip #f #:launch-browser? #f)\n\n\n```\n\nFrom a container perspective, this program highlights a couple of concerns:\n\n* The container will be running a server capable of responding to browser requests,\n* The container will require a port to be opened,\n* The program needs to have all of its dependencies loaded into the container.\n\nRacket, installed on my Mac is a dynamically linked application. That means libraries are loaded at run time, from system libraries. That is our first huddle to over come. Docker containers create a self contained environment. That means all dynamic code and dependent libraries needs to be inside inside the container.\n\nLet's take a simple approach to get something running. Then we'll improve it over several steps. As a first step, we'll create a docker configuration file.\n\n```\n\nFROM ubuntu\nRUN apt update -y && apt install -y racket\nWORKDIR /app\nCOPY web1.rkt .\nEXPOSE 8080\nCMD [\"racket\", \"web1.rkt\"]\n\n```\n\nThat Dockerfile will create the container, update ubuntu to it's latest  configuration, install Racket into the container, expose the port and run racket with the mentioned script. \n\nLet's see this in action. The following first builds the container. The second line runs the comtainer:\n\n```\n\n$ docker build -t foo .\n$ docker run -it -p 8000:8000 foo \nYour Web application is running at http://localhost:8080.\nStop this program at any time to terminate the Web Server.\n\n```\n\nIf you open Firefox and enter http://localhost:8000 in the URL bar you should see:\n\n```\n\nWelcome to the Racket Web Server\n\nFind out more about writing servlets by reading the Continue tutorial in the Help Desk.\n\nFind out more about the server by reading its reference manual in the Help Desk.\n\nPlease replace this page with your favorite index page.\n\nPowered by Racket\n\nFor more information on Racket, please follow the icon link.\n\n```\n\nHumm,  that was not what  I expected?  Reading into the Racket docs, I see I need to use a different URL:  http://localhost:8000/servlets/standalone.rkt. Ok, that worked, the container builds and runs. Use Ctl-C to stop things. Let us examine what we have created. Issue the following command:\n\n```\n\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nfoo          latest    836d83e4f6b9   44 hours ago   490MB\n\n```\n\n# Packaging without loading Racket\n\nOn my machine, I see a large container, wieghing in at 490 megabytes. That is pretty large for such a simple program. Using the program \"dive\" i can see that the first line of the Dockerfile: \"FROM ubnutu\" created a 73 MB layer in the container. The sencond line, which updates ubuntu and installs Racket, adds 417 MB !!! Doing the copy of the web1.rkt script adds 352 bytes.\n\nWe can improve this. We loaded the full Racket environment into the container. We don't need to do that. Our current setup assumes we will run Racket and let it run the web1.rkt script. So, we are interpreting the script. Ideally, we should be able to compile our Racket script.  Racket has command line tools, let's explore those.\n\nThe Racket documentation describes a set of tools for compiling and distributing Racket code. We'll now explore raco. The raco tool provides a number of tools that are run from the command line. This is perfect for including racket into Ci/CD pipelines. We will explore raco exe and raco distribute.\n\nLet's go back to what I said earlier about Racket being a dynamically linked  language.  Most  modern programming languages assume you are going to link your program dynamically. The executable will depend on libraries loading as the program is running. In a unix environment (Mac & Linux), there is an environment  variable  called \"LD_LIBRARY_PATH\" that points to where system libraries are loaded from. For Windows machines  see https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications.\n\nTo make a ccontainer work, we  need to gather all of  the dependencies together and load them all  into the  container.  This means we have to ;\n\n* compile our Racket code into a  standalone executable,\n* have just the Racket run-time load into the container vs. the entire Racket environment,\n* have all libraries loaded into  the  container.\n\nRaco exe is used to compile our script. Instead of interpreting, after using raco exe, we get a stand alone executable. This means that the Racket run-time is included in. Raco exe alone creates a program that dependes on having the racket system installed on your machine. That is not quite what we want but let's explore it.\n\n```\n\nraco exe web1.rkt\n$ ls -lh\n-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile\n-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1\n-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt\n$\n\n```\n\nThe directoy listing shows a 62 MB executable (web1).  That is a lot better than 490MB. However, that executable does depend on a working Racket installation. \n\nWhat we need is a way to combine the parts of Racket we need and the script to produce a working program. Raco distribute is the command for that! Raco Distribute creates a pacckage that can be run on other machines (without Racket installed). The command places the standalone executable and all dependencies into a directory.  For this example I'll call that directory \"build\".\n\n```\n\nraco distribute build web1\n$ ls -lh\ntotal 126120\n-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile\ndrwxr-xr-x   4 muguira  staff   128B Sep 26 13:43 build\n-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1\n-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt\n\n$ du -d1 -h build\n 62M\tbuild/bin\n5.7M\tbuild/lib\n 67M\tbuild\n\n$ ls -lh build/bin\ntotal 125992\n-rwxr-xr-x  1 muguira  staff    62M Sep 26 13:43 web1\n\n```\n\nThe result is a 67MB self-contained directory that contains everything we want in one place. Under build/bin we see the executable  file web1, which is 62MB. The build/lib directory contains all of the dependencies. Now let's change the Dockerfile and compare our results:\n\n```\n\nFROM ubuntu\nWORKDIR /app\nCOPY build .\nEXPOSE 8080\nCMD [\"/app/bin/web1\"]\n\n```\n\nNotice, that we DO NOT update ubuntu or install Racket. Instead, we set a working directory in the container called /app and we copy the build directory into /app in the container. We still expose the port. Last, we change the command to run our program to point to \"/app/bin/web1\"\n\nTo compare, let's change the name of the container for this build to be foosmall:\n\n```\n\n$ docker build -t foosmall .\n\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED              SIZE\nfoo          latest    fee0476d757a   About a minute ago   490MB\nfoosmall     latest    24d628917cf5   8 minutes ago        143MB\n\n```\n\nOur final container size is 143 MB. Using dive, we see that the docker copy added 70MB to the 73 Mb ubuntu base image.\n\n# Conclusion\n\nThis post walked through the steps to create a docker container with a working Racket program.  The small Racket program demonstrated how to create a simple web server that could reply with html to a browser.  Our first container effort created a large 490 MB container with the full Racket environment installed  inside the container. From a security point of view this is less than optmial.  We don't need a full Racket install in the container to reply to a simple request. Our second effort reduced the container size and placed only the elements of the Raclet run-time in the container. The Racket environment supplied two commands  that helped us create a standalone executable. Finally we used docker commands to copy that executable into the container and expose the proper  ports. \n\n","slug":"2021-09-20-Docker-with-racket","published":1,"updated":"2021-10-22T21:21:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0ap000ti7e84bl07eoo","content":"<p>Using Racket in Docker</p>\n<span id=\"more\"></span>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The Racket programming language is an implementation of the Scheme standard. Racket is very well supported. It has great capabilities as a teaching language. To get  started with Racket see <a href=\"https://racket-lang.org/\">https://racket-lang.org</a></p>\n<p>This post came about because one of the people on my team said that lisp and scheme were “no good for production, becuase you  can’t put them in containers.” This post will describe how to put Racket into a Docker container. In production environments, deploying software can be problematic. For example, many programming languages / solutions require loading additional components and libraries beyond the standard set that is shipped with the language. </p>\n<p>This post assumes you have installed both Racket and Docker on your machine. I also use the command line tool dive to inspect the container contents. Dive is a great tool.</p>\n<h1 id=\"A-simple-case-of-saying-hello\"><a href=\"#A-simple-case-of-saying-hello\" class=\"headerlink\" title=\"A simple case of saying hello\"></a>A simple case of saying hello</h1><p>This post covers 2 things: </p>\n<ul>\n<li>building the basic container with a working racket program, </li>\n<li>exploiting Racket tooling to create a compiled version of the sample program.</li>\n</ul>\n<p>First, we need a simple program. </p>\n<p>Our first sample Racket program is very simple. It will make use of Racket’s http services stack. This post is not a tutorial for Racket, there are many very well written tutorials in the Racket documentation.</p>\n<p>Our basic program will start, initialize Racket’s web stack, and return a message when somebody hits the URL with a browser.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">; bring in the racket web stack</span><br><span class=\"line\">(require web-server/servlet</span><br><span class=\"line\">         web-server/servlet-env)</span><br><span class=\"line\"></span><br><span class=\"line\">; this function will return some html to the requestor</span><br><span class=\"line\">(define (start request)</span><br><span class=\"line\">  (response/xexpr</span><br><span class=\"line\">   &#x27;(html</span><br><span class=\"line\">     (head (title &quot;James and his blog&quot;))</span><br><span class=\"line\">     (body (h1 &quot;My Blog under construction&quot;)))))</span><br><span class=\"line\"></span><br><span class=\"line\">; start the server on port 8000 and don&#x27;t launch a browser</span><br><span class=\"line\">; #:listen-ip tells the network stack to listen on all ip addresses</span><br><span class=\"line\">; #:launch-broswer says don&#x27;t start a new browser</span><br><span class=\"line\">(serve/servlet start #:port 8000 #:listen-ip #f #:launch-browser? #f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>From a container perspective, this program highlights a couple of concerns:</p>\n<ul>\n<li>The container will be running a server capable of responding to browser requests,</li>\n<li>The container will require a port to be opened,</li>\n<li>The program needs to have all of its dependencies loaded into the container.</li>\n</ul>\n<p>Racket, installed on my Mac is a dynamically linked application. That means libraries are loaded at run time, from system libraries. That is our first huddle to over come. Docker containers create a self contained environment. That means all dynamic code and dependent libraries needs to be inside inside the container.</p>\n<p>Let’s take a simple approach to get something running. Then we’ll improve it over several steps. As a first step, we’ll create a docker configuration file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">RUN apt update -y &amp;&amp; apt install -y racket</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY web1.rkt .</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD [&quot;racket&quot;, &quot;web1.rkt&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>That Dockerfile will create the container, update ubuntu to it’s latest  configuration, install Racket into the container, expose the port and run racket with the mentioned script. </p>\n<p>Let’s see this in action. The following first builds the container. The second line runs the comtainer:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t foo .</span><br><span class=\"line\">$ docker run -it -p 8000:8000 foo </span><br><span class=\"line\">Your Web application is running at http://localhost:8080.</span><br><span class=\"line\">Stop this program at any time to terminate the Web Server.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If you open Firefox and enter <a href=\"http://localhost:8000/\">http://localhost:8000</a> in the URL bar you should see:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Welcome to the Racket Web Server</span><br><span class=\"line\"></span><br><span class=\"line\">Find out more about writing servlets by reading the Continue tutorial in the Help Desk.</span><br><span class=\"line\"></span><br><span class=\"line\">Find out more about the server by reading its reference manual in the Help Desk.</span><br><span class=\"line\"></span><br><span class=\"line\">Please replace this page with your favorite index page.</span><br><span class=\"line\"></span><br><span class=\"line\">Powered by Racket</span><br><span class=\"line\"></span><br><span class=\"line\">For more information on Racket, please follow the icon link.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Humm,  that was not what  I expected?  Reading into the Racket docs, I see I need to use a different URL:  <a href=\"http://localhost:8000/servlets/standalone.rkt\">http://localhost:8000/servlets/standalone.rkt</a>. Ok, that worked, the container builds and runs. Use Ctl-C to stop things. Let us examine what we have created. Issue the following command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">foo          latest    836d83e4f6b9   44 hours ago   490MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Packaging-without-loading-Racket\"><a href=\"#Packaging-without-loading-Racket\" class=\"headerlink\" title=\"Packaging without loading Racket\"></a>Packaging without loading Racket</h1><p>On my machine, I see a large container, wieghing in at 490 megabytes. That is pretty large for such a simple program. Using the program “dive” i can see that the first line of the Dockerfile: “FROM ubnutu” created a 73 MB layer in the container. The sencond line, which updates ubuntu and installs Racket, adds 417 MB !!! Doing the copy of the web1.rkt script adds 352 bytes.</p>\n<p>We can improve this. We loaded the full Racket environment into the container. We don’t need to do that. Our current setup assumes we will run Racket and let it run the web1.rkt script. So, we are interpreting the script. Ideally, we should be able to compile our Racket script.  Racket has command line tools, let’s explore those.</p>\n<p>The Racket documentation describes a set of tools for compiling and distributing Racket code. We’ll now explore raco. The raco tool provides a number of tools that are run from the command line. This is perfect for including racket into Ci/CD pipelines. We will explore raco exe and raco distribute.</p>\n<p>Let’s go back to what I said earlier about Racket being a dynamically linked  language.  Most  modern programming languages assume you are going to link your program dynamically. The executable will depend on libraries loading as the program is running. In a unix environment (Mac &amp; Linux), there is an environment  variable  called “LD_LIBRARY_PATH” that points to where system libraries are loaded from. For Windows machines  see <a href=\"https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications\">https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications</a>.</p>\n<p>To make a ccontainer work, we  need to gather all of  the dependencies together and load them all  into the  container.  This means we have to ;</p>\n<ul>\n<li>compile our Racket code into a  standalone executable,</li>\n<li>have just the Racket run-time load into the container vs. the entire Racket environment,</li>\n<li>have all libraries loaded into  the  container.</li>\n</ul>\n<p>Raco exe is used to compile our script. Instead of interpreting, after using raco exe, we get a stand alone executable. This means that the Racket run-time is included in. Raco exe alone creates a program that dependes on having the racket system installed on your machine. That is not quite what we want but let’s explore it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">raco exe web1.rkt</span><br><span class=\"line\">$ ls -lh</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile</span><br><span class=\"line\">-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt</span><br><span class=\"line\">$</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The directoy listing shows a 62 MB executable (web1).  That is a lot better than 490MB. However, that executable does depend on a working Racket installation. </p>\n<p>What we need is a way to combine the parts of Racket we need and the script to produce a working program. Raco distribute is the command for that! Raco Distribute creates a pacckage that can be run on other machines (without Racket installed). The command places the standalone executable and all dependencies into a directory.  For this example I’ll call that directory “build”.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">raco distribute build web1</span><br><span class=\"line\">$ ls -lh</span><br><span class=\"line\">total 126120</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile</span><br><span class=\"line\">drwxr-xr-x   4 muguira  staff   128B Sep 26 13:43 build</span><br><span class=\"line\">-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt</span><br><span class=\"line\"></span><br><span class=\"line\">$ du -d1 -h build</span><br><span class=\"line\"> 62M\tbuild/bin</span><br><span class=\"line\">5.7M\tbuild/lib</span><br><span class=\"line\"> 67M\tbuild</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -lh build/bin</span><br><span class=\"line\">total 125992</span><br><span class=\"line\">-rwxr-xr-x  1 muguira  staff    62M Sep 26 13:43 web1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The result is a 67MB self-contained directory that contains everything we want in one place. Under build/bin we see the executable  file web1, which is 62MB. The build/lib directory contains all of the dependencies. Now let’s change the Dockerfile and compare our results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY build .</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD [&quot;/app/bin/web1&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Notice, that we DO NOT update ubuntu or install Racket. Instead, we set a working directory in the container called /app and we copy the build directory into /app in the container. We still expose the port. Last, we change the command to run our program to point to “/app/bin/web1”</p>\n<p>To compare, let’s change the name of the container for this build to be foosmall:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t foosmall .</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class=\"line\">foo          latest    fee0476d757a   About a minute ago   490MB</span><br><span class=\"line\">foosmall     latest    24d628917cf5   8 minutes ago        143MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Our final container size is 143 MB. Using dive, we see that the docker copy added 70MB to the 73 Mb ubuntu base image.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This post walked through the steps to create a docker container with a working Racket program.  The small Racket program demonstrated how to create a simple web server that could reply with html to a browser.  Our first container effort created a large 490 MB container with the full Racket environment installed  inside the container. From a security point of view this is less than optmial.  We don’t need a full Racket install in the container to reply to a simple request. Our second effort reduced the container size and placed only the elements of the Raclet run-time in the container. The Racket environment supplied two commands  that helped us create a standalone executable. Finally we used docker commands to copy that executable into the container and expose the proper  ports. </p>\n","site":{"data":{}},"excerpt":"<p>Using Racket in Docker</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The Racket programming language is an implementation of the Scheme standard. Racket is very well supported. It has great capabilities as a teaching language. To get  started with Racket see <a href=\"https://racket-lang.org/\">https://racket-lang.org</a></p>\n<p>This post came about because one of the people on my team said that lisp and scheme were “no good for production, becuase you  can’t put them in containers.” This post will describe how to put Racket into a Docker container. In production environments, deploying software can be problematic. For example, many programming languages / solutions require loading additional components and libraries beyond the standard set that is shipped with the language. </p>\n<p>This post assumes you have installed both Racket and Docker on your machine. I also use the command line tool dive to inspect the container contents. Dive is a great tool.</p>\n<h1 id=\"A-simple-case-of-saying-hello\"><a href=\"#A-simple-case-of-saying-hello\" class=\"headerlink\" title=\"A simple case of saying hello\"></a>A simple case of saying hello</h1><p>This post covers 2 things: </p>\n<ul>\n<li>building the basic container with a working racket program, </li>\n<li>exploiting Racket tooling to create a compiled version of the sample program.</li>\n</ul>\n<p>First, we need a simple program. </p>\n<p>Our first sample Racket program is very simple. It will make use of Racket’s http services stack. This post is not a tutorial for Racket, there are many very well written tutorials in the Racket documentation.</p>\n<p>Our basic program will start, initialize Racket’s web stack, and return a message when somebody hits the URL with a browser.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">; bring in the racket web stack</span><br><span class=\"line\">(require web-server/servlet</span><br><span class=\"line\">         web-server/servlet-env)</span><br><span class=\"line\"></span><br><span class=\"line\">; this function will return some html to the requestor</span><br><span class=\"line\">(define (start request)</span><br><span class=\"line\">  (response/xexpr</span><br><span class=\"line\">   &#x27;(html</span><br><span class=\"line\">     (head (title &quot;James and his blog&quot;))</span><br><span class=\"line\">     (body (h1 &quot;My Blog under construction&quot;)))))</span><br><span class=\"line\"></span><br><span class=\"line\">; start the server on port 8000 and don&#x27;t launch a browser</span><br><span class=\"line\">; #:listen-ip tells the network stack to listen on all ip addresses</span><br><span class=\"line\">; #:launch-broswer says don&#x27;t start a new browser</span><br><span class=\"line\">(serve/servlet start #:port 8000 #:listen-ip #f #:launch-browser? #f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>From a container perspective, this program highlights a couple of concerns:</p>\n<ul>\n<li>The container will be running a server capable of responding to browser requests,</li>\n<li>The container will require a port to be opened,</li>\n<li>The program needs to have all of its dependencies loaded into the container.</li>\n</ul>\n<p>Racket, installed on my Mac is a dynamically linked application. That means libraries are loaded at run time, from system libraries. That is our first huddle to over come. Docker containers create a self contained environment. That means all dynamic code and dependent libraries needs to be inside inside the container.</p>\n<p>Let’s take a simple approach to get something running. Then we’ll improve it over several steps. As a first step, we’ll create a docker configuration file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">RUN apt update -y &amp;&amp; apt install -y racket</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY web1.rkt .</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD [&quot;racket&quot;, &quot;web1.rkt&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>That Dockerfile will create the container, update ubuntu to it’s latest  configuration, install Racket into the container, expose the port and run racket with the mentioned script. </p>\n<p>Let’s see this in action. The following first builds the container. The second line runs the comtainer:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t foo .</span><br><span class=\"line\">$ docker run -it -p 8000:8000 foo </span><br><span class=\"line\">Your Web application is running at http://localhost:8080.</span><br><span class=\"line\">Stop this program at any time to terminate the Web Server.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If you open Firefox and enter <a href=\"http://localhost:8000/\">http://localhost:8000</a> in the URL bar you should see:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Welcome to the Racket Web Server</span><br><span class=\"line\"></span><br><span class=\"line\">Find out more about writing servlets by reading the Continue tutorial in the Help Desk.</span><br><span class=\"line\"></span><br><span class=\"line\">Find out more about the server by reading its reference manual in the Help Desk.</span><br><span class=\"line\"></span><br><span class=\"line\">Please replace this page with your favorite index page.</span><br><span class=\"line\"></span><br><span class=\"line\">Powered by Racket</span><br><span class=\"line\"></span><br><span class=\"line\">For more information on Racket, please follow the icon link.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Humm,  that was not what  I expected?  Reading into the Racket docs, I see I need to use a different URL:  <a href=\"http://localhost:8000/servlets/standalone.rkt\">http://localhost:8000/servlets/standalone.rkt</a>. Ok, that worked, the container builds and runs. Use Ctl-C to stop things. Let us examine what we have created. Issue the following command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">foo          latest    836d83e4f6b9   44 hours ago   490MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Packaging-without-loading-Racket\"><a href=\"#Packaging-without-loading-Racket\" class=\"headerlink\" title=\"Packaging without loading Racket\"></a>Packaging without loading Racket</h1><p>On my machine, I see a large container, wieghing in at 490 megabytes. That is pretty large for such a simple program. Using the program “dive” i can see that the first line of the Dockerfile: “FROM ubnutu” created a 73 MB layer in the container. The sencond line, which updates ubuntu and installs Racket, adds 417 MB !!! Doing the copy of the web1.rkt script adds 352 bytes.</p>\n<p>We can improve this. We loaded the full Racket environment into the container. We don’t need to do that. Our current setup assumes we will run Racket and let it run the web1.rkt script. So, we are interpreting the script. Ideally, we should be able to compile our Racket script.  Racket has command line tools, let’s explore those.</p>\n<p>The Racket documentation describes a set of tools for compiling and distributing Racket code. We’ll now explore raco. The raco tool provides a number of tools that are run from the command line. This is perfect for including racket into Ci/CD pipelines. We will explore raco exe and raco distribute.</p>\n<p>Let’s go back to what I said earlier about Racket being a dynamically linked  language.  Most  modern programming languages assume you are going to link your program dynamically. The executable will depend on libraries loading as the program is running. In a unix environment (Mac &amp; Linux), there is an environment  variable  called “LD_LIBRARY_PATH” that points to where system libraries are loaded from. For Windows machines  see <a href=\"https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications\">https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN#search_order_for_desktop_applications</a>.</p>\n<p>To make a ccontainer work, we  need to gather all of  the dependencies together and load them all  into the  container.  This means we have to ;</p>\n<ul>\n<li>compile our Racket code into a  standalone executable,</li>\n<li>have just the Racket run-time load into the container vs. the entire Racket environment,</li>\n<li>have all libraries loaded into  the  container.</li>\n</ul>\n<p>Raco exe is used to compile our script. Instead of interpreting, after using raco exe, we get a stand alone executable. This means that the Racket run-time is included in. Raco exe alone creates a program that dependes on having the racket system installed on your machine. That is not quite what we want but let’s explore it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">raco exe web1.rkt</span><br><span class=\"line\">$ ls -lh</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile</span><br><span class=\"line\">-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt</span><br><span class=\"line\">$</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The directoy listing shows a 62 MB executable (web1).  That is a lot better than 490MB. However, that executable does depend on a working Racket installation. </p>\n<p>What we need is a way to combine the parts of Racket we need and the script to produce a working program. Raco distribute is the command for that! Raco Distribute creates a pacckage that can be run on other machines (without Racket installed). The command places the standalone executable and all dependencies into a directory.  For this example I’ll call that directory “build”.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">raco distribute build web1</span><br><span class=\"line\">$ ls -lh</span><br><span class=\"line\">total 126120</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   122B Sep 23 19:08 Dockerfile</span><br><span class=\"line\">drwxr-xr-x   4 muguira  staff   128B Sep 26 13:43 build</span><br><span class=\"line\">-rwxr-xr-x   1 muguira  staff    62M Sep 26 13:37 web1</span><br><span class=\"line\">-rw-r--r--   1 muguira  staff   352B Sep 24 17:43 web1.rkt</span><br><span class=\"line\"></span><br><span class=\"line\">$ du -d1 -h build</span><br><span class=\"line\"> 62M\tbuild/bin</span><br><span class=\"line\">5.7M\tbuild/lib</span><br><span class=\"line\"> 67M\tbuild</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -lh build/bin</span><br><span class=\"line\">total 125992</span><br><span class=\"line\">-rwxr-xr-x  1 muguira  staff    62M Sep 26 13:43 web1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The result is a 67MB self-contained directory that contains everything we want in one place. Under build/bin we see the executable  file web1, which is 62MB. The build/lib directory contains all of the dependencies. Now let’s change the Dockerfile and compare our results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY build .</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD [&quot;/app/bin/web1&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Notice, that we DO NOT update ubuntu or install Racket. Instead, we set a working directory in the container called /app and we copy the build directory into /app in the container. We still expose the port. Last, we change the command to run our program to point to “/app/bin/web1”</p>\n<p>To compare, let’s change the name of the container for this build to be foosmall:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ docker build -t foosmall .</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class=\"line\">foo          latest    fee0476d757a   About a minute ago   490MB</span><br><span class=\"line\">foosmall     latest    24d628917cf5   8 minutes ago        143MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Our final container size is 143 MB. Using dive, we see that the docker copy added 70MB to the 73 Mb ubuntu base image.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This post walked through the steps to create a docker container with a working Racket program.  The small Racket program demonstrated how to create a simple web server that could reply with html to a browser.  Our first container effort created a large 490 MB container with the full Racket environment installed  inside the container. From a security point of view this is less than optmial.  We don’t need a full Racket install in the container to reply to a simple request. Our second effort reduced the container size and placed only the elements of the Raclet run-time in the container. The Racket environment supplied two commands  that helped us create a standalone executable. Finally we used docker commands to copy that executable into the container and expose the proper  ports. </p>"},{"title":"Using Racket to define a message queue - part 1","date":"2021-10-13T14:26:28.000Z","_content":"\n\nThis post is the first in a series describing the creation of a message queue \n<!-- more -->\n# A Message queue in Racket\n\nThis post will explore creating a message queuing application in the Racket programming language.  Racket is a dialect of scheme.  Racket is very well documented on Racket.org. \n\nThis is not a tutorial on Racket, the environment, or the language. This post will build up the infrastructure for our message queuing application in several sections. A message queue defines a system that can store messages to specific topics and allow you retrieve these messages in order. The internal data structures used by the messaging system are a hash-table of topics and inside of each hash-table item, a queue to hold the messages for that topic.  The interface to the message queue will provide an API \n\n* to add / delete messages from a topic\n* check the number of messages in a topic queue\n* get a list of the current topics known to the system at that moment\n* remove topics from the system\n* remove all the items from a specific topic.\n\nThe message queue system presents a simple web application interface that utilizes HTTP as an interface and JSON as the low-level data communication language. We will build out the system in sections expanding the capability of our application and demonstrate how to test and verify the code. The final installment will demonstrate how package the system in a container for deployment.\n\n## Table contents:\n* The infrastructure\n* Dispatching\n* The start of the API\n* Conclusion\n\n## The web application shell\n\nTo start, let’s define a very simple web application using Racket and its supporting HTTP libraries and understand how it works.\n\n```\n#lang racket\n\n; bring in the required support code to handle socket and HTTP\n(require web-server/servlet\n\n         web-server/servlet-env)\n \n; This replies to http get requests with a simple message\n(define (my-app req)\n\n  (response/xexpr\n\n   `(html (head (title \"Hello world!\"))\n          (body (p \"Hey out there!\")))))\n \n; start the server and use ‘my-app’ when we get a http  request\n(serve/servlet my-app)\n\n\n```\nThe Racket language defines several packages that aid us in creating a web application.  While there are easier ways to start using Racket in a web context, we are going use packages that allows us configuration possibilities later. The sample code just presented loads two packages: the “web-server/servlet” and “web-server/servlet-env” packages.  These packages create an abstraction of a web server.  In this simple case, the server creates something called a servlet, which is a bit of code that replies to a browser request. Our first servlet changes the title of the page to “Hello World”. It also prints the message: “Hey out there”.\n\n## Moving the code structure toward an API\n\nIf we run this in the “DrRacket” environment, the default browser opens with the page displayed. \n\nThis behavior will not suit us as we create messaging API. Let’s move closer to the infrastructure we need for the API. If you look at the URL in the browser, you will see it says: http://localhost:8000/servlets/standalone.rkt.  \n\nLet’s take advantage of Racket’s flexibility. Start by changing the default port the web server is running on. We can change it by adding the scheme symbol: #:port to the last line. This way we have a way to set the port at run-time later when we package the system for deployment. Then, let’s change the URL from: “servlets/standalone.rkt” to “hello”. Last, we don’t want to open a browser each time we start the server. Making all these changes results in the following server start line:\n\n```\n(serve/servlet my-app \n      #:port 8000 \n      #:servlet-path  “/hello” \n      #:launch-browser #f)\n\n```\nThat’s better for the messaging API we’ll develop later in this article.\n\n# Dispatching\n\nIn general, a web server is a piece of code that accepts requests and dispatches each request out to handler code for processing.  The handler code might take the incoming payload from the caller and place it in a queue. It might even query a queue and return the queried contents to the caller.  Our message queuing system will allow you to organize messages into different topics. Each topic will have a queue to save the messages. Another example of a handler might to be create a list of topics currently known to the system.\n\nLet’s establish some architecture for our message queue.\n \n ![MQ-ARCH.png](/images/MQ-Architecture-1.png)\n\nThe system has a front door, which handles processing HTTP requests and returning HTTP responses. There is a middle layer that handles management of the topic hash-table and specific messages under each topic. The message queue is designed to be a component running on a server. We don’t have a graphical front end, but we will need to write a few short programs to drive our API for testing. We’ll get to these later.\n\nFor our purpose, let’s define a method that will reply with a simple “hello” string. This string will be used later to determine is the message queue is healthy.  The format of the output string will be “hello <date-time>”.  The date and time can be checked by the caller to determine if there is any lag.  By convention, we’ll assume that we only accept and reply using ASCII characters.  Later, this program will make use of JSON and using ASCII now will simplify our efforts.\n\n# Starting the API code\n\nWith our architecture in place, we can start to design our dispatch and API handlers. The front door component of our architecture presents the API to the caller.  The caller is a web app, such as a node JS, python, or Java application. The caller forms a HTTP GET / PUT request and sends it to the front door. It is the front door’s job to validate the request and dispatch it to the correct handler. The handler manipulates the topic hash and hands it results back to the caller.  \nThe architecture defines a simple language to interact with the message queue.  As a BNF:\n\n* Message: User_command || Admin_command\n\n* User_command: ENQUEUE || DEQUEUE || TOPIC_DATA || QUEUE_DRAIN\n* ENQUEUE: TOPIC_NAME PAYLOAD, a HTTP POST method call, returns status of “OK” or “Fail”\n* DEQUEUUE: TOPIC_NAME, a HTTP POST method call, returns the first item on the queue.\n* QUEUE_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of items removed\n\n* Admin_command: TOPIC_LIST || TOPIC_COUNT || TOPIC_DRAIN\n* TOPIC_LIST: TOPIC_NAME, a HTTP POST method call, returns a JSON list of topics currently in the system\n* TOPIC_COUNT: TOPIC_NAME, a HTTP POST method call, returns integer count of items in the named topic\n* TOPIC_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of removed items in the topic \n\n* TOPIC_NAME: ASCII string naming a topic, if the topic is not present it is created\n* PAYLOAD: ASCII JSON string\n\nThe caller forms a message that contains a topic, and a payload which will be placed in the queue on that topic.  For example, we might want to make a to-do topic and place items we want to accomplish today on our to-do topic. The front door would present an “enqueue” API call that accepts a bit of JSON.  In JSON notation, a request to add an item to our to-do list might look like:\n\n```\n{\n\ttopic: “To-Do”,\n\tpayload: “study for our CS mid-term”\n}\n\n```\nThe architecture of the front door should be simple. We receive a URL from the lower-level HTTP libraries and use dispatch to select and handle the specifics of the request. Before we create that code let’s attack sending responses back to the caller. We want our response to be in a standard form so a program-based caller can process it. HTTP responses are all formatted in a standard way:\n\n* A return code, which can be either: 200, 300, 400 or 500,\n* A return message, such as “OK”,\n* A time stamp,\n* The type of the response, for example “TEXT/HTML-MIME_TYPE” or “APPLICATION-JSON”\n* Additional headers if needed,\n* The content of the response in 8-bit bytes\n\nThe Racket code we will use looks like this;\n\n```\n(define (http-response content)  \n  (response/full\n    200                  \t\t; HTTP response code.\n    #\"OK\"                \t\t; HTTP response message.\n    (current-seconds)    \t\t; Timestamp.\n    TEXT/HTML-MIME-TYPE  \t    ; MIME type for content.\n    '()                     \t; Additional HTTP headers.\n    (list                \t\t; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n```\nThe routine takes the content as input and outputs a string as 8-bit ASCII. Later we will extend this to catch and trap errors. That extension will require us changing the response code and response message in case of problems. We will also extend this response code to write a log file.\n\nNow that we have a stand way to form responses let’s address a simple deployment aspect. The first API call we will create will help us monitor the API. It is very simple, for any call to the “monitoring” API, the handler will create a string that consists of the world “hello” and the date and time. It looks like this:\n\n```\n(define (monitoring request)\n  ; just say something useful\n  (http-response \"Hello: (today/utc))\"))\n\n```\nThe date and time are supplied by the (require gregor) package reference.  To use this in the DrRacket editor you need to use the package manager and load in gregor-lib. With the library loaded, the monitoring API will utilize the http-response method we just wrote to create a simple message for output.\n\n## Conclusion\n\nWe have started on our journey to use Racket to create a message queue component.  The article has created a simple web application and an architecture for the message queue.  The application presents a simple monitoring API endpoint that responses with a \"Hello\" message when called. We’ve also created a standard way to format responses to the caller that we can use from each API endpoint we define.\n\nThe next article will define an enqueue and a dequeue API call and redefine the architecture to handling testing of our end-points.\n\n","source":"_posts/A-message-Queue-in-Racket.md","raw":"---\ntitle: Using Racket to define a message queue - part 1\ndate: 2021-10-13 10:26:28\ntags:\n  - Racket\ncategories:\n  - Programming\n  - message queue\n---\n\n\nThis post is the first in a series describing the creation of a message queue \n<!-- more -->\n# A Message queue in Racket\n\nThis post will explore creating a message queuing application in the Racket programming language.  Racket is a dialect of scheme.  Racket is very well documented on Racket.org. \n\nThis is not a tutorial on Racket, the environment, or the language. This post will build up the infrastructure for our message queuing application in several sections. A message queue defines a system that can store messages to specific topics and allow you retrieve these messages in order. The internal data structures used by the messaging system are a hash-table of topics and inside of each hash-table item, a queue to hold the messages for that topic.  The interface to the message queue will provide an API \n\n* to add / delete messages from a topic\n* check the number of messages in a topic queue\n* get a list of the current topics known to the system at that moment\n* remove topics from the system\n* remove all the items from a specific topic.\n\nThe message queue system presents a simple web application interface that utilizes HTTP as an interface and JSON as the low-level data communication language. We will build out the system in sections expanding the capability of our application and demonstrate how to test and verify the code. The final installment will demonstrate how package the system in a container for deployment.\n\n## Table contents:\n* The infrastructure\n* Dispatching\n* The start of the API\n* Conclusion\n\n## The web application shell\n\nTo start, let’s define a very simple web application using Racket and its supporting HTTP libraries and understand how it works.\n\n```\n#lang racket\n\n; bring in the required support code to handle socket and HTTP\n(require web-server/servlet\n\n         web-server/servlet-env)\n \n; This replies to http get requests with a simple message\n(define (my-app req)\n\n  (response/xexpr\n\n   `(html (head (title \"Hello world!\"))\n          (body (p \"Hey out there!\")))))\n \n; start the server and use ‘my-app’ when we get a http  request\n(serve/servlet my-app)\n\n\n```\nThe Racket language defines several packages that aid us in creating a web application.  While there are easier ways to start using Racket in a web context, we are going use packages that allows us configuration possibilities later. The sample code just presented loads two packages: the “web-server/servlet” and “web-server/servlet-env” packages.  These packages create an abstraction of a web server.  In this simple case, the server creates something called a servlet, which is a bit of code that replies to a browser request. Our first servlet changes the title of the page to “Hello World”. It also prints the message: “Hey out there”.\n\n## Moving the code structure toward an API\n\nIf we run this in the “DrRacket” environment, the default browser opens with the page displayed. \n\nThis behavior will not suit us as we create messaging API. Let’s move closer to the infrastructure we need for the API. If you look at the URL in the browser, you will see it says: http://localhost:8000/servlets/standalone.rkt.  \n\nLet’s take advantage of Racket’s flexibility. Start by changing the default port the web server is running on. We can change it by adding the scheme symbol: #:port to the last line. This way we have a way to set the port at run-time later when we package the system for deployment. Then, let’s change the URL from: “servlets/standalone.rkt” to “hello”. Last, we don’t want to open a browser each time we start the server. Making all these changes results in the following server start line:\n\n```\n(serve/servlet my-app \n      #:port 8000 \n      #:servlet-path  “/hello” \n      #:launch-browser #f)\n\n```\nThat’s better for the messaging API we’ll develop later in this article.\n\n# Dispatching\n\nIn general, a web server is a piece of code that accepts requests and dispatches each request out to handler code for processing.  The handler code might take the incoming payload from the caller and place it in a queue. It might even query a queue and return the queried contents to the caller.  Our message queuing system will allow you to organize messages into different topics. Each topic will have a queue to save the messages. Another example of a handler might to be create a list of topics currently known to the system.\n\nLet’s establish some architecture for our message queue.\n \n ![MQ-ARCH.png](/images/MQ-Architecture-1.png)\n\nThe system has a front door, which handles processing HTTP requests and returning HTTP responses. There is a middle layer that handles management of the topic hash-table and specific messages under each topic. The message queue is designed to be a component running on a server. We don’t have a graphical front end, but we will need to write a few short programs to drive our API for testing. We’ll get to these later.\n\nFor our purpose, let’s define a method that will reply with a simple “hello” string. This string will be used later to determine is the message queue is healthy.  The format of the output string will be “hello <date-time>”.  The date and time can be checked by the caller to determine if there is any lag.  By convention, we’ll assume that we only accept and reply using ASCII characters.  Later, this program will make use of JSON and using ASCII now will simplify our efforts.\n\n# Starting the API code\n\nWith our architecture in place, we can start to design our dispatch and API handlers. The front door component of our architecture presents the API to the caller.  The caller is a web app, such as a node JS, python, or Java application. The caller forms a HTTP GET / PUT request and sends it to the front door. It is the front door’s job to validate the request and dispatch it to the correct handler. The handler manipulates the topic hash and hands it results back to the caller.  \nThe architecture defines a simple language to interact with the message queue.  As a BNF:\n\n* Message: User_command || Admin_command\n\n* User_command: ENQUEUE || DEQUEUE || TOPIC_DATA || QUEUE_DRAIN\n* ENQUEUE: TOPIC_NAME PAYLOAD, a HTTP POST method call, returns status of “OK” or “Fail”\n* DEQUEUUE: TOPIC_NAME, a HTTP POST method call, returns the first item on the queue.\n* QUEUE_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of items removed\n\n* Admin_command: TOPIC_LIST || TOPIC_COUNT || TOPIC_DRAIN\n* TOPIC_LIST: TOPIC_NAME, a HTTP POST method call, returns a JSON list of topics currently in the system\n* TOPIC_COUNT: TOPIC_NAME, a HTTP POST method call, returns integer count of items in the named topic\n* TOPIC_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of removed items in the topic \n\n* TOPIC_NAME: ASCII string naming a topic, if the topic is not present it is created\n* PAYLOAD: ASCII JSON string\n\nThe caller forms a message that contains a topic, and a payload which will be placed in the queue on that topic.  For example, we might want to make a to-do topic and place items we want to accomplish today on our to-do topic. The front door would present an “enqueue” API call that accepts a bit of JSON.  In JSON notation, a request to add an item to our to-do list might look like:\n\n```\n{\n\ttopic: “To-Do”,\n\tpayload: “study for our CS mid-term”\n}\n\n```\nThe architecture of the front door should be simple. We receive a URL from the lower-level HTTP libraries and use dispatch to select and handle the specifics of the request. Before we create that code let’s attack sending responses back to the caller. We want our response to be in a standard form so a program-based caller can process it. HTTP responses are all formatted in a standard way:\n\n* A return code, which can be either: 200, 300, 400 or 500,\n* A return message, such as “OK”,\n* A time stamp,\n* The type of the response, for example “TEXT/HTML-MIME_TYPE” or “APPLICATION-JSON”\n* Additional headers if needed,\n* The content of the response in 8-bit bytes\n\nThe Racket code we will use looks like this;\n\n```\n(define (http-response content)  \n  (response/full\n    200                  \t\t; HTTP response code.\n    #\"OK\"                \t\t; HTTP response message.\n    (current-seconds)    \t\t; Timestamp.\n    TEXT/HTML-MIME-TYPE  \t    ; MIME type for content.\n    '()                     \t; Additional HTTP headers.\n    (list                \t\t; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n```\nThe routine takes the content as input and outputs a string as 8-bit ASCII. Later we will extend this to catch and trap errors. That extension will require us changing the response code and response message in case of problems. We will also extend this response code to write a log file.\n\nNow that we have a stand way to form responses let’s address a simple deployment aspect. The first API call we will create will help us monitor the API. It is very simple, for any call to the “monitoring” API, the handler will create a string that consists of the world “hello” and the date and time. It looks like this:\n\n```\n(define (monitoring request)\n  ; just say something useful\n  (http-response \"Hello: (today/utc))\"))\n\n```\nThe date and time are supplied by the (require gregor) package reference.  To use this in the DrRacket editor you need to use the package manager and load in gregor-lib. With the library loaded, the monitoring API will utilize the http-response method we just wrote to create a simple message for output.\n\n## Conclusion\n\nWe have started on our journey to use Racket to create a message queue component.  The article has created a simple web application and an architecture for the message queue.  The application presents a simple monitoring API endpoint that responses with a \"Hello\" message when called. We’ve also created a standard way to format responses to the caller that we can use from each API endpoint we define.\n\nThe next article will define an enqueue and a dequeue API call and redefine the architecture to handling testing of our end-points.\n\n","slug":"A-message-Queue-in-Racket","published":1,"updated":"2021-10-29T21:23:21.062Z","_id":"ckvcvb0aq000wi7e8ad9c210p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This post is the first in a series describing the creation of a message queue </p>\n<span id=\"more\"></span>\n<h1 id=\"A-Message-queue-in-Racket\"><a href=\"#A-Message-queue-in-Racket\" class=\"headerlink\" title=\"A Message queue in Racket\"></a>A Message queue in Racket</h1><p>This post will explore creating a message queuing application in the Racket programming language.  Racket is a dialect of scheme.  Racket is very well documented on Racket.org. </p>\n<p>This is not a tutorial on Racket, the environment, or the language. This post will build up the infrastructure for our message queuing application in several sections. A message queue defines a system that can store messages to specific topics and allow you retrieve these messages in order. The internal data structures used by the messaging system are a hash-table of topics and inside of each hash-table item, a queue to hold the messages for that topic.  The interface to the message queue will provide an API </p>\n<ul>\n<li>to add / delete messages from a topic</li>\n<li>check the number of messages in a topic queue</li>\n<li>get a list of the current topics known to the system at that moment</li>\n<li>remove topics from the system</li>\n<li>remove all the items from a specific topic.</li>\n</ul>\n<p>The message queue system presents a simple web application interface that utilizes HTTP as an interface and JSON as the low-level data communication language. We will build out the system in sections expanding the capability of our application and demonstrate how to test and verify the code. The final installment will demonstrate how package the system in a container for deployment.</p>\n<h2 id=\"Table-contents\"><a href=\"#Table-contents\" class=\"headerlink\" title=\"Table contents:\"></a>Table contents:</h2><ul>\n<li>The infrastructure</li>\n<li>Dispatching</li>\n<li>The start of the API</li>\n<li>Conclusion</li>\n</ul>\n<h2 id=\"The-web-application-shell\"><a href=\"#The-web-application-shell\" class=\"headerlink\" title=\"The web application shell\"></a>The web application shell</h2><p>To start, let’s define a very simple web application using Racket and its supporting HTTP libraries and understand how it works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">; bring in the required support code to handle socket and HTTP</span><br><span class=\"line\">(require web-server/servlet</span><br><span class=\"line\"></span><br><span class=\"line\">         web-server/servlet-env)</span><br><span class=\"line\"> </span><br><span class=\"line\">; This replies to http get requests with a simple message</span><br><span class=\"line\">(define (my-app req)</span><br><span class=\"line\"></span><br><span class=\"line\">  (response/xexpr</span><br><span class=\"line\"></span><br><span class=\"line\">   `(html (head (title &quot;Hello world!&quot;))</span><br><span class=\"line\">          (body (p &quot;Hey out there!&quot;)))))</span><br><span class=\"line\"> </span><br><span class=\"line\">; start the server and use ‘my-app’ when we get a http  request</span><br><span class=\"line\">(serve/servlet my-app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The Racket language defines several packages that aid us in creating a web application.  While there are easier ways to start using Racket in a web context, we are going use packages that allows us configuration possibilities later. The sample code just presented loads two packages: the “web-server/servlet” and “web-server/servlet-env” packages.  These packages create an abstraction of a web server.  In this simple case, the server creates something called a servlet, which is a bit of code that replies to a browser request. Our first servlet changes the title of the page to “Hello World”. It also prints the message: “Hey out there”.</p>\n<h2 id=\"Moving-the-code-structure-toward-an-API\"><a href=\"#Moving-the-code-structure-toward-an-API\" class=\"headerlink\" title=\"Moving the code structure toward an API\"></a>Moving the code structure toward an API</h2><p>If we run this in the “DrRacket” environment, the default browser opens with the page displayed. </p>\n<p>This behavior will not suit us as we create messaging API. Let’s move closer to the infrastructure we need for the API. If you look at the URL in the browser, you will see it says: <a href=\"http://localhost:8000/servlets/standalone.rkt\">http://localhost:8000/servlets/standalone.rkt</a>.  </p>\n<p>Let’s take advantage of Racket’s flexibility. Start by changing the default port the web server is running on. We can change it by adding the scheme symbol: #:port to the last line. This way we have a way to set the port at run-time later when we package the system for deployment. Then, let’s change the URL from: “servlets/standalone.rkt” to “hello”. Last, we don’t want to open a browser each time we start the server. Making all these changes results in the following server start line:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(serve/servlet my-app </span><br><span class=\"line\">      #:port 8000 </span><br><span class=\"line\">      #:servlet-path  “/hello” </span><br><span class=\"line\">      #:launch-browser #f)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>That’s better for the messaging API we’ll develop later in this article.</p>\n<h1 id=\"Dispatching\"><a href=\"#Dispatching\" class=\"headerlink\" title=\"Dispatching\"></a>Dispatching</h1><p>In general, a web server is a piece of code that accepts requests and dispatches each request out to handler code for processing.  The handler code might take the incoming payload from the caller and place it in a queue. It might even query a queue and return the queried contents to the caller.  Our message queuing system will allow you to organize messages into different topics. Each topic will have a queue to save the messages. Another example of a handler might to be create a list of topics currently known to the system.</p>\n<p>Let’s establish some architecture for our message queue.</p>\n<p> <img src=\"/images/MQ-Architecture-1.png\" alt=\"MQ-ARCH.png\"></p>\n<p>The system has a front door, which handles processing HTTP requests and returning HTTP responses. There is a middle layer that handles management of the topic hash-table and specific messages under each topic. The message queue is designed to be a component running on a server. We don’t have a graphical front end, but we will need to write a few short programs to drive our API for testing. We’ll get to these later.</p>\n<p>For our purpose, let’s define a method that will reply with a simple “hello” string. This string will be used later to determine is the message queue is healthy.  The format of the output string will be “hello <date-time>”.  The date and time can be checked by the caller to determine if there is any lag.  By convention, we’ll assume that we only accept and reply using ASCII characters.  Later, this program will make use of JSON and using ASCII now will simplify our efforts.</p>\n<h1 id=\"Starting-the-API-code\"><a href=\"#Starting-the-API-code\" class=\"headerlink\" title=\"Starting the API code\"></a>Starting the API code</h1><p>With our architecture in place, we can start to design our dispatch and API handlers. The front door component of our architecture presents the API to the caller.  The caller is a web app, such as a node JS, python, or Java application. The caller forms a HTTP GET / PUT request and sends it to the front door. It is the front door’s job to validate the request and dispatch it to the correct handler. The handler manipulates the topic hash and hands it results back to the caller.<br>The architecture defines a simple language to interact with the message queue.  As a BNF:</p>\n<ul>\n<li><p>Message: User_command || Admin_command</p>\n</li>\n<li><p>User_command: ENQUEUE || DEQUEUE || TOPIC_DATA || QUEUE_DRAIN</p>\n</li>\n<li><p>ENQUEUE: TOPIC_NAME PAYLOAD, a HTTP POST method call, returns status of “OK” or “Fail”</p>\n</li>\n<li><p>DEQUEUUE: TOPIC_NAME, a HTTP POST method call, returns the first item on the queue.</p>\n</li>\n<li><p>QUEUE_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of items removed</p>\n</li>\n<li><p>Admin_command: TOPIC_LIST || TOPIC_COUNT || TOPIC_DRAIN</p>\n</li>\n<li><p>TOPIC_LIST: TOPIC_NAME, a HTTP POST method call, returns a JSON list of topics currently in the system</p>\n</li>\n<li><p>TOPIC_COUNT: TOPIC_NAME, a HTTP POST method call, returns integer count of items in the named topic</p>\n</li>\n<li><p>TOPIC_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of removed items in the topic </p>\n</li>\n<li><p>TOPIC_NAME: ASCII string naming a topic, if the topic is not present it is created</p>\n</li>\n<li><p>PAYLOAD: ASCII JSON string</p>\n</li>\n</ul>\n<p>The caller forms a message that contains a topic, and a payload which will be placed in the queue on that topic.  For example, we might want to make a to-do topic and place items we want to accomplish today on our to-do topic. The front door would present an “enqueue” API call that accepts a bit of JSON.  In JSON notation, a request to add an item to our to-do list might look like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">s''topic: “To-Do”,</span><br><span class=\"line\">s''payload: “study for our CS mid-term”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The architecture of the front door should be simple. We receive a URL from the lower-level HTTP libraries and use dispatch to select and handle the specifics of the request. Before we create that code let’s attack sending responses back to the caller. We want our response to be in a standard form so a program-based caller can process it. HTTP responses are all formatted in a standard way:</p>\n<ul>\n<li>A return code, which can be either: 200, 300, 400 or 500,</li>\n<li>A return message, such as “OK”,</li>\n<li>A time stamp,</li>\n<li>The type of the response, for example “TEXT/HTML-MIME_TYPE” or “APPLICATION-JSON”</li>\n<li>Additional headers if needed,</li>\n<li>The content of the response in 8-bit bytes</li>\n</ul>\n<p>The Racket code we will use looks like this;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  \t\t; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                \t\t; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    \t\t; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  \t    ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                     \t; Additional HTTP headers.</span><br><span class=\"line\">    (list                \t\t; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The routine takes the content as input and outputs a string as 8-bit ASCII. Later we will extend this to catch and trap errors. That extension will require us changing the response code and response message in case of problems. We will also extend this response code to write a log file.</p>\n<p>Now that we have a stand way to form responses let’s address a simple deployment aspect. The first API call we will create will help us monitor the API. It is very simple, for any call to the “monitoring” API, the handler will create a string that consists of the world “hello” and the date and time. It looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (monitoring request)</span><br><span class=\"line\">  ; just say something useful</span><br><span class=\"line\">  (http-response &quot;Hello: (today/utc))&quot;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The date and time are supplied by the (require gregor) package reference.  To use this in the DrRacket editor you need to use the package manager and load in gregor-lib. With the library loaded, the monitoring API will utilize the http-response method we just wrote to create a simple message for output.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We have started on our journey to use Racket to create a message queue component.  The article has created a simple web application and an architecture for the message queue.  The application presents a simple monitoring API endpoint that responses with a “Hello” message when called. We’ve also created a standard way to format responses to the caller that we can use from each API endpoint we define.</p>\n<p>The next article will define an enqueue and a dequeue API call and redefine the architecture to handling testing of our end-points.</p>\n","site":{"data":{}},"excerpt":"<p>This post is the first in a series describing the creation of a message queue </p>","more":"<h1 id=\"A-Message-queue-in-Racket\"><a href=\"#A-Message-queue-in-Racket\" class=\"headerlink\" title=\"A Message queue in Racket\"></a>A Message queue in Racket</h1><p>This post will explore creating a message queuing application in the Racket programming language.  Racket is a dialect of scheme.  Racket is very well documented on Racket.org. </p>\n<p>This is not a tutorial on Racket, the environment, or the language. This post will build up the infrastructure for our message queuing application in several sections. A message queue defines a system that can store messages to specific topics and allow you retrieve these messages in order. The internal data structures used by the messaging system are a hash-table of topics and inside of each hash-table item, a queue to hold the messages for that topic.  The interface to the message queue will provide an API </p>\n<ul>\n<li>to add / delete messages from a topic</li>\n<li>check the number of messages in a topic queue</li>\n<li>get a list of the current topics known to the system at that moment</li>\n<li>remove topics from the system</li>\n<li>remove all the items from a specific topic.</li>\n</ul>\n<p>The message queue system presents a simple web application interface that utilizes HTTP as an interface and JSON as the low-level data communication language. We will build out the system in sections expanding the capability of our application and demonstrate how to test and verify the code. The final installment will demonstrate how package the system in a container for deployment.</p>\n<h2 id=\"Table-contents\"><a href=\"#Table-contents\" class=\"headerlink\" title=\"Table contents:\"></a>Table contents:</h2><ul>\n<li>The infrastructure</li>\n<li>Dispatching</li>\n<li>The start of the API</li>\n<li>Conclusion</li>\n</ul>\n<h2 id=\"The-web-application-shell\"><a href=\"#The-web-application-shell\" class=\"headerlink\" title=\"The web application shell\"></a>The web application shell</h2><p>To start, let’s define a very simple web application using Racket and its supporting HTTP libraries and understand how it works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">; bring in the required support code to handle socket and HTTP</span><br><span class=\"line\">(require web-server/servlet</span><br><span class=\"line\"></span><br><span class=\"line\">         web-server/servlet-env)</span><br><span class=\"line\"> </span><br><span class=\"line\">; This replies to http get requests with a simple message</span><br><span class=\"line\">(define (my-app req)</span><br><span class=\"line\"></span><br><span class=\"line\">  (response/xexpr</span><br><span class=\"line\"></span><br><span class=\"line\">   `(html (head (title &quot;Hello world!&quot;))</span><br><span class=\"line\">          (body (p &quot;Hey out there!&quot;)))))</span><br><span class=\"line\"> </span><br><span class=\"line\">; start the server and use ‘my-app’ when we get a http  request</span><br><span class=\"line\">(serve/servlet my-app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The Racket language defines several packages that aid us in creating a web application.  While there are easier ways to start using Racket in a web context, we are going use packages that allows us configuration possibilities later. The sample code just presented loads two packages: the “web-server/servlet” and “web-server/servlet-env” packages.  These packages create an abstraction of a web server.  In this simple case, the server creates something called a servlet, which is a bit of code that replies to a browser request. Our first servlet changes the title of the page to “Hello World”. It also prints the message: “Hey out there”.</p>\n<h2 id=\"Moving-the-code-structure-toward-an-API\"><a href=\"#Moving-the-code-structure-toward-an-API\" class=\"headerlink\" title=\"Moving the code structure toward an API\"></a>Moving the code structure toward an API</h2><p>If we run this in the “DrRacket” environment, the default browser opens with the page displayed. </p>\n<p>This behavior will not suit us as we create messaging API. Let’s move closer to the infrastructure we need for the API. If you look at the URL in the browser, you will see it says: <a href=\"http://localhost:8000/servlets/standalone.rkt\">http://localhost:8000/servlets/standalone.rkt</a>.  </p>\n<p>Let’s take advantage of Racket’s flexibility. Start by changing the default port the web server is running on. We can change it by adding the scheme symbol: #:port to the last line. This way we have a way to set the port at run-time later when we package the system for deployment. Then, let’s change the URL from: “servlets/standalone.rkt” to “hello”. Last, we don’t want to open a browser each time we start the server. Making all these changes results in the following server start line:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(serve/servlet my-app </span><br><span class=\"line\">      #:port 8000 </span><br><span class=\"line\">      #:servlet-path  “/hello” </span><br><span class=\"line\">      #:launch-browser #f)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>That’s better for the messaging API we’ll develop later in this article.</p>\n<h1 id=\"Dispatching\"><a href=\"#Dispatching\" class=\"headerlink\" title=\"Dispatching\"></a>Dispatching</h1><p>In general, a web server is a piece of code that accepts requests and dispatches each request out to handler code for processing.  The handler code might take the incoming payload from the caller and place it in a queue. It might even query a queue and return the queried contents to the caller.  Our message queuing system will allow you to organize messages into different topics. Each topic will have a queue to save the messages. Another example of a handler might to be create a list of topics currently known to the system.</p>\n<p>Let’s establish some architecture for our message queue.</p>\n<p> <img src=\"/images/MQ-Architecture-1.png\" alt=\"MQ-ARCH.png\"></p>\n<p>The system has a front door, which handles processing HTTP requests and returning HTTP responses. There is a middle layer that handles management of the topic hash-table and specific messages under each topic. The message queue is designed to be a component running on a server. We don’t have a graphical front end, but we will need to write a few short programs to drive our API for testing. We’ll get to these later.</p>\n<p>For our purpose, let’s define a method that will reply with a simple “hello” string. This string will be used later to determine is the message queue is healthy.  The format of the output string will be “hello <date-time>”.  The date and time can be checked by the caller to determine if there is any lag.  By convention, we’ll assume that we only accept and reply using ASCII characters.  Later, this program will make use of JSON and using ASCII now will simplify our efforts.</p>\n<h1 id=\"Starting-the-API-code\"><a href=\"#Starting-the-API-code\" class=\"headerlink\" title=\"Starting the API code\"></a>Starting the API code</h1><p>With our architecture in place, we can start to design our dispatch and API handlers. The front door component of our architecture presents the API to the caller.  The caller is a web app, such as a node JS, python, or Java application. The caller forms a HTTP GET / PUT request and sends it to the front door. It is the front door’s job to validate the request and dispatch it to the correct handler. The handler manipulates the topic hash and hands it results back to the caller.<br>The architecture defines a simple language to interact with the message queue.  As a BNF:</p>\n<ul>\n<li><p>Message: User_command || Admin_command</p>\n</li>\n<li><p>User_command: ENQUEUE || DEQUEUE || TOPIC_DATA || QUEUE_DRAIN</p>\n</li>\n<li><p>ENQUEUE: TOPIC_NAME PAYLOAD, a HTTP POST method call, returns status of “OK” or “Fail”</p>\n</li>\n<li><p>DEQUEUUE: TOPIC_NAME, a HTTP POST method call, returns the first item on the queue.</p>\n</li>\n<li><p>QUEUE_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of items removed</p>\n</li>\n<li><p>Admin_command: TOPIC_LIST || TOPIC_COUNT || TOPIC_DRAIN</p>\n</li>\n<li><p>TOPIC_LIST: TOPIC_NAME, a HTTP POST method call, returns a JSON list of topics currently in the system</p>\n</li>\n<li><p>TOPIC_COUNT: TOPIC_NAME, a HTTP POST method call, returns integer count of items in the named topic</p>\n</li>\n<li><p>TOPIC_DRAIN: TOPIC_NAME, a HTTP POST method call, returns the number of removed items in the topic </p>\n</li>\n<li><p>TOPIC_NAME: ASCII string naming a topic, if the topic is not present it is created</p>\n</li>\n<li><p>PAYLOAD: ASCII JSON string</p>\n</li>\n</ul>\n<p>The caller forms a message that contains a topic, and a payload which will be placed in the queue on that topic.  For example, we might want to make a to-do topic and place items we want to accomplish today on our to-do topic. The front door would present an “enqueue” API call that accepts a bit of JSON.  In JSON notation, a request to add an item to our to-do list might look like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">s''topic: “To-Do”,</span><br><span class=\"line\">s''payload: “study for our CS mid-term”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The architecture of the front door should be simple. We receive a URL from the lower-level HTTP libraries and use dispatch to select and handle the specifics of the request. Before we create that code let’s attack sending responses back to the caller. We want our response to be in a standard form so a program-based caller can process it. HTTP responses are all formatted in a standard way:</p>\n<ul>\n<li>A return code, which can be either: 200, 300, 400 or 500,</li>\n<li>A return message, such as “OK”,</li>\n<li>A time stamp,</li>\n<li>The type of the response, for example “TEXT/HTML-MIME_TYPE” or “APPLICATION-JSON”</li>\n<li>Additional headers if needed,</li>\n<li>The content of the response in 8-bit bytes</li>\n</ul>\n<p>The Racket code we will use looks like this;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  \t\t; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                \t\t; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    \t\t; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  \t    ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                     \t; Additional HTTP headers.</span><br><span class=\"line\">    (list                \t\t; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The routine takes the content as input and outputs a string as 8-bit ASCII. Later we will extend this to catch and trap errors. That extension will require us changing the response code and response message in case of problems. We will also extend this response code to write a log file.</p>\n<p>Now that we have a stand way to form responses let’s address a simple deployment aspect. The first API call we will create will help us monitor the API. It is very simple, for any call to the “monitoring” API, the handler will create a string that consists of the world “hello” and the date and time. It looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (monitoring request)</span><br><span class=\"line\">  ; just say something useful</span><br><span class=\"line\">  (http-response &quot;Hello: (today/utc))&quot;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The date and time are supplied by the (require gregor) package reference.  To use this in the DrRacket editor you need to use the package manager and load in gregor-lib. With the library loaded, the monitoring API will utilize the http-response method we just wrote to create a simple message for output.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We have started on our journey to use Racket to create a message queue component.  The article has created a simple web application and an architecture for the message queue.  The application presents a simple monitoring API endpoint that responses with a “Hello” message when called. We’ve also created a standard way to format responses to the caller that we can use from each API endpoint we define.</p>\n<p>The next article will define an enqueue and a dequeue API call and redefine the architecture to handling testing of our end-points.</p>"},{"title":"A-message-queue-in-racket-part-3","date":"2021-10-23T01:14:10.000Z","_content":"\n\nThis is the third part of the series\n<!-- more -->\n\n# Table of Contents:\n* Introduction and review of the Front-door shell\n* dequeue - deleting messages from a topic\n* The Admin interface\n* Conclusion\n\n# Introduction\n\nThe first 2 parts of this series introduced the scaffolding and 2 API calls. We are creating a message queuing system, similar to Rabbit MQ or Apache ActiveMQ. The idea is to create a server that can be used to store and retrieve data. The server interface is an API consisting of 2 different layers: a user interface for adding and deleting items from queues assoicated with topics; and an administration interface that returns the number of topics, list of topics, data for a topic and allows us to remove all data for a topic.\n\nAt this point we have the scaffolding and 2 API  calls implemented: Hello, which is a monitoring API; and enqueue which is used to add items into the queue for a given topic. This time we will implement; dequeue, which completes the user interface. We will also implement the administrative interface consisting of topic-list, topic-data, topic-count, topic-drain, topic-remove and drain-queue. That is  a lot, let's get going.\n\nFirst, to set expectations, here is the complete program to date:\n\n```\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n\n; Hello - say hello and add the date and time\n(define (hello request)\n  ; just say nothing useful\n  (http-response \"<div>welcome to <span style=\\\"color:blue\\\">jamQ</span></div>\"))\n\n;\n; handle adding  a message to a topic\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n\n;\n; helper function to return a byte array\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n;\n; front-door of the enqueue function\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n      (displayln\n       (format\n        \"enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%\"\n        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))\n      (let ([rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set! rtn 'data payload-data)\n        (hash-set! rtn 'count (hash-count topic-hash))\n        (hash-set! rtn 'keys (hash-keys topic-hash))\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n\n;\n; return a byte array formated like an http response\n(define (http-response content)  \n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n;\n; look up table for the routing of our API\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") hello]\n   [(\"hello\") hello]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n   [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n   [(\"topic-count\") topic-count]\n   [(\"topic-data\") #:method \"post\" topic-data]\n   [else (error \"page not found\")]))\n\n\n\n(define (request-handler request)\n  (dispatch request))\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n```\n\n# Implemention of dequeu - deleting message from a topic\n\nOur first function to implement is the opposite of adding an item to a topic, removing an item. In this case, we just remove and return the first  item in the queue. Before we see the implementation let's review the architecture of the system and the topic hash data structure. The system architecture is a front door that handles http requests and responses. There is a middle layer that handles the internal data structures and finally the internal  data structures themselves.\n\n![system architecture](/images/MQ-Architecture-1.png)\n\nThe internal data structure we are manipulating is a hash table. The keys in the hash table are the topic  names. For each key, the value is a queue with all the items associated with that topic.\n\n![internal data structure](/images/Racket-queue-2.png)\n\nThe enqueue function checked to see if a topic name existed in the hash table, adding it and the message data if required. Deleting messages off a topic is handled by popping the top item off the queue for a topic and returning that message.\n\n```\n\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n        \n(define (deque request)\n  ; check if topic exists, remove 1st item from topic queue\n  (let* ([js-hsh (request->jshash request)]\n         [topic-name (hash-ref js-hsh 'topicname)]\n         [rtn (make-hash)]\n         [datam (remove-data-from-topic topic-name)])\n    (begin\n      (hash-set! rtn 'topic-name topic-name)\n      (hash-set! rtn 'payload datam)\n      (displayln (format \":datam:->~v --> ~v~%\" datam rtn ))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))\n\n```\n\nThe implementation of deque has 3 helper functions: \"remove-data-from-topic\", \"get-queue-for-topic\" and \"request->jshash\". \n\n* Request->jshash takes the data coming in on the http POST and converts it to a Racket hash for easy access. \n* get-queue-for-topic is a function to return the queue assoicated with a topic-name.\n* remove-data-from-topic handles the actual removal of the top message from the topic queue.\n* deque handles reformating the incoming http request, removing the data and formating the http response.\n\n# The admin interface\n\nEnque and deque are the \"user interface\" API calls for adding and removing messages to and from a topic. Next, let's start on the administration interface. First we can implement \"topic-list\", which simply creates a JSON list of all known topic names.\n\n```\n(define (topic-list request)\n  ; show me all the topics in the topic-hash\n  (begin\n    (let* ([rtn (make-hash)])\n      (hash-set! rtn 'topic-list (hash-keys topic-hash))\n           \n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda() (write-json rtn)))))))\n\n```\n\nThe implementation is straight forward. Create a return hash, which holds our topic name list. Get the current keys from the topic-name hash and format that list out as JSON.\n\nLet's tackle \"topic-count\" and \"topic-data\". \n\n```\n(define (topic-count request)\n  ; show me a count of topics\n  ; input: { count-topics: \"all\" }\n  (begin\n    (let ([rtn (make-hash)])\n      (hash-set! rtn 'topic-count (hash-count topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda () (write-json rtn)))))))\n\n(define (topic-data request)\n  ; list all data in a topic\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set!  rtn 'topic-list (queue->list (hash-ref topic-hash topic-name)))\n        (displayln (with-output-to-string (lambda () (write-json rtn))))\n        (http-response (with-output-to-string (lambda () (write-json rtn))))))\n```\n\nThe function \"topic-count\" grabs a count of the total number of topics in the topic hash at that moment and formats it out to a JSON object. The function \"topic-data\" returns a JSON list of all the messages associated with a topic.\n\nNext, we will code \"drain-queue\". The function \"drain-queue\" is supposed to remove all data associated with an input topic-name. Danger!! The implementation takes advantage of the hash function library to overwrite the queue for that topic name with a freshly initialized and empty queue. That is, we OVERWRITE the old queue.  It is up to the gabage collector to free the memory used by the old messages in the old queue.\n\n```\n(define (drain-queue request)\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-set! topic-hash topic-name (make-queue))\n    (hash-set!  rtn 'topic-name topic-name)\n    (hash-set! rtn 'message \"drain-queue: all data deleted\")\n    (displayln (with-output-to-string (lambda () (write-json rtn))))\n    (http-response (with-output-to-string (lambda ()  (write-json  rtn))))))\n```\n\nFinally, we can code \"topic-remove\". This function removes the topic from the topic list. The Racket garbage collector will handle cleaning up the data/queue.\n\n```\n(define (topic-remove request)\n  (let* ([hsh  (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-remove! topic-hash topic-name)\n    (hash-set! rtn 'message (format \"topic-remove: removed topic ~v\" topic-name))\n    (displayln (with-output-to-string (lambda  () (write-json rtn))))\n    (http-response (with-output-to-string (lambda () (write-json rtn))))))\n```\n\nWith that we have defined a message queue. It is 218 lines total. It is not very sophisticaded. It also may have bugs. \n\n# Conclusion\n\nThat rounds out the full implementation of the message queue system. The next article will explore how to restrcuture the single code file so we can test it using Racket's test capabilities.","source":"_posts/A-message-queue-in-racket-part-3.md","raw":"---\ntitle: A-message-queue-in-racket-part-3\ndate: 2021-10-22 21:14:10\ntags:\n  - Racket\ncategories:\n  - Programming\n  - message queue\n---\n\n\nThis is the third part of the series\n<!-- more -->\n\n# Table of Contents:\n* Introduction and review of the Front-door shell\n* dequeue - deleting messages from a topic\n* The Admin interface\n* Conclusion\n\n# Introduction\n\nThe first 2 parts of this series introduced the scaffolding and 2 API calls. We are creating a message queuing system, similar to Rabbit MQ or Apache ActiveMQ. The idea is to create a server that can be used to store and retrieve data. The server interface is an API consisting of 2 different layers: a user interface for adding and deleting items from queues assoicated with topics; and an administration interface that returns the number of topics, list of topics, data for a topic and allows us to remove all data for a topic.\n\nAt this point we have the scaffolding and 2 API  calls implemented: Hello, which is a monitoring API; and enqueue which is used to add items into the queue for a given topic. This time we will implement; dequeue, which completes the user interface. We will also implement the administrative interface consisting of topic-list, topic-data, topic-count, topic-drain, topic-remove and drain-queue. That is  a lot, let's get going.\n\nFirst, to set expectations, here is the complete program to date:\n\n```\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n\n; Hello - say hello and add the date and time\n(define (hello request)\n  ; just say nothing useful\n  (http-response \"<div>welcome to <span style=\\\"color:blue\\\">jamQ</span></div>\"))\n\n;\n; handle adding  a message to a topic\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n\n;\n; helper function to return a byte array\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n;\n; front-door of the enqueue function\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n      (displayln\n       (format\n        \"enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%\"\n        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))\n      (let ([rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set! rtn 'data payload-data)\n        (hash-set! rtn 'count (hash-count topic-hash))\n        (hash-set! rtn 'keys (hash-keys topic-hash))\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n\n;\n; return a byte array formated like an http response\n(define (http-response content)  \n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n;\n; look up table for the routing of our API\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") hello]\n   [(\"hello\") hello]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n   [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n   [(\"topic-count\") topic-count]\n   [(\"topic-data\") #:method \"post\" topic-data]\n   [else (error \"page not found\")]))\n\n\n\n(define (request-handler request)\n  (dispatch request))\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n```\n\n# Implemention of dequeu - deleting message from a topic\n\nOur first function to implement is the opposite of adding an item to a topic, removing an item. In this case, we just remove and return the first  item in the queue. Before we see the implementation let's review the architecture of the system and the topic hash data structure. The system architecture is a front door that handles http requests and responses. There is a middle layer that handles the internal data structures and finally the internal  data structures themselves.\n\n![system architecture](/images/MQ-Architecture-1.png)\n\nThe internal data structure we are manipulating is a hash table. The keys in the hash table are the topic  names. For each key, the value is a queue with all the items associated with that topic.\n\n![internal data structure](/images/Racket-queue-2.png)\n\nThe enqueue function checked to see if a topic name existed in the hash table, adding it and the message data if required. Deleting messages off a topic is handled by popping the top item off the queue for a topic and returning that message.\n\n```\n\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n        \n(define (deque request)\n  ; check if topic exists, remove 1st item from topic queue\n  (let* ([js-hsh (request->jshash request)]\n         [topic-name (hash-ref js-hsh 'topicname)]\n         [rtn (make-hash)]\n         [datam (remove-data-from-topic topic-name)])\n    (begin\n      (hash-set! rtn 'topic-name topic-name)\n      (hash-set! rtn 'payload datam)\n      (displayln (format \":datam:->~v --> ~v~%\" datam rtn ))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))\n\n```\n\nThe implementation of deque has 3 helper functions: \"remove-data-from-topic\", \"get-queue-for-topic\" and \"request->jshash\". \n\n* Request->jshash takes the data coming in on the http POST and converts it to a Racket hash for easy access. \n* get-queue-for-topic is a function to return the queue assoicated with a topic-name.\n* remove-data-from-topic handles the actual removal of the top message from the topic queue.\n* deque handles reformating the incoming http request, removing the data and formating the http response.\n\n# The admin interface\n\nEnque and deque are the \"user interface\" API calls for adding and removing messages to and from a topic. Next, let's start on the administration interface. First we can implement \"topic-list\", which simply creates a JSON list of all known topic names.\n\n```\n(define (topic-list request)\n  ; show me all the topics in the topic-hash\n  (begin\n    (let* ([rtn (make-hash)])\n      (hash-set! rtn 'topic-list (hash-keys topic-hash))\n           \n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda() (write-json rtn)))))))\n\n```\n\nThe implementation is straight forward. Create a return hash, which holds our topic name list. Get the current keys from the topic-name hash and format that list out as JSON.\n\nLet's tackle \"topic-count\" and \"topic-data\". \n\n```\n(define (topic-count request)\n  ; show me a count of topics\n  ; input: { count-topics: \"all\" }\n  (begin\n    (let ([rtn (make-hash)])\n      (hash-set! rtn 'topic-count (hash-count topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda () (write-json rtn)))))))\n\n(define (topic-data request)\n  ; list all data in a topic\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set!  rtn 'topic-list (queue->list (hash-ref topic-hash topic-name)))\n        (displayln (with-output-to-string (lambda () (write-json rtn))))\n        (http-response (with-output-to-string (lambda () (write-json rtn))))))\n```\n\nThe function \"topic-count\" grabs a count of the total number of topics in the topic hash at that moment and formats it out to a JSON object. The function \"topic-data\" returns a JSON list of all the messages associated with a topic.\n\nNext, we will code \"drain-queue\". The function \"drain-queue\" is supposed to remove all data associated with an input topic-name. Danger!! The implementation takes advantage of the hash function library to overwrite the queue for that topic name with a freshly initialized and empty queue. That is, we OVERWRITE the old queue.  It is up to the gabage collector to free the memory used by the old messages in the old queue.\n\n```\n(define (drain-queue request)\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-set! topic-hash topic-name (make-queue))\n    (hash-set!  rtn 'topic-name topic-name)\n    (hash-set! rtn 'message \"drain-queue: all data deleted\")\n    (displayln (with-output-to-string (lambda () (write-json rtn))))\n    (http-response (with-output-to-string (lambda ()  (write-json  rtn))))))\n```\n\nFinally, we can code \"topic-remove\". This function removes the topic from the topic list. The Racket garbage collector will handle cleaning up the data/queue.\n\n```\n(define (topic-remove request)\n  (let* ([hsh  (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-remove! topic-hash topic-name)\n    (hash-set! rtn 'message (format \"topic-remove: removed topic ~v\" topic-name))\n    (displayln (with-output-to-string (lambda  () (write-json rtn))))\n    (http-response (with-output-to-string (lambda () (write-json rtn))))))\n```\n\nWith that we have defined a message queue. It is 218 lines total. It is not very sophisticaded. It also may have bugs. \n\n# Conclusion\n\nThat rounds out the full implementation of the message queue system. The next article will explore how to restrcuture the single code file so we can test it using Racket's test capabilities.","slug":"A-message-queue-in-racket-part-3","published":1,"updated":"2021-10-29T20:57:19.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0as000zi7e81f5v8clo","content":"<p>This is the third part of the series</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents:\"></a>Table of Contents:</h1><ul>\n<li>Introduction and review of the Front-door shell</li>\n<li>dequeue - deleting messages from a topic</li>\n<li>The Admin interface</li>\n<li>Conclusion</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The first 2 parts of this series introduced the scaffolding and 2 API calls. We are creating a message queuing system, similar to Rabbit MQ or Apache ActiveMQ. The idea is to create a server that can be used to store and retrieve data. The server interface is an API consisting of 2 different layers: a user interface for adding and deleting items from queues assoicated with topics; and an administration interface that returns the number of topics, list of topics, data for a topic and allows us to remove all data for a topic.</p>\n<p>At this point we have the scaffolding and 2 API  calls implemented: Hello, which is a monitoring API; and enqueue which is used to add items into the queue for a given topic. This time we will implement; dequeue, which completes the user interface. We will also implement the administrative interface consisting of topic-list, topic-data, topic-count, topic-drain, topic-remove and drain-queue. That is  a lot, let’s get going.</p>\n<p>First, to set expectations, here is the complete program to date:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; Hello - say hello and add the date and time</span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  ; just say nothing useful</span><br><span class=\"line\">  (http-response &quot;&lt;div&gt;welcome to &lt;span style=\\&quot;color:blue\\&quot;&gt;jamQ&lt;/span&gt;&lt;/div&gt;&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; handle adding  a message to a topic</span><br><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; helper function to return a byte array</span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; front-door of the enqueue function</span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">      (displayln</span><br><span class=\"line\">       (format</span><br><span class=\"line\">        &quot;enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%&quot;</span><br><span class=\"line\">        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))</span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set! rtn &#x27;data payload-data)</span><br><span class=\"line\">        (hash-set! rtn &#x27;count (hash-count topic-hash))</span><br><span class=\"line\">        (hash-set! rtn &#x27;keys (hash-keys topic-hash))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; return a byte array formated like an http response</span><br><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; look up table for the routing of our API</span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) hello]</span><br><span class=\"line\">   [(&quot;hello&quot;) hello]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">   [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\">   [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\">   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Implemention-of-dequeu-deleting-message-from-a-topic\"><a href=\"#Implemention-of-dequeu-deleting-message-from-a-topic\" class=\"headerlink\" title=\"Implemention of dequeu - deleting message from a topic\"></a>Implemention of dequeu - deleting message from a topic</h1><p>Our first function to implement is the opposite of adding an item to a topic, removing an item. In this case, we just remove and return the first  item in the queue. Before we see the implementation let’s review the architecture of the system and the topic hash data structure. The system architecture is a front door that handles http requests and responses. There is a middle layer that handles the internal data structures and finally the internal  data structures themselves.</p>\n<p><img src=\"/images/MQ-Architecture-1.png\" alt=\"system architecture\"></p>\n<p>The internal data structure we are manipulating is a hash table. The keys in the hash table are the topic  names. For each key, the value is a queue with all the items associated with that topic.</p>\n<p><img src=\"/images/Racket-queue-2.png\" alt=\"internal data structure\"></p>\n<p>The enqueue function checked to see if a topic name existed in the hash table, adding it and the message data if required. Deleting messages off a topic is handled by popping the top item off the queue for a topic and returning that message.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\">        </span><br><span class=\"line\">(define (deque request)</span><br><span class=\"line\">  ; check if topic exists, remove 1st item from topic queue</span><br><span class=\"line\">  (let* ([js-hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref js-hsh &#x27;topicname)]</span><br><span class=\"line\">         [rtn (make-hash)]</span><br><span class=\"line\">         [datam (remove-data-from-topic topic-name)])</span><br><span class=\"line\">    (begin</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">      (hash-set! rtn &#x27;payload datam)</span><br><span class=\"line\">      (displayln (format &quot;:datam:-&gt;~v --&gt; ~v~%&quot; datam rtn ))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The implementation of deque has 3 helper functions: “remove-data-from-topic”, “get-queue-for-topic” and “request-&gt;jshash”. </p>\n<ul>\n<li>Request-&gt;jshash takes the data coming in on the http POST and converts it to a Racket hash for easy access. </li>\n<li>get-queue-for-topic is a function to return the queue assoicated with a topic-name.</li>\n<li>remove-data-from-topic handles the actual removal of the top message from the topic queue.</li>\n<li>deque handles reformating the incoming http request, removing the data and formating the http response.</li>\n</ul>\n<h1 id=\"The-admin-interface\"><a href=\"#The-admin-interface\" class=\"headerlink\" title=\"The admin interface\"></a>The admin interface</h1><p>Enque and deque are the “user interface” API calls for adding and removing messages to and from a topic. Next, let’s start on the administration interface. First we can implement “topic-list”, which simply creates a JSON list of all known topic names.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-list request)</span><br><span class=\"line\">  ; show me all the topics in the topic-hash</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let* ([rtn (make-hash)])</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-list (hash-keys topic-hash))</span><br><span class=\"line\">           </span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda() (write-json rtn)))))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The implementation is straight forward. Create a return hash, which holds our topic name list. Get the current keys from the topic-name hash and format that list out as JSON.</p>\n<p>Let’s tackle “topic-count” and “topic-data”. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-count request)</span><br><span class=\"line\">  ; show me a count of topics</span><br><span class=\"line\">  ; input: &#123; count-topics: &quot;all&quot; &#125;</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let ([rtn (make-hash)])</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-count (hash-count topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-data request)</span><br><span class=\"line\">  ; list all data in a topic</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set!  rtn &#x27;topic-list (queue-&gt;list (hash-ref topic-hash topic-name)))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>The function “topic-count” grabs a count of the total number of topics in the topic hash at that moment and formats it out to a JSON object. The function “topic-data” returns a JSON list of all the messages associated with a topic.</p>\n<p>Next, we will code “drain-queue”. The function “drain-queue” is supposed to remove all data associated with an input topic-name. Danger!! The implementation takes advantage of the hash function library to overwrite the queue for that topic name with a freshly initialized and empty queue. That is, we OVERWRITE the old queue.  It is up to the gabage collector to free the memory used by the old messages in the old queue.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (drain-queue request)</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-set! topic-hash topic-name (make-queue))</span><br><span class=\"line\">    (hash-set!  rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">    (hash-set! rtn &#x27;message &quot;drain-queue: all data deleted&quot;)</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda ()  (write-json  rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>Finally, we can code “topic-remove”. This function removes the topic from the topic list. The Racket garbage collector will handle cleaning up the data/queue.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-remove request)</span><br><span class=\"line\">  (let* ([hsh  (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-remove! topic-hash topic-name)</span><br><span class=\"line\">    (hash-set! rtn &#x27;message (format &quot;topic-remove: removed topic ~v&quot; topic-name))</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda  () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>With that we have defined a message queue. It is 218 lines total. It is not very sophisticaded. It also may have bugs. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>That rounds out the full implementation of the message queue system. The next article will explore how to restrcuture the single code file so we can test it using Racket’s test capabilities.</p>\n","site":{"data":{}},"excerpt":"<p>This is the third part of the series</p>","more":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents:\"></a>Table of Contents:</h1><ul>\n<li>Introduction and review of the Front-door shell</li>\n<li>dequeue - deleting messages from a topic</li>\n<li>The Admin interface</li>\n<li>Conclusion</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The first 2 parts of this series introduced the scaffolding and 2 API calls. We are creating a message queuing system, similar to Rabbit MQ or Apache ActiveMQ. The idea is to create a server that can be used to store and retrieve data. The server interface is an API consisting of 2 different layers: a user interface for adding and deleting items from queues assoicated with topics; and an administration interface that returns the number of topics, list of topics, data for a topic and allows us to remove all data for a topic.</p>\n<p>At this point we have the scaffolding and 2 API  calls implemented: Hello, which is a monitoring API; and enqueue which is used to add items into the queue for a given topic. This time we will implement; dequeue, which completes the user interface. We will also implement the administrative interface consisting of topic-list, topic-data, topic-count, topic-drain, topic-remove and drain-queue. That is  a lot, let’s get going.</p>\n<p>First, to set expectations, here is the complete program to date:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; Hello - say hello and add the date and time</span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  ; just say nothing useful</span><br><span class=\"line\">  (http-response &quot;&lt;div&gt;welcome to &lt;span style=\\&quot;color:blue\\&quot;&gt;jamQ&lt;/span&gt;&lt;/div&gt;&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; handle adding  a message to a topic</span><br><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; helper function to return a byte array</span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; front-door of the enqueue function</span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">      (displayln</span><br><span class=\"line\">       (format</span><br><span class=\"line\">        &quot;enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%&quot;</span><br><span class=\"line\">        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))</span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set! rtn &#x27;data payload-data)</span><br><span class=\"line\">        (hash-set! rtn &#x27;count (hash-count topic-hash))</span><br><span class=\"line\">        (hash-set! rtn &#x27;keys (hash-keys topic-hash))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; return a byte array formated like an http response</span><br><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; look up table for the routing of our API</span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) hello]</span><br><span class=\"line\">   [(&quot;hello&quot;) hello]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">   [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\">   [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\">   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Implemention-of-dequeu-deleting-message-from-a-topic\"><a href=\"#Implemention-of-dequeu-deleting-message-from-a-topic\" class=\"headerlink\" title=\"Implemention of dequeu - deleting message from a topic\"></a>Implemention of dequeu - deleting message from a topic</h1><p>Our first function to implement is the opposite of adding an item to a topic, removing an item. In this case, we just remove and return the first  item in the queue. Before we see the implementation let’s review the architecture of the system and the topic hash data structure. The system architecture is a front door that handles http requests and responses. There is a middle layer that handles the internal data structures and finally the internal  data structures themselves.</p>\n<p><img src=\"/images/MQ-Architecture-1.png\" alt=\"system architecture\"></p>\n<p>The internal data structure we are manipulating is a hash table. The keys in the hash table are the topic  names. For each key, the value is a queue with all the items associated with that topic.</p>\n<p><img src=\"/images/Racket-queue-2.png\" alt=\"internal data structure\"></p>\n<p>The enqueue function checked to see if a topic name existed in the hash table, adding it and the message data if required. Deleting messages off a topic is handled by popping the top item off the queue for a topic and returning that message.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\">        </span><br><span class=\"line\">(define (deque request)</span><br><span class=\"line\">  ; check if topic exists, remove 1st item from topic queue</span><br><span class=\"line\">  (let* ([js-hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref js-hsh &#x27;topicname)]</span><br><span class=\"line\">         [rtn (make-hash)]</span><br><span class=\"line\">         [datam (remove-data-from-topic topic-name)])</span><br><span class=\"line\">    (begin</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">      (hash-set! rtn &#x27;payload datam)</span><br><span class=\"line\">      (displayln (format &quot;:datam:-&gt;~v --&gt; ~v~%&quot; datam rtn ))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The implementation of deque has 3 helper functions: “remove-data-from-topic”, “get-queue-for-topic” and “request-&gt;jshash”. </p>\n<ul>\n<li>Request-&gt;jshash takes the data coming in on the http POST and converts it to a Racket hash for easy access. </li>\n<li>get-queue-for-topic is a function to return the queue assoicated with a topic-name.</li>\n<li>remove-data-from-topic handles the actual removal of the top message from the topic queue.</li>\n<li>deque handles reformating the incoming http request, removing the data and formating the http response.</li>\n</ul>\n<h1 id=\"The-admin-interface\"><a href=\"#The-admin-interface\" class=\"headerlink\" title=\"The admin interface\"></a>The admin interface</h1><p>Enque and deque are the “user interface” API calls for adding and removing messages to and from a topic. Next, let’s start on the administration interface. First we can implement “topic-list”, which simply creates a JSON list of all known topic names.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-list request)</span><br><span class=\"line\">  ; show me all the topics in the topic-hash</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let* ([rtn (make-hash)])</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-list (hash-keys topic-hash))</span><br><span class=\"line\">           </span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda() (write-json rtn)))))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The implementation is straight forward. Create a return hash, which holds our topic name list. Get the current keys from the topic-name hash and format that list out as JSON.</p>\n<p>Let’s tackle “topic-count” and “topic-data”. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-count request)</span><br><span class=\"line\">  ; show me a count of topics</span><br><span class=\"line\">  ; input: &#123; count-topics: &quot;all&quot; &#125;</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let ([rtn (make-hash)])</span><br><span class=\"line\">      (hash-set! rtn &#x27;topic-count (hash-count topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-data request)</span><br><span class=\"line\">  ; list all data in a topic</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set!  rtn &#x27;topic-list (queue-&gt;list (hash-ref topic-hash topic-name)))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>The function “topic-count” grabs a count of the total number of topics in the topic hash at that moment and formats it out to a JSON object. The function “topic-data” returns a JSON list of all the messages associated with a topic.</p>\n<p>Next, we will code “drain-queue”. The function “drain-queue” is supposed to remove all data associated with an input topic-name. Danger!! The implementation takes advantage of the hash function library to overwrite the queue for that topic name with a freshly initialized and empty queue. That is, we OVERWRITE the old queue.  It is up to the gabage collector to free the memory used by the old messages in the old queue.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (drain-queue request)</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-set! topic-hash topic-name (make-queue))</span><br><span class=\"line\">    (hash-set!  rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">    (hash-set! rtn &#x27;message &quot;drain-queue: all data deleted&quot;)</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda ()  (write-json  rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>Finally, we can code “topic-remove”. This function removes the topic from the topic list. The Racket garbage collector will handle cleaning up the data/queue.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (topic-remove request)</span><br><span class=\"line\">  (let* ([hsh  (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-remove! topic-hash topic-name)</span><br><span class=\"line\">    (hash-set! rtn &#x27;message (format &quot;topic-remove: removed topic ~v&quot; topic-name))</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda  () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br></pre></td></tr></table></figure>\n\n<p>With that we have defined a message queue. It is 218 lines total. It is not very sophisticaded. It also may have bugs. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>That rounds out the full implementation of the message queue system. The next article will explore how to restrcuture the single code file so we can test it using Racket’s test capabilities.</p>"},{"title":"A-message-queue-in-racket-part-4","date":"2021-10-24T16:36:11.000Z","_content":"\nbuilding a message queue  in Racket - part 4\n<!-- more -->\n\n# Table of Contents\n* Restructuring the code \n* The Front-door\n* The middleware\n\n# Introduction\n\nThe previous articles in this series laid the foundation for a message queue  similar to RabbitMQ or Apache's ActiveMQ.  The message queue presents an API that allows you to add or delete message from topics. There is also an administrative API interface to view and manipulate the topic store.\n\nThis article will clean up the code structure and get us in a position so we can apply testing to the system.  As it stands, the code works, but it does have bugs. It is also in a single 200+ line file. We are going to split the code up so it looks more like the architecture.\n\nFor the git repo [see the message-que directory](https://github.com/muguira-james/racket-stuff.git).\n\nThe original code for the previous articles is in the jam-message-que directory.\n\n![System Architecture](/images/MQ-Architecture-1.png)\n\nThe system architecture has 3 distinct components: a front-door, a topic store, and some middleware to manipulate the topic store.  We are going to use Racket's module syntax to split the code into 3 files. \n\n# The front-door\n\nThe front-door is all the code required to present the API and interact with http services expose from the Racket libraries. At  high level, the front-door is structured like this:\n\n* server start-up, ports paths, TCP-IP considerations\n* decoding the http requests and dispatching the right handler\n* creating a valid JSON response\n* formating and returning the http response in 'application/JSON' format to the caller.\n\nIn code form, the front-door looks like this:\n\n```\n#lang racket\n;\n; -------------------------------------------\n; define a simple message queue\n;\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n;\n; pull in the middleware code for manipulating the topic-hash\n(require \"middleware.rkt\")\n\n\n(define (hello request)\n  (http-response (format \"hello: today\")))\n\n(define (do-nothing request)\n  ; just say nothing useful\n  (http-response \"<div>welcome to <span style=\\\"color:blue\\\">jamQ</span></div>\"))\n\n(define (greeting-page request)\n  ; say hi\n  (http-response (list-ref '(\"Hi\" \"Hello\") (random 2))))\n\n\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n    \n      (let ([rtn (make-hash)])\n        (build-json-response rtn 'cmd \"enque\")\n        (build-json-response rtn 'topic-name topic-name)\n        (build-json-response rtn 'data payload-data)\n\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n\n(define (deque request)\n  ; check if topic exists, remove 1st item from topic queue\n  (let* ([js-hsh (request->jshash request)]\n         [topic-name (hash-ref js-hsh 'topicname)]\n         [rtn (make-hash)]\n         [datam (remove-data-from-topic topic-name)])\n    (begin\n      (build-json-response rtn 'topic-name topic-name)\n      (build-json-response rtn 'payload  datam)\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))\n\n\n(define (topic-list request)\n  ; show me all the topics in the topic-hash\n  (begin\n    (let* ([rtn (make-hash)])\n      (build-json-response rtn 'topic-list (hash-keys topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda() (write-json rtn)))))))\n\n(define (topic-count request)\n  ; show me a count of topics\n  ; input: { count-topics: \"all\" }\n  (begin\n    (let ([rtn (make-hash)])\n      (build-json-response rtn 'topic-count (hash-count topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda () (write-json rtn)))))))\n\n(define (topic-data request)\n  ; list all data in a topic\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n        (build-json-response rtn 'topic-name topic-name)\n        (build-json-response rtn 'topic-list (queue->list (hash-ref topic-hash topic-name)))\n        (displayln (with-output-to-string (lambda () (write-json rtn))))\n        (http-response (with-output-to-string (lambda () (write-json rtn))))))\n\n(define (drain-queue request)\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-set! topic-hash topic-name (make-queue))\n    (build-json-response rtn 'cmd \"drain-queue\")\n    (build-json-response rtn 'topic-name topic-name)\n    (build-json-response rtn 'message (format \"drain-queue: ~v: all data deleted\" topic-name)\n    (displayln (with-output-to-string (lambda () (write-json rtn))))\n    (http-response (with-output-to-string (lambda ()  (write-json  rtn)))))))\n\n(define (topic-remove request)\n  (let* ([hsh  (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-remove! topic-hash topic-name)\n    (build-json-response rtn 'message (format \"topic-remove: removed topic ~v\" topic-name))\n    (displayln (with-output-to-string (lambda  () (write-json rtn))))\n    (http-response (with-output-to-string (lambda () (write-json rtn))))))\n\n(define (build-json-response hsh key value)\n  (hash-set! hsh key value))\n\n(define (http-response content)  \n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") do-nothing]\n   [(\"hello\") hello]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n   [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n   [(\"topic-count\") topic-count]\n   [(\"topic-data\") #:method \"post\" topic-data]\n   [(\"drain-queue\") #:method \"post\" drain-queue]\n   [(\"topic-remove\") #:method \"post\" topic-remove]\n   [else (error \"page not found\")]))\n\n\n\n(define (request-handler request)\n  (dispatch request))\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n```\n\nReally, nothing new here if you have been following this series. The only new thing is the restructuring.  line 14 of the above listing is where we use Racket's 'require' statement to bring the middleware code in.\n\n# The middleware code\n\nThe middleware manipulates the topic-hash. If we add a message to the topic-hash, that means we first, check to see if the topic is present. If it is not, then we make a queue, add the message to that queue and then add that queue to the topic-hash under the missing topic name. If the topic is present, we simply get the queue associated with that topic-name and add the message.\n\nSplitting the middleware out from the front-door will make testing easier and provides better code structure. For testing of  the overall system, we want to test the middleware code using Racket test capabilities and test the front-door using something like cucumber or Mocha.\n\nThe middleware code follows:\n\n```\n#lang racket\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n  ;  (require gregor)\n\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n\n(define (contains-topic key)\n  ;; is key in this hash\n  (if (member key (hash-keys topic-hash))\n      #t\n      #f))\n\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n        \n\n\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n(provide topic-hash\n         request->jshash\n         get-queue-for-topic\n         remove-data-from-topic\n         add-data-to-topic\n         )\n\n```\n\nThe new thing here is the 'provide' statement.  Racket's 'provide' exposes function calls in this file to external callers.  Exposing topic-hash  is not the best style, but we'll fix that in the next article.\n\n# Conclusion\n\nWe have split the code and restructed it so we now have 2 files: the front-door and the middleware.  The middleware code exposes a set of functions to the front-door for manipulating the topic-hash. This code structure places functionality into specific files.  For the system at this point it might seem over kill. Once we start testing, we are going to expose a number of bugs.  Fixing the bugs will expand the code by a few lines. Taking the code all the way to the point were we might want to put this code into production is going to introduce even more changes.  We will use exception handling, which will clutter up the code even more and this restructure will separate the exception code, isolating it to the front-door file.  ","source":"_posts/A-message-queue-in-racket-part-4.md","raw":"---\ntitle: A-message-queue-in-racket-part-4\ndate: 2021-10-24 12:36:11\ntags:\n  - Racket\ncategories:\n  - Programming\n  - message queue\n---\n\nbuilding a message queue  in Racket - part 4\n<!-- more -->\n\n# Table of Contents\n* Restructuring the code \n* The Front-door\n* The middleware\n\n# Introduction\n\nThe previous articles in this series laid the foundation for a message queue  similar to RabbitMQ or Apache's ActiveMQ.  The message queue presents an API that allows you to add or delete message from topics. There is also an administrative API interface to view and manipulate the topic store.\n\nThis article will clean up the code structure and get us in a position so we can apply testing to the system.  As it stands, the code works, but it does have bugs. It is also in a single 200+ line file. We are going to split the code up so it looks more like the architecture.\n\nFor the git repo [see the message-que directory](https://github.com/muguira-james/racket-stuff.git).\n\nThe original code for the previous articles is in the jam-message-que directory.\n\n![System Architecture](/images/MQ-Architecture-1.png)\n\nThe system architecture has 3 distinct components: a front-door, a topic store, and some middleware to manipulate the topic store.  We are going to use Racket's module syntax to split the code into 3 files. \n\n# The front-door\n\nThe front-door is all the code required to present the API and interact with http services expose from the Racket libraries. At  high level, the front-door is structured like this:\n\n* server start-up, ports paths, TCP-IP considerations\n* decoding the http requests and dispatching the right handler\n* creating a valid JSON response\n* formating and returning the http response in 'application/JSON' format to the caller.\n\nIn code form, the front-door looks like this:\n\n```\n#lang racket\n;\n; -------------------------------------------\n; define a simple message queue\n;\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n;\n; pull in the middleware code for manipulating the topic-hash\n(require \"middleware.rkt\")\n\n\n(define (hello request)\n  (http-response (format \"hello: today\")))\n\n(define (do-nothing request)\n  ; just say nothing useful\n  (http-response \"<div>welcome to <span style=\\\"color:blue\\\">jamQ</span></div>\"))\n\n(define (greeting-page request)\n  ; say hi\n  (http-response (list-ref '(\"Hi\" \"Hello\") (random 2))))\n\n\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n    \n      (let ([rtn (make-hash)])\n        (build-json-response rtn 'cmd \"enque\")\n        (build-json-response rtn 'topic-name topic-name)\n        (build-json-response rtn 'data payload-data)\n\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n\n(define (deque request)\n  ; check if topic exists, remove 1st item from topic queue\n  (let* ([js-hsh (request->jshash request)]\n         [topic-name (hash-ref js-hsh 'topicname)]\n         [rtn (make-hash)]\n         [datam (remove-data-from-topic topic-name)])\n    (begin\n      (build-json-response rtn 'topic-name topic-name)\n      (build-json-response rtn 'payload  datam)\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))\n\n\n(define (topic-list request)\n  ; show me all the topics in the topic-hash\n  (begin\n    (let* ([rtn (make-hash)])\n      (build-json-response rtn 'topic-list (hash-keys topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda() (write-json rtn)))))))\n\n(define (topic-count request)\n  ; show me a count of topics\n  ; input: { count-topics: \"all\" }\n  (begin\n    (let ([rtn (make-hash)])\n      (build-json-response rtn 'topic-count (hash-count topic-hash))\n      (displayln (with-output-to-string (lambda () (write-json rtn))))\n      (http-response (with-output-to-string (lambda () (write-json rtn)))))))\n\n(define (topic-data request)\n  ; list all data in a topic\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n        (build-json-response rtn 'topic-name topic-name)\n        (build-json-response rtn 'topic-list (queue->list (hash-ref topic-hash topic-name)))\n        (displayln (with-output-to-string (lambda () (write-json rtn))))\n        (http-response (with-output-to-string (lambda () (write-json rtn))))))\n\n(define (drain-queue request)\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-set! topic-hash topic-name (make-queue))\n    (build-json-response rtn 'cmd \"drain-queue\")\n    (build-json-response rtn 'topic-name topic-name)\n    (build-json-response rtn 'message (format \"drain-queue: ~v: all data deleted\" topic-name)\n    (displayln (with-output-to-string (lambda () (write-json rtn))))\n    (http-response (with-output-to-string (lambda ()  (write-json  rtn)))))))\n\n(define (topic-remove request)\n  (let* ([hsh  (request->jshash request)]\n         [topic-name (hash-ref hsh 'quename)]\n         [rtn (make-hash)])\n    (hash-remove! topic-hash topic-name)\n    (build-json-response rtn 'message (format \"topic-remove: removed topic ~v\" topic-name))\n    (displayln (with-output-to-string (lambda  () (write-json rtn))))\n    (http-response (with-output-to-string (lambda () (write-json rtn))))))\n\n(define (build-json-response hsh key value)\n  (hash-set! hsh key value))\n\n(define (http-response content)  \n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") do-nothing]\n   [(\"hello\") hello]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n   [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n   [(\"topic-count\") topic-count]\n   [(\"topic-data\") #:method \"post\" topic-data]\n   [(\"drain-queue\") #:method \"post\" drain-queue]\n   [(\"topic-remove\") #:method \"post\" topic-remove]\n   [else (error \"page not found\")]))\n\n\n\n(define (request-handler request)\n  (dispatch request))\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n```\n\nReally, nothing new here if you have been following this series. The only new thing is the restructuring.  line 14 of the above listing is where we use Racket's 'require' statement to bring the middleware code in.\n\n# The middleware code\n\nThe middleware manipulates the topic-hash. If we add a message to the topic-hash, that means we first, check to see if the topic is present. If it is not, then we make a queue, add the message to that queue and then add that queue to the topic-hash under the missing topic name. If the topic is present, we simply get the queue associated with that topic-name and add the message.\n\nSplitting the middleware out from the front-door will make testing easier and provides better code structure. For testing of  the overall system, we want to test the middleware code using Racket test capabilities and test the front-door using something like cucumber or Mocha.\n\nThe middleware code follows:\n\n```\n#lang racket\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n  ;  (require gregor)\n\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n\n(define (contains-topic key)\n  ;; is key in this hash\n  (if (member key (hash-keys topic-hash))\n      #t\n      #f))\n\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n        \n\n\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n\n(define (request->jshash request)\n  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))\n\n(provide topic-hash\n         request->jshash\n         get-queue-for-topic\n         remove-data-from-topic\n         add-data-to-topic\n         )\n\n```\n\nThe new thing here is the 'provide' statement.  Racket's 'provide' exposes function calls in this file to external callers.  Exposing topic-hash  is not the best style, but we'll fix that in the next article.\n\n# Conclusion\n\nWe have split the code and restructed it so we now have 2 files: the front-door and the middleware.  The middleware code exposes a set of functions to the front-door for manipulating the topic-hash. This code structure places functionality into specific files.  For the system at this point it might seem over kill. Once we start testing, we are going to expose a number of bugs.  Fixing the bugs will expand the code by a few lines. Taking the code all the way to the point were we might want to put this code into production is going to introduce even more changes.  We will use exception handling, which will clutter up the code even more and this restructure will separate the exception code, isolating it to the front-door file.  ","slug":"A-message-queue-in-racket-part-4","published":1,"updated":"2021-10-29T20:57:19.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvcvb0bl0024i7e8b6b6af8q","content":"<p>building a message queue  in Racket - part 4</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><ul>\n<li>Restructuring the code </li>\n<li>The Front-door</li>\n<li>The middleware</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The previous articles in this series laid the foundation for a message queue  similar to RabbitMQ or Apache’s ActiveMQ.  The message queue presents an API that allows you to add or delete message from topics. There is also an administrative API interface to view and manipulate the topic store.</p>\n<p>This article will clean up the code structure and get us in a position so we can apply testing to the system.  As it stands, the code works, but it does have bugs. It is also in a single 200+ line file. We are going to split the code up so it looks more like the architecture.</p>\n<p>For the git repo <a href=\"https://github.com/muguira-james/racket-stuff.git\">see the message-que directory</a>.</p>\n<p>The original code for the previous articles is in the jam-message-que directory.</p>\n<p><img src=\"/images/MQ-Architecture-1.png\" alt=\"System Architecture\"></p>\n<p>The system architecture has 3 distinct components: a front-door, a topic store, and some middleware to manipulate the topic store.  We are going to use Racket’s module syntax to split the code into 3 files. </p>\n<h1 id=\"The-front-door\"><a href=\"#The-front-door\" class=\"headerlink\" title=\"The front-door\"></a>The front-door</h1><p>The front-door is all the code required to present the API and interact with http services expose from the Racket libraries. At  high level, the front-door is structured like this:</p>\n<ul>\n<li>server start-up, ports paths, TCP-IP considerations</li>\n<li>decoding the http requests and dispatching the right handler</li>\n<li>creating a valid JSON response</li>\n<li>formating and returning the http response in ‘application/JSON’ format to the caller.</li>\n</ul>\n<p>In code form, the front-door looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\">;</span><br><span class=\"line\">; -------------------------------------------</span><br><span class=\"line\">; define a simple message queue</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; pull in the middleware code for manipulating the topic-hash</span><br><span class=\"line\">(require &quot;middleware.rkt&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  (http-response (format &quot;hello: today&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (do-nothing request)</span><br><span class=\"line\">  ; just say nothing useful</span><br><span class=\"line\">  (http-response &quot;&lt;div&gt;welcome to &lt;span style=\\&quot;color:blue\\&quot;&gt;jamQ&lt;/span&gt;&lt;/div&gt;&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (greeting-page request)</span><br><span class=\"line\">  ; say hi</span><br><span class=\"line\">  (http-response (list-ref &#x27;(&quot;Hi&quot; &quot;Hello&quot;) (random 2))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">    </span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (build-json-response rtn &#x27;cmd &quot;enque&quot;)</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (build-json-response rtn &#x27;data payload-data)</span><br><span class=\"line\"></span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (deque request)</span><br><span class=\"line\">  ; check if topic exists, remove 1st item from topic queue</span><br><span class=\"line\">  (let* ([js-hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref js-hsh &#x27;topicname)]</span><br><span class=\"line\">         [rtn (make-hash)]</span><br><span class=\"line\">         [datam (remove-data-from-topic topic-name)])</span><br><span class=\"line\">    (begin</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">      (build-json-response rtn &#x27;payload  datam)</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-list request)</span><br><span class=\"line\">  ; show me all the topics in the topic-hash</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let* ([rtn (make-hash)])</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-list (hash-keys topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda() (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-count request)</span><br><span class=\"line\">  ; show me a count of topics</span><br><span class=\"line\">  ; input: &#123; count-topics: &quot;all&quot; &#125;</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let ([rtn (make-hash)])</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-count (hash-count topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-data request)</span><br><span class=\"line\">  ; list all data in a topic</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-list (queue-&gt;list (hash-ref topic-hash topic-name)))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (drain-queue request)</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-set! topic-hash topic-name (make-queue))</span><br><span class=\"line\">    (build-json-response rtn &#x27;cmd &quot;drain-queue&quot;)</span><br><span class=\"line\">    (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">    (build-json-response rtn &#x27;message (format &quot;drain-queue: ~v: all data deleted&quot; topic-name)</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda ()  (write-json  rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-remove request)</span><br><span class=\"line\">  (let* ([hsh  (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-remove! topic-hash topic-name)</span><br><span class=\"line\">    (build-json-response rtn &#x27;message (format &quot;topic-remove: removed topic ~v&quot; topic-name))</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda  () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (build-json-response hsh key value)</span><br><span class=\"line\">  (hash-set! hsh key value))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) do-nothing]</span><br><span class=\"line\">   [(&quot;hello&quot;) hello]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">   [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\">   [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\">   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\">   [(&quot;drain-queue&quot;) #:method &quot;post&quot; drain-queue]</span><br><span class=\"line\">   [(&quot;topic-remove&quot;) #:method &quot;post&quot; topic-remove]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Really, nothing new here if you have been following this series. The only new thing is the restructuring.  line 14 of the above listing is where we use Racket’s ‘require’ statement to bring the middleware code in.</p>\n<h1 id=\"The-middleware-code\"><a href=\"#The-middleware-code\" class=\"headerlink\" title=\"The middleware code\"></a>The middleware code</h1><p>The middleware manipulates the topic-hash. If we add a message to the topic-hash, that means we first, check to see if the topic is present. If it is not, then we make a queue, add the message to that queue and then add that queue to the topic-hash under the missing topic name. If the topic is present, we simply get the queue associated with that topic-name and add the message.</p>\n<p>Splitting the middleware out from the front-door will make testing easier and provides better code structure. For testing of  the overall system, we want to test the middleware code using Racket test capabilities and test the front-door using something like cucumber or Mocha.</p>\n<p>The middleware code follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\">  ;  (require gregor)</span><br><span class=\"line\"></span><br><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (contains-topic key)</span><br><span class=\"line\">  ;; is key in this hash</span><br><span class=\"line\">  (if (member key (hash-keys topic-hash))</span><br><span class=\"line\">      #t</span><br><span class=\"line\">      #f))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">(provide topic-hash</span><br><span class=\"line\">         request-&gt;jshash</span><br><span class=\"line\">         get-queue-for-topic</span><br><span class=\"line\">         remove-data-from-topic</span><br><span class=\"line\">         add-data-to-topic</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The new thing here is the ‘provide’ statement.  Racket’s ‘provide’ exposes function calls in this file to external callers.  Exposing topic-hash  is not the best style, but we’ll fix that in the next article.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We have split the code and restructed it so we now have 2 files: the front-door and the middleware.  The middleware code exposes a set of functions to the front-door for manipulating the topic-hash. This code structure places functionality into specific files.  For the system at this point it might seem over kill. Once we start testing, we are going to expose a number of bugs.  Fixing the bugs will expand the code by a few lines. Taking the code all the way to the point were we might want to put this code into production is going to introduce even more changes.  We will use exception handling, which will clutter up the code even more and this restructure will separate the exception code, isolating it to the front-door file.  </p>\n","site":{"data":{}},"excerpt":"<p>building a message queue  in Racket - part 4</p>","more":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><ul>\n<li>Restructuring the code </li>\n<li>The Front-door</li>\n<li>The middleware</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The previous articles in this series laid the foundation for a message queue  similar to RabbitMQ or Apache’s ActiveMQ.  The message queue presents an API that allows you to add or delete message from topics. There is also an administrative API interface to view and manipulate the topic store.</p>\n<p>This article will clean up the code structure and get us in a position so we can apply testing to the system.  As it stands, the code works, but it does have bugs. It is also in a single 200+ line file. We are going to split the code up so it looks more like the architecture.</p>\n<p>For the git repo <a href=\"https://github.com/muguira-james/racket-stuff.git\">see the message-que directory</a>.</p>\n<p>The original code for the previous articles is in the jam-message-que directory.</p>\n<p><img src=\"/images/MQ-Architecture-1.png\" alt=\"System Architecture\"></p>\n<p>The system architecture has 3 distinct components: a front-door, a topic store, and some middleware to manipulate the topic store.  We are going to use Racket’s module syntax to split the code into 3 files. </p>\n<h1 id=\"The-front-door\"><a href=\"#The-front-door\" class=\"headerlink\" title=\"The front-door\"></a>The front-door</h1><p>The front-door is all the code required to present the API and interact with http services expose from the Racket libraries. At  high level, the front-door is structured like this:</p>\n<ul>\n<li>server start-up, ports paths, TCP-IP considerations</li>\n<li>decoding the http requests and dispatching the right handler</li>\n<li>creating a valid JSON response</li>\n<li>formating and returning the http response in ‘application/JSON’ format to the caller.</li>\n</ul>\n<p>In code form, the front-door looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\">;</span><br><span class=\"line\">; -------------------------------------------</span><br><span class=\"line\">; define a simple message queue</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; pull in the middleware code for manipulating the topic-hash</span><br><span class=\"line\">(require &quot;middleware.rkt&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  (http-response (format &quot;hello: today&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (do-nothing request)</span><br><span class=\"line\">  ; just say nothing useful</span><br><span class=\"line\">  (http-response &quot;&lt;div&gt;welcome to &lt;span style=\\&quot;color:blue\\&quot;&gt;jamQ&lt;/span&gt;&lt;/div&gt;&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (greeting-page request)</span><br><span class=\"line\">  ; say hi</span><br><span class=\"line\">  (http-response (list-ref &#x27;(&quot;Hi&quot; &quot;Hello&quot;) (random 2))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">    </span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (build-json-response rtn &#x27;cmd &quot;enque&quot;)</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (build-json-response rtn &#x27;data payload-data)</span><br><span class=\"line\"></span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (deque request)</span><br><span class=\"line\">  ; check if topic exists, remove 1st item from topic queue</span><br><span class=\"line\">  (let* ([js-hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref js-hsh &#x27;topicname)]</span><br><span class=\"line\">         [rtn (make-hash)]</span><br><span class=\"line\">         [datam (remove-data-from-topic topic-name)])</span><br><span class=\"line\">    (begin</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">      (build-json-response rtn &#x27;payload  datam)</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda  () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-list request)</span><br><span class=\"line\">  ; show me all the topics in the topic-hash</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let* ([rtn (make-hash)])</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-list (hash-keys topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda() (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-count request)</span><br><span class=\"line\">  ; show me a count of topics</span><br><span class=\"line\">  ; input: &#123; count-topics: &quot;all&quot; &#125;</span><br><span class=\"line\">  (begin</span><br><span class=\"line\">    (let ([rtn (make-hash)])</span><br><span class=\"line\">      (build-json-response rtn &#x27;topic-count (hash-count topic-hash))</span><br><span class=\"line\">      (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">      (http-response (with-output-to-string (lambda () (write-json rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-data request)</span><br><span class=\"line\">  ; list all data in a topic</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (build-json-response rtn &#x27;topic-list (queue-&gt;list (hash-ref topic-hash topic-name)))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (drain-queue request)</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-set! topic-hash topic-name (make-queue))</span><br><span class=\"line\">    (build-json-response rtn &#x27;cmd &quot;drain-queue&quot;)</span><br><span class=\"line\">    (build-json-response rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">    (build-json-response rtn &#x27;message (format &quot;drain-queue: ~v: all data deleted&quot; topic-name)</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda ()  (write-json  rtn)))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (topic-remove request)</span><br><span class=\"line\">  (let* ([hsh  (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;quename)]</span><br><span class=\"line\">         [rtn (make-hash)])</span><br><span class=\"line\">    (hash-remove! topic-hash topic-name)</span><br><span class=\"line\">    (build-json-response rtn &#x27;message (format &quot;topic-remove: removed topic ~v&quot; topic-name))</span><br><span class=\"line\">    (displayln (with-output-to-string (lambda  () (write-json rtn))))</span><br><span class=\"line\">    (http-response (with-output-to-string (lambda () (write-json rtn))))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (build-json-response hsh key value)</span><br><span class=\"line\">  (hash-set! hsh key value))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (http-response content)  </span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) do-nothing]</span><br><span class=\"line\">   [(&quot;hello&quot;) hello]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">   [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\">   [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\">   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\">   [(&quot;drain-queue&quot;) #:method &quot;post&quot; drain-queue]</span><br><span class=\"line\">   [(&quot;topic-remove&quot;) #:method &quot;post&quot; topic-remove]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Really, nothing new here if you have been following this series. The only new thing is the restructuring.  line 14 of the above listing is where we use Racket’s ‘require’ statement to bring the middleware code in.</p>\n<h1 id=\"The-middleware-code\"><a href=\"#The-middleware-code\" class=\"headerlink\" title=\"The middleware code\"></a>The middleware code</h1><p>The middleware manipulates the topic-hash. If we add a message to the topic-hash, that means we first, check to see if the topic is present. If it is not, then we make a queue, add the message to that queue and then add that queue to the topic-hash under the missing topic name. If the topic is present, we simply get the queue associated with that topic-name and add the message.</p>\n<p>Splitting the middleware out from the front-door will make testing easier and provides better code structure. For testing of  the overall system, we want to test the middleware code using Racket test capabilities and test the front-door using something like cucumber or Mocha.</p>\n<p>The middleware code follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\">  ;  (require gregor)</span><br><span class=\"line\"></span><br><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (contains-topic key)</span><br><span class=\"line\">  ;; is key in this hash</span><br><span class=\"line\">  (if (member key (hash-keys topic-hash))</span><br><span class=\"line\">      #t</span><br><span class=\"line\">      #f))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-&gt;jshash request)</span><br><span class=\"line\">  (string-&gt;jsexpr (bytes-&gt;string/utf-8 (request-post-data/raw request))))</span><br><span class=\"line\"></span><br><span class=\"line\">(provide topic-hash</span><br><span class=\"line\">         request-&gt;jshash</span><br><span class=\"line\">         get-queue-for-topic</span><br><span class=\"line\">         remove-data-from-topic</span><br><span class=\"line\">         add-data-to-topic</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The new thing here is the ‘provide’ statement.  Racket’s ‘provide’ exposes function calls in this file to external callers.  Exposing topic-hash  is not the best style, but we’ll fix that in the next article.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>We have split the code and restructed it so we now have 2 files: the front-door and the middleware.  The middleware code exposes a set of functions to the front-door for manipulating the topic-hash. This code structure places functionality into specific files.  For the system at this point it might seem over kill. Once we start testing, we are going to expose a number of bugs.  Fixing the bugs will expand the code by a few lines. Taking the code all the way to the point were we might want to put this code into production is going to introduce even more changes.  We will use exception handling, which will clutter up the code even more and this restructure will separate the exception code, isolating it to the front-door file.  </p>"},{"title":"A-message-queue-in-racket-part-5","date":"2021-10-25T16:31:45.000Z","_content":"\nThe 5th article in the series, testing\n<!-- more -->\n\n# Table of Contents\n\n* Code organization, racket require and provide\n* Test cases\n* Github Actions\n* Conclusion\n\n# Introduction\n\nUp to this point we have created a working message queue.  It uses Racket's http stack and presents a simple to use http POST API to add / delete messages in topics. It also has an administrative API to explore and manipulate the topic list and data stored in queues under specific topics.\n\nThe system is architected as a front-door that defines the http interface. The middleware defines the logic to handle manipulating the hash table. Last, we implement a Racket hash table to organize the message queue.\n\nThis article will expand on that base by adding testing. We use the Racket rackunit test suite.\n\n# Preliminaries\n\nLast article, we spilt the code into 2 files, front-door.rkt and middleware.rkt. The front-door code handles http interfacing. We are not going to test that functionality with rackunit.\n\nWe will use rackunit to test the middleware functionality. The rackunit test suite provides a rich set of verbs to evaluate the state of the system. Rackunit provides:\n\n* a basic capability to check if variables or statement evaluate properly\n* a test-case verb to group tests together\n* a test-suite verb to group test around a theme.\n\nI recommend you consult the Racket documentation for further [details](https://docs.racket-lang.org/rackunit/). We are going to keep our tests simple. We'll evaluate the functionality of each method in the middleware.rkt file, developing tests and evaluating edge cases. This set of tests will be very simple, really just a demonstration. Rackunit has as much capability as any competing test framework I have used.\n\nThe test file we'll use is called test-middleware.rkt. As I said before, it will contain tests for each method in the middleware module. To use rackunit, we have to first 'require' it in. We then require in any Racket support libraries. Finally we require in the middleware.rkt module. Requiring \"middleware.rkt\" will bring in all of the definitions and variables that are exposed through a \"provide\" statement.\n\n```\n#lang racket\n\n(require rackunit)\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n(require \"middleware.rkt\")\n\n\n```\n\nNow we can create our first test. Contains-topic inspects the topic-hash to see if a specific topic-name exists.\n\n```\n(test-case \"middleware: contains-topic\"\n           ; setup by adding a topic 'key and an element 'aaa\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (contains-topic 'key) #t \"should contain the test topic\")\n           (check-equal? (contains-topic 'foo) #f \"should not contain 'foo' topic\")\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           ; clean up before next test\n           (hash-remove! topic-hash 'key)\n           )\n```\n\nWe first, add a topic named 'key and add some data 'aaa. Then we evaluate different rackunit check-equal clauses to determine if the topic hash is setup correctly.  In this case, we ask:\n\n* is there only 1 topic name\n* there should not be a 'foo topic, we did not add that\n* the topic-hash should only have a single topic\n\nFinally, if each of these test cases pass, we clean up the topic-hash to get it ready for the next test.  It is a best practice to leave your data structures in a known state at the end of each test. Don't string tests together, unless you are using rackunit verbs like \"test-suite\".\n\nnext we test add-data-to-topic. There is a lot to test here...\n\n```\n(test-case \"middleware: add-data-to-topic\"\n           ; first, should be nothing in the topic hash\n           (check-equal? (hash-count  topic-hash) 0 \"should be empty\")\n\n           ; add a single topic and 1 item\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 1 \"should only be a  single item in the queue\")\n\n           ; add a 2nd item to the test topic\n           (add-data-to-topic 'key 'bbb)\n           (check-equal? (hash-count topic-hash) 1 \"should be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 2 \"should only be a  single item in the queue\")\n\n           (add-data-to-topic 'key2 'zzz)\n           (check-equal? (hash-count topic-hash) 2 \"should be 2 topics now\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 2 \"should only be 2 items in the 'key queue\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 1 \"should only be 1 item in the 'key2 queue\")\n\n           (add-data-to-topic 'key2 \"go man go\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 2 \"should be 2 items in the 'key2 queue\")\n\n           (add-data-to-topic 'key2 \"[ 'foo 'bar ]\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 3 \"should be 2 items in the 'key2 queue\")\n           (check-equal? (dequeue! (hash-ref topic-hash 'key2)) 'zzz \"should be the first string zzz\")\n\n           \n           (hash-remove! topic-hash 'key)\n           (hash-remove! topic-hash 'key2)\n           )\n```\n\nFirst, make sure the topic-hash is clear. Then, add a key and data and test to make sure there is only 1 key and 1 piece of data. Going on, add a 2nd data item and test. Then add a 2nd key + data and evaluate the topic-hash state to make sure it is correct. Finally, clean up the topic-hash, to prepare for the next test.\n\nThe method to test remove-data-from-topic. The topic-hash should have the input topic present and there should be data in the queue associated with the topic. Here is the original remove code:\n\n```\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n```\n\nIt may not be obvious, but this code does not work correctly. The code says: \"if there is a topic by this name, dequeue the first thing on the queue and return it\". The tests we will run follow:\n\n```\n(test-case \"middleware: remove-data-from-topic\"\n           ; first, should be nothing in the topic hash\n           (check-equal? (hash-count  topic-hash) 0 \"should be empty\")\n\n           ; add a single topic and 1 item\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 1 \"should only be a  single item in the queue\")\n\n           ; ... now remove stuff\n\n           (check-equal? (remove-data-from-topic 'key) 'aaa  \"remove only item in the  queue\")\n\n           ; now remove another item - this should fail.\n           ;(check-equal? (remove-data-from-topic 'key) \"{ \\\"error\\\": \\\"no data in queue 'key\\\" }\\n\" \"should be nothing in the queue\")\n           )\n```\n\nWhen we run the tests, we can use 'DrRacket' or run from the command line. If we run from the command line, we see the following:\n\n```\n$ raco test: \"test-middleware.rkt\"\nraco test: \"test-middleware.rkt\"\n--------------------\nmiddleware: remove-data-from-topic\nERROR\nname:       check-equal?\nlocation:   test-middleware.rkt:63:11\n\ndequeue!: expected argument of type <non-empty queue>; given: #<queue>\n1/3 test failures\n\n```\nThe test output shows that we had an error.  The Racket system found an empty queue and stopped the tests. If we look at the code we see that we did not test to see if the queue was empty, we just try to dequeue the next item.\n\nTo fix this, let's test the queue first before we try to pop something off it. We can use \"queue-empty?\". If the queue is empty, no point in trying to pop an item off, just return the error string.\n\n```\n(define (remove-data-from-topic topic-name)\n  ; do we have this topic?\n  (if (contains-topic topic-name)\n      ; is there something in the queue?\n      (if (queue-empty? (get-queue-for-topic topic-name))\n          ; no return an error\n          (let* ([rtn (format \"{ \\\"error\\\": \\\"no data in queue ~v\\\" }~%\" topic-name)])\n            (displayln rtn)\n            rtn)\n          ; yes, build a valid return  json\n          (format  \"{ \\\"topic-name\\\": ~s \\\"payload\\\": ~v }\" topic-name (dequeue! (get-queue-for-topic topic-name)))\n\n          )\n      (begin\n        (let* ([rtn (format \"{ \\\"error\\\": \\\"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n\n```\n\nOk, found and fixed that bug. Now, let's examine geet-queue-for-topic. If it SHOULD return a valid queue if the topic is present. But the way it is coded, if the topic is not present, we generate an error.\n\n\n```\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n```\n\nNot good! Since we always test the returned queue to see if it is empty let's always return a valid queue. New code:\n\n```\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n  (if (contains-topic topic-name)\n      (hash-ref topic-hash topic-name)\n      (make-queue)))\n```\n# Testing on checkin\n\nFinally, let's setup our git repo so that the tests run each time we check our code it. Github provides \"actions\", which can do a number of things for us.  For example: run tests, package our code for deployment to containers, or reformat code according to test standards.\n\nThe Github action code is stored in a special directory in the repo called \".github/workflows\". We place a file there that provides instructions for github actions to follow. In our case, we'll use:\n\n* A standard github action ubuntu worker node,\n* Install Racket on the worker\n* Run raco test test-middleware.rkt\n\nHere is the action code;\n\n```\nname: Makefile CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    \n \n      \n    - name: Install dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y racket\n        raco test test-middleware.rkt\n```\n\nA break down of the statements in the file follows:\n\n* name: Makefile CI -  I choose this because it was very close to what I needed\n* on: ... - push or pull requests, run the action\n* jobs: - this is the action steps\n* build: runs-on - tells git to grab a ubuntu-latest worker\n* steps: there are 3\n* uses: actions/checkout@2 is a git check out step from the market place\n* name: & run: update the ubuntu container, install racket and run our tests\n\nIf something fails, you receive an email complaining about the failure. This is great for working in teams of people. Each checkin will notify everybody of the code status and alert people for problems. \n\n\n# Conclusion\n\nTesting your code is very important. As we saw here, the code worked for the easy path cases. It failed and would have had strange behavior if we had not caught the remove-data-from-topic bug or the get-queue-for-topic bug. Racket's testing framework rackunit is very robust and provides a lot more capability than we used here. But these tests demonstrate how to get started.","source":"_posts/A-message-queue-in-racket-part-5.md","raw":"---\ntitle: A-message-queue-in-racket-part-5\ndate: 2021-10-25 12:31:45\ntags:\n  - Racket\ncategories:\n  - Programming\n  - message queue\n---\n\nThe 5th article in the series, testing\n<!-- more -->\n\n# Table of Contents\n\n* Code organization, racket require and provide\n* Test cases\n* Github Actions\n* Conclusion\n\n# Introduction\n\nUp to this point we have created a working message queue.  It uses Racket's http stack and presents a simple to use http POST API to add / delete messages in topics. It also has an administrative API to explore and manipulate the topic list and data stored in queues under specific topics.\n\nThe system is architected as a front-door that defines the http interface. The middleware defines the logic to handle manipulating the hash table. Last, we implement a Racket hash table to organize the message queue.\n\nThis article will expand on that base by adding testing. We use the Racket rackunit test suite.\n\n# Preliminaries\n\nLast article, we spilt the code into 2 files, front-door.rkt and middleware.rkt. The front-door code handles http interfacing. We are not going to test that functionality with rackunit.\n\nWe will use rackunit to test the middleware functionality. The rackunit test suite provides a rich set of verbs to evaluate the state of the system. Rackunit provides:\n\n* a basic capability to check if variables or statement evaluate properly\n* a test-case verb to group tests together\n* a test-suite verb to group test around a theme.\n\nI recommend you consult the Racket documentation for further [details](https://docs.racket-lang.org/rackunit/). We are going to keep our tests simple. We'll evaluate the functionality of each method in the middleware.rkt file, developing tests and evaluating edge cases. This set of tests will be very simple, really just a demonstration. Rackunit has as much capability as any competing test framework I have used.\n\nThe test file we'll use is called test-middleware.rkt. As I said before, it will contain tests for each method in the middleware module. To use rackunit, we have to first 'require' it in. We then require in any Racket support libraries. Finally we require in the middleware.rkt module. Requiring \"middleware.rkt\" will bring in all of the definitions and variables that are exposed through a \"provide\" statement.\n\n```\n#lang racket\n\n(require rackunit)\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n(require \"middleware.rkt\")\n\n\n```\n\nNow we can create our first test. Contains-topic inspects the topic-hash to see if a specific topic-name exists.\n\n```\n(test-case \"middleware: contains-topic\"\n           ; setup by adding a topic 'key and an element 'aaa\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (contains-topic 'key) #t \"should contain the test topic\")\n           (check-equal? (contains-topic 'foo) #f \"should not contain 'foo' topic\")\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           ; clean up before next test\n           (hash-remove! topic-hash 'key)\n           )\n```\n\nWe first, add a topic named 'key and add some data 'aaa. Then we evaluate different rackunit check-equal clauses to determine if the topic hash is setup correctly.  In this case, we ask:\n\n* is there only 1 topic name\n* there should not be a 'foo topic, we did not add that\n* the topic-hash should only have a single topic\n\nFinally, if each of these test cases pass, we clean up the topic-hash to get it ready for the next test.  It is a best practice to leave your data structures in a known state at the end of each test. Don't string tests together, unless you are using rackunit verbs like \"test-suite\".\n\nnext we test add-data-to-topic. There is a lot to test here...\n\n```\n(test-case \"middleware: add-data-to-topic\"\n           ; first, should be nothing in the topic hash\n           (check-equal? (hash-count  topic-hash) 0 \"should be empty\")\n\n           ; add a single topic and 1 item\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 1 \"should only be a  single item in the queue\")\n\n           ; add a 2nd item to the test topic\n           (add-data-to-topic 'key 'bbb)\n           (check-equal? (hash-count topic-hash) 1 \"should be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 2 \"should only be a  single item in the queue\")\n\n           (add-data-to-topic 'key2 'zzz)\n           (check-equal? (hash-count topic-hash) 2 \"should be 2 topics now\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 2 \"should only be 2 items in the 'key queue\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 1 \"should only be 1 item in the 'key2 queue\")\n\n           (add-data-to-topic 'key2 \"go man go\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 2 \"should be 2 items in the 'key2 queue\")\n\n           (add-data-to-topic 'key2 \"[ 'foo 'bar ]\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key2)) 3 \"should be 2 items in the 'key2 queue\")\n           (check-equal? (dequeue! (hash-ref topic-hash 'key2)) 'zzz \"should be the first string zzz\")\n\n           \n           (hash-remove! topic-hash 'key)\n           (hash-remove! topic-hash 'key2)\n           )\n```\n\nFirst, make sure the topic-hash is clear. Then, add a key and data and test to make sure there is only 1 key and 1 piece of data. Going on, add a 2nd data item and test. Then add a 2nd key + data and evaluate the topic-hash state to make sure it is correct. Finally, clean up the topic-hash, to prepare for the next test.\n\nThe method to test remove-data-from-topic. The topic-hash should have the input topic present and there should be data in the queue associated with the topic. Here is the original remove code:\n\n```\n(define (remove-data-from-topic topic-name)\n  (if (contains-topic topic-name)\n      (begin\n        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])\n          ;(displayln (format \"::->~v\" datam)\n          datam))\n      (begin\n        (let* ([rtn (format \"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n```\n\nIt may not be obvious, but this code does not work correctly. The code says: \"if there is a topic by this name, dequeue the first thing on the queue and return it\". The tests we will run follow:\n\n```\n(test-case \"middleware: remove-data-from-topic\"\n           ; first, should be nothing in the topic hash\n           (check-equal? (hash-count  topic-hash) 0 \"should be empty\")\n\n           ; add a single topic and 1 item\n           (add-data-to-topic 'key 'aaa)\n           (check-equal? (hash-count topic-hash) 1 \"should only be a single topic\")\n           (check-equal? (queue-length (hash-ref topic-hash 'key)) 1 \"should only be a  single item in the queue\")\n\n           ; ... now remove stuff\n\n           (check-equal? (remove-data-from-topic 'key) 'aaa  \"remove only item in the  queue\")\n\n           ; now remove another item - this should fail.\n           ;(check-equal? (remove-data-from-topic 'key) \"{ \\\"error\\\": \\\"no data in queue 'key\\\" }\\n\" \"should be nothing in the queue\")\n           )\n```\n\nWhen we run the tests, we can use 'DrRacket' or run from the command line. If we run from the command line, we see the following:\n\n```\n$ raco test: \"test-middleware.rkt\"\nraco test: \"test-middleware.rkt\"\n--------------------\nmiddleware: remove-data-from-topic\nERROR\nname:       check-equal?\nlocation:   test-middleware.rkt:63:11\n\ndequeue!: expected argument of type <non-empty queue>; given: #<queue>\n1/3 test failures\n\n```\nThe test output shows that we had an error.  The Racket system found an empty queue and stopped the tests. If we look at the code we see that we did not test to see if the queue was empty, we just try to dequeue the next item.\n\nTo fix this, let's test the queue first before we try to pop something off it. We can use \"queue-empty?\". If the queue is empty, no point in trying to pop an item off, just return the error string.\n\n```\n(define (remove-data-from-topic topic-name)\n  ; do we have this topic?\n  (if (contains-topic topic-name)\n      ; is there something in the queue?\n      (if (queue-empty? (get-queue-for-topic topic-name))\n          ; no return an error\n          (let* ([rtn (format \"{ \\\"error\\\": \\\"no data in queue ~v\\\" }~%\" topic-name)])\n            (displayln rtn)\n            rtn)\n          ; yes, build a valid return  json\n          (format  \"{ \\\"topic-name\\\": ~s \\\"payload\\\": ~v }\" topic-name (dequeue! (get-queue-for-topic topic-name)))\n\n          )\n      (begin\n        (let* ([rtn (format \"{ \\\"error\\\": \\\"did not find topic ~v~%\" topic-name)])\n          (display rtn)\n          rtn))))\n\n```\n\nOk, found and fixed that bug. Now, let's examine geet-queue-for-topic. If it SHOULD return a valid queue if the topic is present. But the way it is coded, if the topic is not present, we generate an error.\n\n\n```\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n      (hash-ref topic-hash topic-name))\n```\n\nNot good! Since we always test the returned queue to see if it is empty let's always return a valid queue. New code:\n\n```\n(define (get-queue-for-topic topic-name)\n  ; just return the queue for this topic,\n  ;  somebody  else has to check to see if the topic-name exists\n  (if (contains-topic topic-name)\n      (hash-ref topic-hash topic-name)\n      (make-queue)))\n```\n# Testing on checkin\n\nFinally, let's setup our git repo so that the tests run each time we check our code it. Github provides \"actions\", which can do a number of things for us.  For example: run tests, package our code for deployment to containers, or reformat code according to test standards.\n\nThe Github action code is stored in a special directory in the repo called \".github/workflows\". We place a file there that provides instructions for github actions to follow. In our case, we'll use:\n\n* A standard github action ubuntu worker node,\n* Install Racket on the worker\n* Run raco test test-middleware.rkt\n\nHere is the action code;\n\n```\nname: Makefile CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    \n \n      \n    - name: Install dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y racket\n        raco test test-middleware.rkt\n```\n\nA break down of the statements in the file follows:\n\n* name: Makefile CI -  I choose this because it was very close to what I needed\n* on: ... - push or pull requests, run the action\n* jobs: - this is the action steps\n* build: runs-on - tells git to grab a ubuntu-latest worker\n* steps: there are 3\n* uses: actions/checkout@2 is a git check out step from the market place\n* name: & run: update the ubuntu container, install racket and run our tests\n\nIf something fails, you receive an email complaining about the failure. This is great for working in teams of people. Each checkin will notify everybody of the code status and alert people for problems. \n\n\n# Conclusion\n\nTesting your code is very important. As we saw here, the code worked for the easy path cases. It failed and would have had strange behavior if we had not caught the remove-data-from-topic bug or the get-queue-for-topic bug. Racket's testing framework rackunit is very robust and provides a lot more capability than we used here. But these tests demonstrate how to get started.","slug":"A-message-queue-in-racket-part-5","published":1,"updated":"2021-10-29T21:12:00.136Z","_id":"ckvcvb0bn0025i7e81hfg5tfc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>The 5th article in the series, testing</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><ul>\n<li>Code organization, racket require and provide</li>\n<li>Test cases</li>\n<li>Github Actions</li>\n<li>Conclusion</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Up to this point we have created a working message queue.  It uses Racket’s http stack and presents a simple to use http POST API to add / delete messages in topics. It also has an administrative API to explore and manipulate the topic list and data stored in queues under specific topics.</p>\n<p>The system is architected as a front-door that defines the http interface. The middleware defines the logic to handle manipulating the hash table. Last, we implement a Racket hash table to organize the message queue.</p>\n<p>This article will expand on that base by adding testing. We use the Racket rackunit test suite.</p>\n<h1 id=\"Preliminaries\"><a href=\"#Preliminaries\" class=\"headerlink\" title=\"Preliminaries\"></a>Preliminaries</h1><p>Last article, we spilt the code into 2 files, front-door.rkt and middleware.rkt. The front-door code handles http interfacing. We are not going to test that functionality with rackunit.</p>\n<p>We will use rackunit to test the middleware functionality. The rackunit test suite provides a rich set of verbs to evaluate the state of the system. Rackunit provides:</p>\n<ul>\n<li>a basic capability to check if variables or statement evaluate properly</li>\n<li>a test-case verb to group tests together</li>\n<li>a test-suite verb to group test around a theme.</li>\n</ul>\n<p>I recommend you consult the Racket documentation for further <a href=\"https://docs.racket-lang.org/rackunit/\">details</a>. We are going to keep our tests simple. We’ll evaluate the functionality of each method in the middleware.rkt file, developing tests and evaluating edge cases. This set of tests will be very simple, really just a demonstration. Rackunit has as much capability as any competing test framework I have used.</p>\n<p>The test file we’ll use is called test-middleware.rkt. As I said before, it will contain tests for each method in the middleware module. To use rackunit, we have to first ‘require’ it in. We then require in any Racket support libraries. Finally we require in the middleware.rkt module. Requiring “middleware.rkt” will bring in all of the definitions and variables that are exposed through a “provide” statement.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require rackunit)</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">(require &quot;middleware.rkt&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now we can create our first test. Contains-topic inspects the topic-hash to see if a specific topic-name exists.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: contains-topic&quot;</span><br><span class=\"line\">           ; setup by adding a topic &#x27;key and an element &#x27;aaa</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (contains-topic &#x27;key) #t &quot;should contain the test topic&quot;)</span><br><span class=\"line\">           (check-equal? (contains-topic &#x27;foo) #f &quot;should not contain &#x27;foo&#x27; topic&quot;)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           ; clean up before next test</span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>We first, add a topic named ‘key and add some data ‘aaa. Then we evaluate different rackunit check-equal clauses to determine if the topic hash is setup correctly.  In this case, we ask:</p>\n<ul>\n<li>is there only 1 topic name</li>\n<li>there should not be a ‘foo topic, we did not add that</li>\n<li>the topic-hash should only have a single topic</li>\n</ul>\n<p>Finally, if each of these test cases pass, we clean up the topic-hash to get it ready for the next test.  It is a best practice to leave your data structures in a known state at the end of each test. Don’t string tests together, unless you are using rackunit verbs like “test-suite”.</p>\n<p>next we test add-data-to-topic. There is a lot to test here…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: add-data-to-topic&quot;</span><br><span class=\"line\">           ; first, should be nothing in the topic hash</span><br><span class=\"line\">           (check-equal? (hash-count  topic-hash) 0 &quot;should be empty&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a single topic and 1 item</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 1 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a 2nd item to the test topic</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;bbb)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 2 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &#x27;zzz)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 2 &quot;should be 2 topics now&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 2 &quot;should only be 2 items in the &#x27;key queue&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 1 &quot;should only be 1 item in the &#x27;key2 queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &quot;go man go&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 2 &quot;should be 2 items in the &#x27;key2 queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &quot;[ &#x27;foo &#x27;bar ]&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 3 &quot;should be 2 items in the &#x27;key2 queue&quot;)</span><br><span class=\"line\">           (check-equal? (dequeue! (hash-ref topic-hash &#x27;key2)) &#x27;zzz &quot;should be the first string zzz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key)</span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key2)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>First, make sure the topic-hash is clear. Then, add a key and data and test to make sure there is only 1 key and 1 piece of data. Going on, add a 2nd data item and test. Then add a 2nd key + data and evaluate the topic-hash state to make sure it is correct. Finally, clean up the topic-hash, to prepare for the next test.</p>\n<p>The method to test remove-data-from-topic. The topic-hash should have the input topic present and there should be data in the queue associated with the topic. Here is the original remove code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br></pre></td></tr></table></figure>\n\n<p>It may not be obvious, but this code does not work correctly. The code says: “if there is a topic by this name, dequeue the first thing on the queue and return it”. The tests we will run follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: remove-data-from-topic&quot;</span><br><span class=\"line\">           ; first, should be nothing in the topic hash</span><br><span class=\"line\">           (check-equal? (hash-count  topic-hash) 0 &quot;should be empty&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a single topic and 1 item</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 1 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; ... now remove stuff</span><br><span class=\"line\"></span><br><span class=\"line\">           (check-equal? (remove-data-from-topic &#x27;key) &#x27;aaa  &quot;remove only item in the  queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; now remove another item - this should fail.</span><br><span class=\"line\">           ;(check-equal? (remove-data-from-topic &#x27;key) &quot;&#123; \\&quot;error\\&quot;: \\&quot;no data in queue &#x27;key\\&quot; &#125;\\n&quot; &quot;should be nothing in the queue&quot;)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>When we run the tests, we can use ‘DrRacket’ or run from the command line. If we run from the command line, we see the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ raco test: &quot;test-middleware.rkt&quot;</span><br><span class=\"line\">raco test: &quot;test-middleware.rkt&quot;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">middleware: remove-data-from-topic</span><br><span class=\"line\">ERROR</span><br><span class=\"line\">name:       check-equal?</span><br><span class=\"line\">location:   test-middleware.rkt:63:11</span><br><span class=\"line\"></span><br><span class=\"line\">dequeue!: expected argument of type &lt;non-empty queue&gt;; given: #&lt;queue&gt;</span><br><span class=\"line\">1/3 test failures</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The test output shows that we had an error.  The Racket system found an empty queue and stopped the tests. If we look at the code we see that we did not test to see if the queue was empty, we just try to dequeue the next item.</p>\n<p>To fix this, let’s test the queue first before we try to pop something off it. We can use “queue-empty?”. If the queue is empty, no point in trying to pop an item off, just return the error string.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  ; do we have this topic?</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      ; is there something in the queue?</span><br><span class=\"line\">      (if (queue-empty? (get-queue-for-topic topic-name))</span><br><span class=\"line\">          ; no return an error</span><br><span class=\"line\">          (let* ([rtn (format &quot;&#123; \\&quot;error\\&quot;: \\&quot;no data in queue ~v\\&quot; &#125;~%&quot; topic-name)])</span><br><span class=\"line\">            (displayln rtn)</span><br><span class=\"line\">            rtn)</span><br><span class=\"line\">          ; yes, build a valid return  json</span><br><span class=\"line\">          (format  &quot;&#123; \\&quot;topic-name\\&quot;: ~s \\&quot;payload\\&quot;: ~v &#125;&quot; topic-name (dequeue! (get-queue-for-topic topic-name)))</span><br><span class=\"line\"></span><br><span class=\"line\">          )</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;&#123; \\&quot;error\\&quot;: \\&quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Ok, found and fixed that bug. Now, let’s examine geet-queue-for-topic. If it SHOULD return a valid queue if the topic is present. But the way it is coded, if the topic is not present, we generate an error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br></pre></td></tr></table></figure>\n\n<p>Not good! Since we always test the returned queue to see if it is empty let’s always return a valid queue. New code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (hash-ref topic-hash topic-name)</span><br><span class=\"line\">      (make-queue)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"Testing-on-checkin\"><a href=\"#Testing-on-checkin\" class=\"headerlink\" title=\"Testing on checkin\"></a>Testing on checkin</h1><p>Finally, let’s setup our git repo so that the tests run each time we check our code it. Github provides “actions”, which can do a number of things for us.  For example: run tests, package our code for deployment to containers, or reformat code according to test standards.</p>\n<p>The Github action code is stored in a special directory in the repo called “.github/workflows”. We place a file there that provides instructions for github actions to follow. In our case, we’ll use:</p>\n<ul>\n<li>A standard github action ubuntu worker node,</li>\n<li>Install Racket on the worker</li>\n<li>Run raco test test-middleware.rkt</li>\n</ul>\n<p>Here is the action code;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Makefile CI</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches: [ main ]</span><br><span class=\"line\">  pull_request:</span><br><span class=\"line\">    branches: [ main ]</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\"></span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - uses: actions/checkout@v2</span><br><span class=\"line\">    </span><br><span class=\"line\"> </span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Install dependencies</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        sudo apt-get update</span><br><span class=\"line\">        sudo apt-get install -y racket</span><br><span class=\"line\">        raco test test-middleware.rkt</span><br></pre></td></tr></table></figure>\n\n<p>A break down of the statements in the file follows:</p>\n<ul>\n<li>name: Makefile CI -  I choose this because it was very close to what I needed</li>\n<li>on: … - push or pull requests, run the action</li>\n<li>jobs: - this is the action steps</li>\n<li>build: runs-on - tells git to grab a ubuntu-latest worker</li>\n<li>steps: there are 3</li>\n<li>uses: actions/checkout@2 is a git check out step from the market place</li>\n<li>name: &amp; run: update the ubuntu container, install racket and run our tests</li>\n</ul>\n<p>If something fails, you receive an email complaining about the failure. This is great for working in teams of people. Each checkin will notify everybody of the code status and alert people for problems. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Testing your code is very important. As we saw here, the code worked for the easy path cases. It failed and would have had strange behavior if we had not caught the remove-data-from-topic bug or the get-queue-for-topic bug. Racket’s testing framework rackunit is very robust and provides a lot more capability than we used here. But these tests demonstrate how to get started.</p>\n","site":{"data":{}},"excerpt":"<p>The 5th article in the series, testing</p>","more":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><ul>\n<li>Code organization, racket require and provide</li>\n<li>Test cases</li>\n<li>Github Actions</li>\n<li>Conclusion</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Up to this point we have created a working message queue.  It uses Racket’s http stack and presents a simple to use http POST API to add / delete messages in topics. It also has an administrative API to explore and manipulate the topic list and data stored in queues under specific topics.</p>\n<p>The system is architected as a front-door that defines the http interface. The middleware defines the logic to handle manipulating the hash table. Last, we implement a Racket hash table to organize the message queue.</p>\n<p>This article will expand on that base by adding testing. We use the Racket rackunit test suite.</p>\n<h1 id=\"Preliminaries\"><a href=\"#Preliminaries\" class=\"headerlink\" title=\"Preliminaries\"></a>Preliminaries</h1><p>Last article, we spilt the code into 2 files, front-door.rkt and middleware.rkt. The front-door code handles http interfacing. We are not going to test that functionality with rackunit.</p>\n<p>We will use rackunit to test the middleware functionality. The rackunit test suite provides a rich set of verbs to evaluate the state of the system. Rackunit provides:</p>\n<ul>\n<li>a basic capability to check if variables or statement evaluate properly</li>\n<li>a test-case verb to group tests together</li>\n<li>a test-suite verb to group test around a theme.</li>\n</ul>\n<p>I recommend you consult the Racket documentation for further <a href=\"https://docs.racket-lang.org/rackunit/\">details</a>. We are going to keep our tests simple. We’ll evaluate the functionality of each method in the middleware.rkt file, developing tests and evaluating edge cases. This set of tests will be very simple, really just a demonstration. Rackunit has as much capability as any competing test framework I have used.</p>\n<p>The test file we’ll use is called test-middleware.rkt. As I said before, it will contain tests for each method in the middleware module. To use rackunit, we have to first ‘require’ it in. We then require in any Racket support libraries. Finally we require in the middleware.rkt module. Requiring “middleware.rkt” will bring in all of the definitions and variables that are exposed through a “provide” statement.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require rackunit)</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">(require &quot;middleware.rkt&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now we can create our first test. Contains-topic inspects the topic-hash to see if a specific topic-name exists.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: contains-topic&quot;</span><br><span class=\"line\">           ; setup by adding a topic &#x27;key and an element &#x27;aaa</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (contains-topic &#x27;key) #t &quot;should contain the test topic&quot;)</span><br><span class=\"line\">           (check-equal? (contains-topic &#x27;foo) #f &quot;should not contain &#x27;foo&#x27; topic&quot;)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           ; clean up before next test</span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>We first, add a topic named ‘key and add some data ‘aaa. Then we evaluate different rackunit check-equal clauses to determine if the topic hash is setup correctly.  In this case, we ask:</p>\n<ul>\n<li>is there only 1 topic name</li>\n<li>there should not be a ‘foo topic, we did not add that</li>\n<li>the topic-hash should only have a single topic</li>\n</ul>\n<p>Finally, if each of these test cases pass, we clean up the topic-hash to get it ready for the next test.  It is a best practice to leave your data structures in a known state at the end of each test. Don’t string tests together, unless you are using rackunit verbs like “test-suite”.</p>\n<p>next we test add-data-to-topic. There is a lot to test here…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: add-data-to-topic&quot;</span><br><span class=\"line\">           ; first, should be nothing in the topic hash</span><br><span class=\"line\">           (check-equal? (hash-count  topic-hash) 0 &quot;should be empty&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a single topic and 1 item</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 1 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a 2nd item to the test topic</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;bbb)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 2 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &#x27;zzz)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 2 &quot;should be 2 topics now&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 2 &quot;should only be 2 items in the &#x27;key queue&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 1 &quot;should only be 1 item in the &#x27;key2 queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &quot;go man go&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 2 &quot;should be 2 items in the &#x27;key2 queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           (add-data-to-topic &#x27;key2 &quot;[ &#x27;foo &#x27;bar ]&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key2)) 3 &quot;should be 2 items in the &#x27;key2 queue&quot;)</span><br><span class=\"line\">           (check-equal? (dequeue! (hash-ref topic-hash &#x27;key2)) &#x27;zzz &quot;should be the first string zzz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key)</span><br><span class=\"line\">           (hash-remove! topic-hash &#x27;key2)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>First, make sure the topic-hash is clear. Then, add a key and data and test to make sure there is only 1 key and 1 piece of data. Going on, add a 2nd data item and test. Then add a 2nd key + data and evaluate the topic-hash state to make sure it is correct. Finally, clean up the topic-hash, to prepare for the next test.</p>\n<p>The method to test remove-data-from-topic. The topic-hash should have the input topic present and there should be data in the queue associated with the topic. Here is the original remove code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([datam (dequeue! (get-queue-for-topic topic-name))])</span><br><span class=\"line\">          ;(displayln (format &quot;::-&gt;~v&quot; datam)</span><br><span class=\"line\">          datam))</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br></pre></td></tr></table></figure>\n\n<p>It may not be obvious, but this code does not work correctly. The code says: “if there is a topic by this name, dequeue the first thing on the queue and return it”. The tests we will run follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(test-case &quot;middleware: remove-data-from-topic&quot;</span><br><span class=\"line\">           ; first, should be nothing in the topic hash</span><br><span class=\"line\">           (check-equal? (hash-count  topic-hash) 0 &quot;should be empty&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; add a single topic and 1 item</span><br><span class=\"line\">           (add-data-to-topic &#x27;key &#x27;aaa)</span><br><span class=\"line\">           (check-equal? (hash-count topic-hash) 1 &quot;should only be a single topic&quot;)</span><br><span class=\"line\">           (check-equal? (queue-length (hash-ref topic-hash &#x27;key)) 1 &quot;should only be a  single item in the queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; ... now remove stuff</span><br><span class=\"line\"></span><br><span class=\"line\">           (check-equal? (remove-data-from-topic &#x27;key) &#x27;aaa  &quot;remove only item in the  queue&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">           ; now remove another item - this should fail.</span><br><span class=\"line\">           ;(check-equal? (remove-data-from-topic &#x27;key) &quot;&#123; \\&quot;error\\&quot;: \\&quot;no data in queue &#x27;key\\&quot; &#125;\\n&quot; &quot;should be nothing in the queue&quot;)</span><br><span class=\"line\">           )</span><br></pre></td></tr></table></figure>\n\n<p>When we run the tests, we can use ‘DrRacket’ or run from the command line. If we run from the command line, we see the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ raco test: &quot;test-middleware.rkt&quot;</span><br><span class=\"line\">raco test: &quot;test-middleware.rkt&quot;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">middleware: remove-data-from-topic</span><br><span class=\"line\">ERROR</span><br><span class=\"line\">name:       check-equal?</span><br><span class=\"line\">location:   test-middleware.rkt:63:11</span><br><span class=\"line\"></span><br><span class=\"line\">dequeue!: expected argument of type &lt;non-empty queue&gt;; given: #&lt;queue&gt;</span><br><span class=\"line\">1/3 test failures</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The test output shows that we had an error.  The Racket system found an empty queue and stopped the tests. If we look at the code we see that we did not test to see if the queue was empty, we just try to dequeue the next item.</p>\n<p>To fix this, let’s test the queue first before we try to pop something off it. We can use “queue-empty?”. If the queue is empty, no point in trying to pop an item off, just return the error string.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (remove-data-from-topic topic-name)</span><br><span class=\"line\">  ; do we have this topic?</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      ; is there something in the queue?</span><br><span class=\"line\">      (if (queue-empty? (get-queue-for-topic topic-name))</span><br><span class=\"line\">          ; no return an error</span><br><span class=\"line\">          (let* ([rtn (format &quot;&#123; \\&quot;error\\&quot;: \\&quot;no data in queue ~v\\&quot; &#125;~%&quot; topic-name)])</span><br><span class=\"line\">            (displayln rtn)</span><br><span class=\"line\">            rtn)</span><br><span class=\"line\">          ; yes, build a valid return  json</span><br><span class=\"line\">          (format  &quot;&#123; \\&quot;topic-name\\&quot;: ~s \\&quot;payload\\&quot;: ~v &#125;&quot; topic-name (dequeue! (get-queue-for-topic topic-name)))</span><br><span class=\"line\"></span><br><span class=\"line\">          )</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let* ([rtn (format &quot;&#123; \\&quot;error\\&quot;: \\&quot;did not find topic ~v~%&quot; topic-name)])</span><br><span class=\"line\">          (display rtn)</span><br><span class=\"line\">          rtn))))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Ok, found and fixed that bug. Now, let’s examine geet-queue-for-topic. If it SHOULD return a valid queue if the topic is present. But the way it is coded, if the topic is not present, we generate an error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">      (hash-ref topic-hash topic-name))</span><br></pre></td></tr></table></figure>\n\n<p>Not good! Since we always test the returned queue to see if it is empty let’s always return a valid queue. New code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (get-queue-for-topic topic-name)</span><br><span class=\"line\">  ; just return the queue for this topic,</span><br><span class=\"line\">  ;  somebody  else has to check to see if the topic-name exists</span><br><span class=\"line\">  (if (contains-topic topic-name)</span><br><span class=\"line\">      (hash-ref topic-hash topic-name)</span><br><span class=\"line\">      (make-queue)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"Testing-on-checkin\"><a href=\"#Testing-on-checkin\" class=\"headerlink\" title=\"Testing on checkin\"></a>Testing on checkin</h1><p>Finally, let’s setup our git repo so that the tests run each time we check our code it. Github provides “actions”, which can do a number of things for us.  For example: run tests, package our code for deployment to containers, or reformat code according to test standards.</p>\n<p>The Github action code is stored in a special directory in the repo called “.github/workflows”. We place a file there that provides instructions for github actions to follow. In our case, we’ll use:</p>\n<ul>\n<li>A standard github action ubuntu worker node,</li>\n<li>Install Racket on the worker</li>\n<li>Run raco test test-middleware.rkt</li>\n</ul>\n<p>Here is the action code;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Makefile CI</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches: [ main ]</span><br><span class=\"line\">  pull_request:</span><br><span class=\"line\">    branches: [ main ]</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\"></span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - uses: actions/checkout@v2</span><br><span class=\"line\">    </span><br><span class=\"line\"> </span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Install dependencies</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        sudo apt-get update</span><br><span class=\"line\">        sudo apt-get install -y racket</span><br><span class=\"line\">        raco test test-middleware.rkt</span><br></pre></td></tr></table></figure>\n\n<p>A break down of the statements in the file follows:</p>\n<ul>\n<li>name: Makefile CI -  I choose this because it was very close to what I needed</li>\n<li>on: … - push or pull requests, run the action</li>\n<li>jobs: - this is the action steps</li>\n<li>build: runs-on - tells git to grab a ubuntu-latest worker</li>\n<li>steps: there are 3</li>\n<li>uses: actions/checkout@2 is a git check out step from the market place</li>\n<li>name: &amp; run: update the ubuntu container, install racket and run our tests</li>\n</ul>\n<p>If something fails, you receive an email complaining about the failure. This is great for working in teams of people. Each checkin will notify everybody of the code status and alert people for problems. </p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Testing your code is very important. As we saw here, the code worked for the easy path cases. It failed and would have had strange behavior if we had not caught the remove-data-from-topic bug or the get-queue-for-topic bug. Racket’s testing framework rackunit is very robust and provides a lot more capability than we used here. But these tests demonstrate how to get started.</p>"},{"title":"A Message queue in Racket - part 2","date":"2021-10-22T14:26:28.000Z","_content":"\nThis post is the second in a series describing the creation of a message queue \n<!-- more -->\n\n# Table of Contents:\n* Introducing the server shell\n* The middle layer\n* Testing what we have\n\n# Introduction\n\nThis is the 2nd post in this series. We are exploring building a message queue using Racket. The message queue is a program that provides an API to store and retrieve messages. It organizes messages on topics and each topic has a queue associated with it. \n\nWe are using Racket's web stack to provide the web interface, a Racket hash-table to provide the topics and a Racket data/queue to provide the queues for storing messages. Racket provides a nice JSON library for handling JSON.\n\nIn the first installment of this [series]( https://muguira-james.github.io/2021/10/13/A-message-Queue-in-Racket/), we described the scaffolding for the application. The application at this point exposes an API with 1 method in it: 'hello', which just provides a string with the date and time embedded when you call it. We will define more data structures and 1 more API call in this article.\n\nSo far, our backend architecture defines a front door and a middle layer. The front door code hides the web mechanics of handling http requests. It dispatches to our simple 'hello' API method. Let's extend that to expose the dispatching. Once we have the dispatch code exposed, we can further extend to add the various API calls that finish off the application. The last line of the application called the web server start up code and established the ports, URLs and other items needed to make our sever. Our extensions follow:\n\n```\n#lang racket\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n(require gregor)\n\n(define (hello request)\n  (http-response  \"Hello from message queue\"))\n\n(define (http-response content)\n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") do-nothing]\n   [(\"hello\") greeting-page]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n  ;  [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n ;  [(\"topic-count\") topic-count]\n ;   [(\"topic-data\") #:method \"post\" topic-data]\n ;  [(\"drain-topic\") #:method \"post\" drain-topic]\n ;  [(\"drain-queue\") #:method \"post\" drain-queue]\n   [else (error \"page not found\")]))\n\n(define (request-handler request)\n  (dispatch request))\n\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n\n```\n\nThere are now 4 methods (in reverse order): server/servlet, request-handler, define-values, and http-response. Http-response has not changed. It is our common code we defined to reply to a request from a caller.  It takes a string as input and create a http response suitable for a caller to process with either text (TEXT/HTML-MIME-TYPE) or JSON.  To REALLY do JSON we should change the \"TEXT/HTML-MIME-TYPE\" string to \"APPLICATION/JSON\", but we'll leave that for now.\n\nThe next function, define-values is a Racket construct that binds variables as the language parser is working its way through code file. It builds a look up table.  It works like a let statement in that variable definitions are created as the reader is parsing your Racket expressions. Racket uses a 2-step process to translate Racket expressions into working code: a reader and an expansion processor. The define-values creates and binds values to the variables during the reader process. In our case, for each item found on the input URL, the dispatcher will look for a definition. The only valid URL expansions are: \n\n* \"\", which corresponds to http://localhost:8000/, \n* \"hello\", which would call the hello function, \n* \"enque\", which would call the enqueue function,\n* \"deque\", which would call the dequeue function,\n* \"topic-list\", which calls topic-list function,\n* \"topic-count\", which calls the topic-count function,\n* \"topic-data\", which calls the topic-data function,\n* \"drain-topic\", calling the topic drain function,\n* \"drain-que\", calling the drain queue function.\n\nIf the item decoded from the URL does equal one of those handlers, the dispatcher will call the error handler. The next function is the actual request-handler. The Racket web application framework we are working with will parse the in-coming URL and break it down into components.  By the time the server is ready to call request-handler, which you notice is the 1st parameter to the server/servlet, the URL is parsed, and the API is ready to decode and route to the correct call.  For example, if we were to use curl, a well-formed URL would look like:\n\n```\n$ curl --data \"{ \"param1\": \"value1\", \"param2\": \"value2\"  http://hostname/resource\n\n```\n\n# Middle Layer\n\nThe previous section just described the entire front door of our message queue. The next sections describe the middle layer. Here we will introduce the logic for each API call and describe how to test the code.\n\nThe first function we introduce is enqueue.  The basic message storage mechanism for the program is a topic hash, which is a hash table where the keys are the topic names and each name has a value element that is a Racket data/queue. This function adds a message payload element into the queue associated with the topic.  This topic structure can be visualized like so:\n\n![topic-hash structure](/images/Racket-queue-2.png)\n\nThe enqueue function in our message queue system has 2 elements: the dispatch target in the front door and a function for handling the message data structure. Let's take a look at the front door element:\n\n```\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n      (displayln\n       (format\n        \"enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%\"\n        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))\n      (let ([rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set! rtn 'data payload-data)\n        (hash-set! rtn 'count (hash-count topic-hash))\n        (hash-set! rtn 'keys (hash-keys topic-hash))\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n```\n\nWhile it looks complex, that is because it handles getting the topic name and payload from the input http message. It then calls the code that handles the internal data structures.  Finally, it builds the output response to send back to the client.  The response is most of the code. The response creates a hash, which is converted to JSON and written to the client.  The response hash fields: \"topic-name\", \"data\", \"count\" and the \"key\" value all encoded.\n\nThe enqueue function takes a topic name and a message payload element as input. Its operation is simple: if the topic-name is present, add the message data to the queue and return.  If not present, create a new queue, add the message data to that queue and add that queue to the input topic-name, then return.\n\n```\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n```\n\n# Testing what we have\n\nLet's test the program. To do so, use the racket program interpreter to run the front-door.rkt file. This will produce some messages. Now, in another terminal, let's run the test code \"enq.js\" which will try and add a topic and payload to the message queue system. The output looks like:\n\nIn the racket terminal:\n\n```\n$ racket  front-door.rkt\nYour Web application is running at http://localhost:8000.\nStop this program at any time to terminate the Web Server.\nenq: name: \"a-topic\": data: \"(\"brownies and ice cream\") hash-size:  1 hash-keys: \"(\"a-topic\")\n\n{\"count\": 1, \"data\": [\"brownies and ice cream\"], \"keys\": [\"a-topic\"], \"topic-name\":  \"a-topic\" }\n```\n\nIn the node code terminal:\n\n```\n$ node enq.js -q a-topic -p \"brownies and ice cream\"\nOptions-> { que_name: \"a-topic\",  payload: \"brownies and ice cream\" }\nSending... { que_name: \"a-topic\",  payload: \"brownies and ice cream\" }\n{\ncount: 1,\ndata: \"brownies and ice cream\",\nkeys: [ \"a-topic\" ],\ntopic-name: \"a-topic\"\n}\n```\nQuite a lot of output from each window, but you can see how the racket front-door program used \"display\" to send data to the console.\n\nThis is the node program enq.js:\n\n``` \n\nconst fetch = require('node-fetch')\nconst commandlineargs = require('command-line-args')\n\n\nconst optionDefinitions = [\n    { name: 'que_name', alias: 'q', type: String },\n    { name: 'payload', alias: 'p', type: String }\n    ]\n\nconst options = commandlineargs(optionDefinitions)\nconsole.log(\"options->\", options)\n\nvar deft_q = \"james\";\nvar deft_payload = [ \"cooking\", \"slacking\", \"hacking\" ];\n\nif (Object.keys(options).length != 0) {\n    deft_q = options.que_name\n    deft_payload  = options.payload\n} \n    \nvar data = {\n    topicname: deft_q,\n    payload: deft_payload\n}\nconsole.log(\"sending...\", data)\n\nfetch('http://localhost:8000/enque', {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: { 'Content-Type' : 'application/json' },\n})\n    .then(res => res.json())\n    .then(json => console.log(json));\n\n```\n\n\n# Conclusion\n\nThis article described the front-door code for the message queue and demonstrated what the enqueue function would look like.  The fundamental data structure of the message queue is a hash table called topic-hash.  The system is composed of 3 parts: the front-door dispatcher, the data structures to store messages on topics and the middle ware code to manipulate that data structure. The code also demonstrated a node js based program to enqueue messages.\n","source":"_posts/A-message-queue-racket-part-2.md","raw":"---\ntitle: A Message queue in Racket - part 2\ndate: 2021-10-22 10:26:28\ntags:\n  - Racket\ncategories:\n  - Programming\n  - message queue\n---\n\nThis post is the second in a series describing the creation of a message queue \n<!-- more -->\n\n# Table of Contents:\n* Introducing the server shell\n* The middle layer\n* Testing what we have\n\n# Introduction\n\nThis is the 2nd post in this series. We are exploring building a message queue using Racket. The message queue is a program that provides an API to store and retrieve messages. It organizes messages on topics and each topic has a queue associated with it. \n\nWe are using Racket's web stack to provide the web interface, a Racket hash-table to provide the topics and a Racket data/queue to provide the queues for storing messages. Racket provides a nice JSON library for handling JSON.\n\nIn the first installment of this [series]( https://muguira-james.github.io/2021/10/13/A-message-Queue-in-Racket/), we described the scaffolding for the application. The application at this point exposes an API with 1 method in it: 'hello', which just provides a string with the date and time embedded when you call it. We will define more data structures and 1 more API call in this article.\n\nSo far, our backend architecture defines a front door and a middle layer. The front door code hides the web mechanics of handling http requests. It dispatches to our simple 'hello' API method. Let's extend that to expose the dispatching. Once we have the dispatch code exposed, we can further extend to add the various API calls that finish off the application. The last line of the application called the web server start up code and established the ports, URLs and other items needed to make our sever. Our extensions follow:\n\n```\n#lang racket\n\n(require web-server/servlet) \n(require web-server/servlet-env)\n(require json)\n(require data/queue)\n\n(require gregor)\n\n(define (hello request)\n  (http-response  \"Hello from message queue\"))\n\n(define (http-response content)\n  (response/full\n    200                  ; HTTP response code.\n    #\"OK\"                ; HTTP response message.\n    (current-seconds)    ; Timestamp.\n    TEXT/HTML-MIME-TYPE  ; MIME type for content.\n    '()                  ; Additional HTTP headers.\n    (list                ; Content (in bytes) to send to the browser.\n      (string->bytes/utf-8 content))))\n\n(define-values (dispatch generate-url)\n  ;; URL routing table (URL dispatcher).\n  (dispatch-rules\n   [(\"\") do-nothing]\n   [(\"hello\") greeting-page]  ; check to see if the service is working\n   [(\"enque\") #:method \"post\" enque]\n  ;  [(\"deque\") #:method \"post\" deque]\n   [(\"topic-list\") topic-list]\n ;  [(\"topic-count\") topic-count]\n ;   [(\"topic-data\") #:method \"post\" topic-data]\n ;  [(\"drain-topic\") #:method \"post\" drain-topic]\n ;  [(\"drain-queue\") #:method \"post\" drain-queue]\n   [else (error \"page not found\")]))\n\n(define (request-handler request)\n  (dispatch request))\n\n\n;; Start the server.\n(serve/servlet\n  request-handler\n  #:launch-browser? #f\n  #:quit? #f\n  ; have to listen on the  right host NOT 127.0.0.1\n  #:listen-ip \"0.0.0.0\"\n  #:port 8000\n  #:servlet-regexp #rx\"\")\n\n\n```\n\nThere are now 4 methods (in reverse order): server/servlet, request-handler, define-values, and http-response. Http-response has not changed. It is our common code we defined to reply to a request from a caller.  It takes a string as input and create a http response suitable for a caller to process with either text (TEXT/HTML-MIME-TYPE) or JSON.  To REALLY do JSON we should change the \"TEXT/HTML-MIME-TYPE\" string to \"APPLICATION/JSON\", but we'll leave that for now.\n\nThe next function, define-values is a Racket construct that binds variables as the language parser is working its way through code file. It builds a look up table.  It works like a let statement in that variable definitions are created as the reader is parsing your Racket expressions. Racket uses a 2-step process to translate Racket expressions into working code: a reader and an expansion processor. The define-values creates and binds values to the variables during the reader process. In our case, for each item found on the input URL, the dispatcher will look for a definition. The only valid URL expansions are: \n\n* \"\", which corresponds to http://localhost:8000/, \n* \"hello\", which would call the hello function, \n* \"enque\", which would call the enqueue function,\n* \"deque\", which would call the dequeue function,\n* \"topic-list\", which calls topic-list function,\n* \"topic-count\", which calls the topic-count function,\n* \"topic-data\", which calls the topic-data function,\n* \"drain-topic\", calling the topic drain function,\n* \"drain-que\", calling the drain queue function.\n\nIf the item decoded from the URL does equal one of those handlers, the dispatcher will call the error handler. The next function is the actual request-handler. The Racket web application framework we are working with will parse the in-coming URL and break it down into components.  By the time the server is ready to call request-handler, which you notice is the 1st parameter to the server/servlet, the URL is parsed, and the API is ready to decode and route to the correct call.  For example, if we were to use curl, a well-formed URL would look like:\n\n```\n$ curl --data \"{ \"param1\": \"value1\", \"param2\": \"value2\"  http://hostname/resource\n\n```\n\n# Middle Layer\n\nThe previous section just described the entire front door of our message queue. The next sections describe the middle layer. Here we will introduce the logic for each API call and describe how to test the code.\n\nThe first function we introduce is enqueue.  The basic message storage mechanism for the program is a topic hash, which is a hash table where the keys are the topic names and each name has a value element that is a Racket data/queue. This function adds a message payload element into the queue associated with the topic.  This topic structure can be visualized like so:\n\n![topic-hash structure](/images/Racket-queue-2.png)\n\nThe enqueue function in our message queue system has 2 elements: the dispatch target in the front door and a function for handling the message data structure. Let's take a look at the front door element:\n\n```\n;; a hash is structured as a topic and a queue\n(define topic-hash (make-hash))\n\n(define (enque request)\n  ; put something in a queue\n  ; input: { topic: \"name\", payload: \"data-type\" }\n  (let* ([hsh (request->jshash request)]\n         [topic-name (hash-ref hsh 'topicname)]\n         [payload-data (hash-ref hsh 'payload)])\n    (begin         \n      (add-data-to-topic topic-name payload-data)\n      (displayln\n       (format\n        \"enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%\"\n        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))\n      (let ([rtn (make-hash)])\n        (hash-set! rtn 'topic-name topic-name)\n        (hash-set! rtn 'data payload-data)\n        (hash-set! rtn 'count (hash-count topic-hash))\n        (hash-set! rtn 'keys (hash-keys topic-hash))\n        (displayln (with-output-to-string (lambda () (write-json  rtn))))\n        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))\n```\n\nWhile it looks complex, that is because it handles getting the topic name and payload from the input http message. It then calls the code that handles the internal data structures.  Finally, it builds the output response to send back to the client.  The response is most of the code. The response creates a hash, which is converted to JSON and written to the client.  The response hash fields: \"topic-name\", \"data\", \"count\" and the \"key\" value all encoded.\n\nThe enqueue function takes a topic name and a message payload element as input. Its operation is simple: if the topic-name is present, add the message data to the queue and return.  If not present, create a new queue, add the message data to that queue and add that queue to the input topic-name, then return.\n\n```\n(define (add-data-to-topic key data)\n  ;; check to see if key is in the topic-hash and add data to the correct topic\n  (if (contains-topic key)\n      (enqueue! (hash-ref topic-hash key) data)\n      (begin\n        (let ([q (make-queue)])\n          (enqueue! q data)\n          (hash-set! topic-hash key q)))))\n```\n\n# Testing what we have\n\nLet's test the program. To do so, use the racket program interpreter to run the front-door.rkt file. This will produce some messages. Now, in another terminal, let's run the test code \"enq.js\" which will try and add a topic and payload to the message queue system. The output looks like:\n\nIn the racket terminal:\n\n```\n$ racket  front-door.rkt\nYour Web application is running at http://localhost:8000.\nStop this program at any time to terminate the Web Server.\nenq: name: \"a-topic\": data: \"(\"brownies and ice cream\") hash-size:  1 hash-keys: \"(\"a-topic\")\n\n{\"count\": 1, \"data\": [\"brownies and ice cream\"], \"keys\": [\"a-topic\"], \"topic-name\":  \"a-topic\" }\n```\n\nIn the node code terminal:\n\n```\n$ node enq.js -q a-topic -p \"brownies and ice cream\"\nOptions-> { que_name: \"a-topic\",  payload: \"brownies and ice cream\" }\nSending... { que_name: \"a-topic\",  payload: \"brownies and ice cream\" }\n{\ncount: 1,\ndata: \"brownies and ice cream\",\nkeys: [ \"a-topic\" ],\ntopic-name: \"a-topic\"\n}\n```\nQuite a lot of output from each window, but you can see how the racket front-door program used \"display\" to send data to the console.\n\nThis is the node program enq.js:\n\n``` \n\nconst fetch = require('node-fetch')\nconst commandlineargs = require('command-line-args')\n\n\nconst optionDefinitions = [\n    { name: 'que_name', alias: 'q', type: String },\n    { name: 'payload', alias: 'p', type: String }\n    ]\n\nconst options = commandlineargs(optionDefinitions)\nconsole.log(\"options->\", options)\n\nvar deft_q = \"james\";\nvar deft_payload = [ \"cooking\", \"slacking\", \"hacking\" ];\n\nif (Object.keys(options).length != 0) {\n    deft_q = options.que_name\n    deft_payload  = options.payload\n} \n    \nvar data = {\n    topicname: deft_q,\n    payload: deft_payload\n}\nconsole.log(\"sending...\", data)\n\nfetch('http://localhost:8000/enque', {\n    method: 'post',\n    body: JSON.stringify(data),\n    headers: { 'Content-Type' : 'application/json' },\n})\n    .then(res => res.json())\n    .then(json => console.log(json));\n\n```\n\n\n# Conclusion\n\nThis article described the front-door code for the message queue and demonstrated what the enqueue function would look like.  The fundamental data structure of the message queue is a hash table called topic-hash.  The system is composed of 3 parts: the front-door dispatcher, the data structures to store messages on topics and the middle ware code to manipulate that data structure. The code also demonstrated a node js based program to enqueue messages.\n","slug":"A-message-queue-racket-part-2","published":1,"updated":"2021-10-29T21:23:15.210Z","_id":"ckvcvb0bq0027i7e82o99bnbs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This post is the second in a series describing the creation of a message queue </p>\n<span id=\"more\"></span>\n\n<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents:\"></a>Table of Contents:</h1><ul>\n<li>Introducing the server shell</li>\n<li>The middle layer</li>\n<li>Testing what we have</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This is the 2nd post in this series. We are exploring building a message queue using Racket. The message queue is a program that provides an API to store and retrieve messages. It organizes messages on topics and each topic has a queue associated with it. </p>\n<p>We are using Racket’s web stack to provide the web interface, a Racket hash-table to provide the topics and a Racket data/queue to provide the queues for storing messages. Racket provides a nice JSON library for handling JSON.</p>\n<p>In the first installment of this <a href=\"https://muguira-james.github.io/2021/10/13/A-message-Queue-in-Racket/\">series</a>, we described the scaffolding for the application. The application at this point exposes an API with 1 method in it: ‘hello’, which just provides a string with the date and time embedded when you call it. We will define more data structures and 1 more API call in this article.</p>\n<p>So far, our backend architecture defines a front door and a middle layer. The front door code hides the web mechanics of handling http requests. It dispatches to our simple ‘hello’ API method. Let’s extend that to expose the dispatching. Once we have the dispatch code exposed, we can further extend to add the various API calls that finish off the application. The last line of the application called the web server start up code and established the ports, URLs and other items needed to make our sever. Our extensions follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">(require gregor)</span><br><span class=\"line\"></span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  (http-response  &quot;Hello from message queue&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (http-response content)</span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) do-nothing]</span><br><span class=\"line\">   [(&quot;hello&quot;) greeting-page]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">  ;  [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\"> ;  [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\"> ;   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\"> ;  [(&quot;drain-topic&quot;) #:method &quot;post&quot; drain-topic]</span><br><span class=\"line\"> ;  [(&quot;drain-queue&quot;) #:method &quot;post&quot; drain-queue]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>There are now 4 methods (in reverse order): server/servlet, request-handler, define-values, and http-response. Http-response has not changed. It is our common code we defined to reply to a request from a caller.  It takes a string as input and create a http response suitable for a caller to process with either text (TEXT/HTML-MIME-TYPE) or JSON.  To REALLY do JSON we should change the “TEXT/HTML-MIME-TYPE” string to “APPLICATION/JSON”, but we’ll leave that for now.</p>\n<p>The next function, define-values is a Racket construct that binds variables as the language parser is working its way through code file. It builds a look up table.  It works like a let statement in that variable definitions are created as the reader is parsing your Racket expressions. Racket uses a 2-step process to translate Racket expressions into working code: a reader and an expansion processor. The define-values creates and binds values to the variables during the reader process. In our case, for each item found on the input URL, the dispatcher will look for a definition. The only valid URL expansions are: </p>\n<ul>\n<li>“”, which corresponds to <a href=\"http://localhost:8000/\">http://localhost:8000/</a>, </li>\n<li>“hello”, which would call the hello function, </li>\n<li>“enque”, which would call the enqueue function,</li>\n<li>“deque”, which would call the dequeue function,</li>\n<li>“topic-list”, which calls topic-list function,</li>\n<li>“topic-count”, which calls the topic-count function,</li>\n<li>“topic-data”, which calls the topic-data function,</li>\n<li>“drain-topic”, calling the topic drain function,</li>\n<li>“drain-que”, calling the drain queue function.</li>\n</ul>\n<p>If the item decoded from the URL does equal one of those handlers, the dispatcher will call the error handler. The next function is the actual request-handler. The Racket web application framework we are working with will parse the in-coming URL and break it down into components.  By the time the server is ready to call request-handler, which you notice is the 1st parameter to the server/servlet, the URL is parsed, and the API is ready to decode and route to the correct call.  For example, if we were to use curl, a well-formed URL would look like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --data &quot;&#123; &quot;param1&quot;: &quot;value1&quot;, &quot;param2&quot;: &quot;value2&quot;  http://hostname/resource</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Middle-Layer\"><a href=\"#Middle-Layer\" class=\"headerlink\" title=\"Middle Layer\"></a>Middle Layer</h1><p>The previous section just described the entire front door of our message queue. The next sections describe the middle layer. Here we will introduce the logic for each API call and describe how to test the code.</p>\n<p>The first function we introduce is enqueue.  The basic message storage mechanism for the program is a topic hash, which is a hash table where the keys are the topic names and each name has a value element that is a Racket data/queue. This function adds a message payload element into the queue associated with the topic.  This topic structure can be visualized like so:</p>\n<p><img src=\"/images/Racket-queue-2.png\" alt=\"topic-hash structure\"></p>\n<p>The enqueue function in our message queue system has 2 elements: the dispatch target in the front door and a function for handling the message data structure. Let’s take a look at the front door element:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">      (displayln</span><br><span class=\"line\">       (format</span><br><span class=\"line\">        &quot;enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%&quot;</span><br><span class=\"line\">        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))</span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set! rtn &#x27;data payload-data)</span><br><span class=\"line\">        (hash-set! rtn &#x27;count (hash-count topic-hash))</span><br><span class=\"line\">        (hash-set! rtn &#x27;keys (hash-keys topic-hash))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br></pre></td></tr></table></figure>\n\n<p>While it looks complex, that is because it handles getting the topic name and payload from the input http message. It then calls the code that handles the internal data structures.  Finally, it builds the output response to send back to the client.  The response is most of the code. The response creates a hash, which is converted to JSON and written to the client.  The response hash fields: “topic-name”, “data”, “count” and the “key” value all encoded.</p>\n<p>The enqueue function takes a topic name and a message payload element as input. Its operation is simple: if the topic-name is present, add the message data to the queue and return.  If not present, create a new queue, add the message data to that queue and add that queue to the input topic-name, then return.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Testing-what-we-have\"><a href=\"#Testing-what-we-have\" class=\"headerlink\" title=\"Testing what we have\"></a>Testing what we have</h1><p>Let’s test the program. To do so, use the racket program interpreter to run the front-door.rkt file. This will produce some messages. Now, in another terminal, let’s run the test code “enq.js” which will try and add a topic and payload to the message queue system. The output looks like:</p>\n<p>In the racket terminal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ racket  front-door.rkt</span><br><span class=\"line\">Your Web application is running at http://localhost:8000.</span><br><span class=\"line\">Stop this program at any time to terminate the Web Server.</span><br><span class=\"line\">enq: name: &quot;a-topic&quot;: data: &quot;(&quot;brownies and ice cream&quot;) hash-size:  1 hash-keys: &quot;(&quot;a-topic&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;count&quot;: 1, &quot;data&quot;: [&quot;brownies and ice cream&quot;], &quot;keys&quot;: [&quot;a-topic&quot;], &quot;topic-name&quot;:  &quot;a-topic&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the node code terminal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node enq.js -q a-topic -p &quot;brownies and ice cream&quot;</span><br><span class=\"line\">Options-&gt; &#123; que_name: &quot;a-topic&quot;,  payload: &quot;brownies and ice cream&quot; &#125;</span><br><span class=\"line\">Sending... &#123; que_name: &quot;a-topic&quot;,  payload: &quot;brownies and ice cream&quot; &#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">count: 1,</span><br><span class=\"line\">data: &quot;brownies and ice cream&quot;,</span><br><span class=\"line\">keys: [ &quot;a-topic&quot; ],</span><br><span class=\"line\">topic-name: &quot;a-topic&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quite a lot of output from each window, but you can see how the racket front-door program used “display” to send data to the console.</p>\n<p>This is the node program enq.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const fetch = require(&#x27;node-fetch&#x27;)</span><br><span class=\"line\">const commandlineargs = require(&#x27;command-line-args&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const optionDefinitions = [</span><br><span class=\"line\">    &#123; name: &#x27;que_name&#x27;, alias: &#x27;q&#x27;, type: String &#125;,</span><br><span class=\"line\">    &#123; name: &#x27;payload&#x27;, alias: &#x27;p&#x27;, type: String &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">const options = commandlineargs(optionDefinitions)</span><br><span class=\"line\">console.log(&quot;options-&gt;&quot;, options)</span><br><span class=\"line\"></span><br><span class=\"line\">var deft_q = &quot;james&quot;;</span><br><span class=\"line\">var deft_payload = [ &quot;cooking&quot;, &quot;slacking&quot;, &quot;hacking&quot; ];</span><br><span class=\"line\"></span><br><span class=\"line\">if (Object.keys(options).length != 0) &#123;</span><br><span class=\"line\">    deft_q = options.que_name</span><br><span class=\"line\">    deft_payload  = options.payload</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">var data = &#123;</span><br><span class=\"line\">    topicname: deft_q,</span><br><span class=\"line\">    payload: deft_payload</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&quot;sending...&quot;, data)</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(&#x27;http://localhost:8000/enque&#x27;, &#123;</span><br><span class=\"line\">    method: &#x27;post&#x27;,</span><br><span class=\"line\">    body: JSON.stringify(data),</span><br><span class=\"line\">    headers: &#123; &#x27;Content-Type&#x27; : &#x27;application/json&#x27; &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(res =&gt; res.json())</span><br><span class=\"line\">    .then(json =&gt; console.log(json));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This article described the front-door code for the message queue and demonstrated what the enqueue function would look like.  The fundamental data structure of the message queue is a hash table called topic-hash.  The system is composed of 3 parts: the front-door dispatcher, the data structures to store messages on topics and the middle ware code to manipulate that data structure. The code also demonstrated a node js based program to enqueue messages.</p>\n","site":{"data":{}},"excerpt":"<p>This post is the second in a series describing the creation of a message queue </p>","more":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents:\"></a>Table of Contents:</h1><ul>\n<li>Introducing the server shell</li>\n<li>The middle layer</li>\n<li>Testing what we have</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This is the 2nd post in this series. We are exploring building a message queue using Racket. The message queue is a program that provides an API to store and retrieve messages. It organizes messages on topics and each topic has a queue associated with it. </p>\n<p>We are using Racket’s web stack to provide the web interface, a Racket hash-table to provide the topics and a Racket data/queue to provide the queues for storing messages. Racket provides a nice JSON library for handling JSON.</p>\n<p>In the first installment of this <a href=\"https://muguira-james.github.io/2021/10/13/A-message-Queue-in-Racket/\">series</a>, we described the scaffolding for the application. The application at this point exposes an API with 1 method in it: ‘hello’, which just provides a string with the date and time embedded when you call it. We will define more data structures and 1 more API call in this article.</p>\n<p>So far, our backend architecture defines a front door and a middle layer. The front door code hides the web mechanics of handling http requests. It dispatches to our simple ‘hello’ API method. Let’s extend that to expose the dispatching. Once we have the dispatch code exposed, we can further extend to add the various API calls that finish off the application. The last line of the application called the web server start up code and established the ports, URLs and other items needed to make our sever. Our extensions follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require web-server/servlet) </span><br><span class=\"line\">(require web-server/servlet-env)</span><br><span class=\"line\">(require json)</span><br><span class=\"line\">(require data/queue)</span><br><span class=\"line\"></span><br><span class=\"line\">(require gregor)</span><br><span class=\"line\"></span><br><span class=\"line\">(define (hello request)</span><br><span class=\"line\">  (http-response  &quot;Hello from message queue&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (http-response content)</span><br><span class=\"line\">  (response/full</span><br><span class=\"line\">    200                  ; HTTP response code.</span><br><span class=\"line\">    #&quot;OK&quot;                ; HTTP response message.</span><br><span class=\"line\">    (current-seconds)    ; Timestamp.</span><br><span class=\"line\">    TEXT/HTML-MIME-TYPE  ; MIME type for content.</span><br><span class=\"line\">    &#x27;()                  ; Additional HTTP headers.</span><br><span class=\"line\">    (list                ; Content (in bytes) to send to the browser.</span><br><span class=\"line\">      (string-&gt;bytes/utf-8 content))))</span><br><span class=\"line\"></span><br><span class=\"line\">(define-values (dispatch generate-url)</span><br><span class=\"line\">  ;; URL routing table (URL dispatcher).</span><br><span class=\"line\">  (dispatch-rules</span><br><span class=\"line\">   [(&quot;&quot;) do-nothing]</span><br><span class=\"line\">   [(&quot;hello&quot;) greeting-page]  ; check to see if the service is working</span><br><span class=\"line\">   [(&quot;enque&quot;) #:method &quot;post&quot; enque]</span><br><span class=\"line\">  ;  [(&quot;deque&quot;) #:method &quot;post&quot; deque]</span><br><span class=\"line\">   [(&quot;topic-list&quot;) topic-list]</span><br><span class=\"line\"> ;  [(&quot;topic-count&quot;) topic-count]</span><br><span class=\"line\"> ;   [(&quot;topic-data&quot;) #:method &quot;post&quot; topic-data]</span><br><span class=\"line\"> ;  [(&quot;drain-topic&quot;) #:method &quot;post&quot; drain-topic]</span><br><span class=\"line\"> ;  [(&quot;drain-queue&quot;) #:method &quot;post&quot; drain-queue]</span><br><span class=\"line\">   [else (error &quot;page not found&quot;)]))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (request-handler request)</span><br><span class=\"line\">  (dispatch request))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;; Start the server.</span><br><span class=\"line\">(serve/servlet</span><br><span class=\"line\">  request-handler</span><br><span class=\"line\">  #:launch-browser? #f</span><br><span class=\"line\">  #:quit? #f</span><br><span class=\"line\">  ; have to listen on the  right host NOT 127.0.0.1</span><br><span class=\"line\">  #:listen-ip &quot;0.0.0.0&quot;</span><br><span class=\"line\">  #:port 8000</span><br><span class=\"line\">  #:servlet-regexp #rx&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>There are now 4 methods (in reverse order): server/servlet, request-handler, define-values, and http-response. Http-response has not changed. It is our common code we defined to reply to a request from a caller.  It takes a string as input and create a http response suitable for a caller to process with either text (TEXT/HTML-MIME-TYPE) or JSON.  To REALLY do JSON we should change the “TEXT/HTML-MIME-TYPE” string to “APPLICATION/JSON”, but we’ll leave that for now.</p>\n<p>The next function, define-values is a Racket construct that binds variables as the language parser is working its way through code file. It builds a look up table.  It works like a let statement in that variable definitions are created as the reader is parsing your Racket expressions. Racket uses a 2-step process to translate Racket expressions into working code: a reader and an expansion processor. The define-values creates and binds values to the variables during the reader process. In our case, for each item found on the input URL, the dispatcher will look for a definition. The only valid URL expansions are: </p>\n<ul>\n<li>“”, which corresponds to <a href=\"http://localhost:8000/\">http://localhost:8000/</a>, </li>\n<li>“hello”, which would call the hello function, </li>\n<li>“enque”, which would call the enqueue function,</li>\n<li>“deque”, which would call the dequeue function,</li>\n<li>“topic-list”, which calls topic-list function,</li>\n<li>“topic-count”, which calls the topic-count function,</li>\n<li>“topic-data”, which calls the topic-data function,</li>\n<li>“drain-topic”, calling the topic drain function,</li>\n<li>“drain-que”, calling the drain queue function.</li>\n</ul>\n<p>If the item decoded from the URL does equal one of those handlers, the dispatcher will call the error handler. The next function is the actual request-handler. The Racket web application framework we are working with will parse the in-coming URL and break it down into components.  By the time the server is ready to call request-handler, which you notice is the 1st parameter to the server/servlet, the URL is parsed, and the API is ready to decode and route to the correct call.  For example, if we were to use curl, a well-formed URL would look like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --data &quot;&#123; &quot;param1&quot;: &quot;value1&quot;, &quot;param2&quot;: &quot;value2&quot;  http://hostname/resource</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Middle-Layer\"><a href=\"#Middle-Layer\" class=\"headerlink\" title=\"Middle Layer\"></a>Middle Layer</h1><p>The previous section just described the entire front door of our message queue. The next sections describe the middle layer. Here we will introduce the logic for each API call and describe how to test the code.</p>\n<p>The first function we introduce is enqueue.  The basic message storage mechanism for the program is a topic hash, which is a hash table where the keys are the topic names and each name has a value element that is a Racket data/queue. This function adds a message payload element into the queue associated with the topic.  This topic structure can be visualized like so:</p>\n<p><img src=\"/images/Racket-queue-2.png\" alt=\"topic-hash structure\"></p>\n<p>The enqueue function in our message queue system has 2 elements: the dispatch target in the front door and a function for handling the message data structure. Let’s take a look at the front door element:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;; a hash is structured as a topic and a queue</span><br><span class=\"line\">(define topic-hash (make-hash))</span><br><span class=\"line\"></span><br><span class=\"line\">(define (enque request)</span><br><span class=\"line\">  ; put something in a queue</span><br><span class=\"line\">  ; input: &#123; topic: &quot;name&quot;, payload: &quot;data-type&quot; &#125;</span><br><span class=\"line\">  (let* ([hsh (request-&gt;jshash request)]</span><br><span class=\"line\">         [topic-name (hash-ref hsh &#x27;topicname)]</span><br><span class=\"line\">         [payload-data (hash-ref hsh &#x27;payload)])</span><br><span class=\"line\">    (begin         </span><br><span class=\"line\">      (add-data-to-topic topic-name payload-data)</span><br><span class=\"line\">      (displayln</span><br><span class=\"line\">       (format</span><br><span class=\"line\">        &quot;enq: name: ~v: data: ~v hash-size: ~v hash-keys: ~v~%&quot;</span><br><span class=\"line\">        topic-name payload-data (hash-count topic-hash) (hash-keys topic-hash)))</span><br><span class=\"line\">      (let ([rtn (make-hash)])</span><br><span class=\"line\">        (hash-set! rtn &#x27;topic-name topic-name)</span><br><span class=\"line\">        (hash-set! rtn &#x27;data payload-data)</span><br><span class=\"line\">        (hash-set! rtn &#x27;count (hash-count topic-hash))</span><br><span class=\"line\">        (hash-set! rtn &#x27;keys (hash-keys topic-hash))</span><br><span class=\"line\">        (displayln (with-output-to-string (lambda () (write-json  rtn))))</span><br><span class=\"line\">        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))</span><br></pre></td></tr></table></figure>\n\n<p>While it looks complex, that is because it handles getting the topic name and payload from the input http message. It then calls the code that handles the internal data structures.  Finally, it builds the output response to send back to the client.  The response is most of the code. The response creates a hash, which is converted to JSON and written to the client.  The response hash fields: “topic-name”, “data”, “count” and the “key” value all encoded.</p>\n<p>The enqueue function takes a topic name and a message payload element as input. Its operation is simple: if the topic-name is present, add the message data to the queue and return.  If not present, create a new queue, add the message data to that queue and add that queue to the input topic-name, then return.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (add-data-to-topic key data)</span><br><span class=\"line\">  ;; check to see if key is in the topic-hash and add data to the correct topic</span><br><span class=\"line\">  (if (contains-topic key)</span><br><span class=\"line\">      (enqueue! (hash-ref topic-hash key) data)</span><br><span class=\"line\">      (begin</span><br><span class=\"line\">        (let ([q (make-queue)])</span><br><span class=\"line\">          (enqueue! q data)</span><br><span class=\"line\">          (hash-set! topic-hash key q)))))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Testing-what-we-have\"><a href=\"#Testing-what-we-have\" class=\"headerlink\" title=\"Testing what we have\"></a>Testing what we have</h1><p>Let’s test the program. To do so, use the racket program interpreter to run the front-door.rkt file. This will produce some messages. Now, in another terminal, let’s run the test code “enq.js” which will try and add a topic and payload to the message queue system. The output looks like:</p>\n<p>In the racket terminal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ racket  front-door.rkt</span><br><span class=\"line\">Your Web application is running at http://localhost:8000.</span><br><span class=\"line\">Stop this program at any time to terminate the Web Server.</span><br><span class=\"line\">enq: name: &quot;a-topic&quot;: data: &quot;(&quot;brownies and ice cream&quot;) hash-size:  1 hash-keys: &quot;(&quot;a-topic&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;count&quot;: 1, &quot;data&quot;: [&quot;brownies and ice cream&quot;], &quot;keys&quot;: [&quot;a-topic&quot;], &quot;topic-name&quot;:  &quot;a-topic&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the node code terminal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node enq.js -q a-topic -p &quot;brownies and ice cream&quot;</span><br><span class=\"line\">Options-&gt; &#123; que_name: &quot;a-topic&quot;,  payload: &quot;brownies and ice cream&quot; &#125;</span><br><span class=\"line\">Sending... &#123; que_name: &quot;a-topic&quot;,  payload: &quot;brownies and ice cream&quot; &#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">count: 1,</span><br><span class=\"line\">data: &quot;brownies and ice cream&quot;,</span><br><span class=\"line\">keys: [ &quot;a-topic&quot; ],</span><br><span class=\"line\">topic-name: &quot;a-topic&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quite a lot of output from each window, but you can see how the racket front-door program used “display” to send data to the console.</p>\n<p>This is the node program enq.js:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const fetch = require(&#x27;node-fetch&#x27;)</span><br><span class=\"line\">const commandlineargs = require(&#x27;command-line-args&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const optionDefinitions = [</span><br><span class=\"line\">    &#123; name: &#x27;que_name&#x27;, alias: &#x27;q&#x27;, type: String &#125;,</span><br><span class=\"line\">    &#123; name: &#x27;payload&#x27;, alias: &#x27;p&#x27;, type: String &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">const options = commandlineargs(optionDefinitions)</span><br><span class=\"line\">console.log(&quot;options-&gt;&quot;, options)</span><br><span class=\"line\"></span><br><span class=\"line\">var deft_q = &quot;james&quot;;</span><br><span class=\"line\">var deft_payload = [ &quot;cooking&quot;, &quot;slacking&quot;, &quot;hacking&quot; ];</span><br><span class=\"line\"></span><br><span class=\"line\">if (Object.keys(options).length != 0) &#123;</span><br><span class=\"line\">    deft_q = options.que_name</span><br><span class=\"line\">    deft_payload  = options.payload</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">var data = &#123;</span><br><span class=\"line\">    topicname: deft_q,</span><br><span class=\"line\">    payload: deft_payload</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&quot;sending...&quot;, data)</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(&#x27;http://localhost:8000/enque&#x27;, &#123;</span><br><span class=\"line\">    method: &#x27;post&#x27;,</span><br><span class=\"line\">    body: JSON.stringify(data),</span><br><span class=\"line\">    headers: &#123; &#x27;Content-Type&#x27; : &#x27;application/json&#x27; &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(res =&gt; res.json())</span><br><span class=\"line\">    .then(json =&gt; console.log(json));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This article described the front-door code for the message queue and demonstrated what the enqueue function would look like.  The fundamental data structure of the message queue is a hash table called topic-hash.  The system is composed of 3 parts: the front-door dispatcher, the data structures to store messages on topics and the middle ware code to manipulate that data structure. The code also demonstrated a node js based program to enqueue messages.</p>"},{"title":"Using-big-bang-for-simulation","date":"2022-01-09T17:48:37.000Z","_content":"\n\nThis post will explain how to use Racket's simulation facilities: big-bang.\n\n<!-- more -->\n\n# Introduction\n\nThe Racket programming language provides a simple to use facility for creating games and simulations. It is called big-bang. This facility provides easy to use methods to display a changing scene, capture mouse and key board inputs, start and stop the game or simulation, and handle the sequencing of time in your game.\n\nBig-bang builds upon the lower level capabilities of Racket's graphics subsystem. Big-bang enables you to create both 2 and 3D worlds. This post will focus on 2D.  To use Big-bang you will need to learn about handling images.  This post will show some of the simplest ways to bring images into your world.\n\nBig-bang provides several types of graphical presentations.  You can create movies with the \"animate\" and \"run-movie\" commands. These commands open worlds that just loop and show you a changing scene. You can also make interactive worlds (i.e. a game) that can be manipulated with the keyboard or mouse. Big-bang can be used to create simple worlds or games, but it can also create complex simulations of interacting worlds (think multi-user dungeon or MUD). We will create a simple game.\n\n## Big-bang and WorldState\n\nBig-bang operates by showing you the visualization state of the world at each time tick. You change the world state by using the key board or mouse or by writing programs that change the world state. So, big-bang just operates as a loop that shows you the state of the world on each time tick.\n\n### What is WorldState?\n\nBig-bang is really just a Racket function that manages this thing called \"WorldState\". It provides sub-commands to draw WorldState, capture keyboard or mouse activiy, and handle activity that happens on the tick. Please consult the docs on [big-bang][https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang] because it can do a lot.\n\nThe critical thing to understand is that big-bang and all of its sub-functions manage WorldState. For example, as a simulation is running, if you press the \"up arrow\" key then the handler function for \"up arrow\" has to change WorldState some how and return the new WorldState. Big-bang will take that new WorldState and set the current WorldState to what was returned. If you look into the documentation, all of the big-bang functions that start with \"on-X\" work this way.\n\n## Our 1st look\n\nLet's write a simple world to see how big-bang works. To get started, we can write a simple simulation that just shows a bird flying across the screen.  This first attempt will have the bird fly off the screen. We can provide a way to stop this simulation from the key board. First, study the documentation for big-bang and see what functions we will use.\n\nFrom the big-bang docs we see the following functions:\n\n* to-draw - create a scene to show WorldState\n* on-key - capture a key board key press, we can use the 'q' key to stop the simulation\n* on-tick - change and return the new WorldState.\n\nWe will use those 3 funtions. Big-bang always starts with a \"state-expr\", that is a function that creates and returns the initial state of the world. In our case, we can return the initial location of the bird. For simplicity, the bird can start near the left side of the screen and fly to the right. We'll deal with up and down in a minute.\n\nTo make managing the WorldState easy, we can use a structure for the vertical and horizontal position of the bird. Using a structure will make it easy to update the position of the bird as the simulation runs. Each clock tick will advance the bird by changing the vertical and horizontal location.\n\n### our plan:\n\n* bring in an image, size it and scale it and display it\n* create the bird position structure\n* write a handler for the tick\n* write a handler for the key board, this will stop the simulation for now\n* write the big-bang statement and test\n\n#### Bring in the image and scale it\nTo Bring in an image from disk, we will use the bitmap function to read a image from disk. The image will be too large, so we'll scale it down to size. Finally we'll define a variable to hold the scaled image so we can refer to it from the simulation.\n\nHere is my first try \n\n![flying crane, but too big](/images/flying-crane/flying-crane-screenshot-1.png)\n\nOk, we have the crane, but it is too large. We can use the image scale/xy function to make it smaller. The scale/xy function takes a scaling factor for x and y to change the size of the image.  I'll try to reduce it by 3/4 in each dimension. We will also save the image to a variable named crane. \n\n![flying crane, just right](/images/flying-crane/flying-crane-screenshot-3.png)\n\nUltimately, we want to draw  our crane into a scene, let's get that out of the way. We will use place-image for that task, it takes an image, the x & y position and the scene to draw into. One thing you have to get used to will be how the computer hardware has defined the coordinate system of our scene. On graph paper, you learned to define the point (0,0) in the lower-left side of the scene.  Increasing y goes up the page and increasing x goes to the right. Computer hardware defines the point (0,0) in the upper left. That means as the x or horizontal dimension increases to goes to the right (just like graph paper), but the increasing y dimension goes down the page.\n\nThe code to this point looks like:\n\n```\n\n#lang racket\n\n(require 2htdp/universe 2htdp/image)\n\n(define WIDTH 600)\n(define HEIGHT 400)\n\n(define crane (scale/xy 0.25 0.25 (bitmap \"flying-crane.png\")))\n\n;\n; place the bird image near the upper left corner of the scene\n(place-image crane 80 80 (empty-scene WIDTH HEIGHT))\n\n```\n\n#### Create the bird structure\n\nTo this point we have brought the bird image in, scaled it to size and drawn it in a empty scene. Now, we tackle the WorldState position structure for the position of the bird. It looks like this:\n\n```\n; define where the image is in the x and y dimensions\n(struct bird-posn (x y))\n\n```\n\nPretty simple. you  will see that the tick handling code creates and returns a new structure on each call. \n\nNow, let's turn the \"place-image\" code into the big-bang to-draw handler function. The \"to-draw\" function of big-bang takes one parameter: a render expression. That render expression receives the current WorldState from big-bang as it is called. We have to use the input WorldState, figure out where the image will be drawn and draw our image on our scene.\n\n```\n;\n; note the current worldstate is handed to us in 'w'\n(define (render w)\n    (place-image crane \n        ; get the current x position from 'w'\n        (bird-posn-x w) \n        ; get the current y position from 'w'\n        (bird-posn-y w) \n        ; place-image draws into this empty scene of size (WIDTH, HEIGHT)\n        (empty-scene WIDTH HEIGHT)))\n\n```\n\nTo create animation, we'll place the bird image on an empty scene each time render is called. We could easily make is look like the bird was flying over trees or grass by rendering those on to the scene first.\n\n#### The tick handler\n\nWe know we are going to use big-bang to call to-draw. The to-draw function is going to call the render function we just defined. But how is the world going to change? That is the job of the tick handler, handle-tick. Since the name of the big-bang function is \"on-\" something, we know we have to create a new world state and return it from handle-tick. That is why we used a structure. The handle-tick function looks like:\n\n```\n(define (tick-handler w)\n    (bird-posn (+ 10 (bird-posn-w w)) (bird-posn-y y)))\n\n```\n\n#### The key board handler\n\nThe key board handler is waiting for a 'q' key to stop the action. Big-bang uses a function called 'stop-with' to bring the animation to a close. \n\n```\n(define (handle-key w key)\n    (cond \n        [(key=? key \"q\") (stop-with w)])\n        [else w])\n\n```\n\n#### Big-bang initialization\n\nThe last thing to do is it write the big-bang statement. In this case we will create a function called start...\n\n```\n#lang racket\n(require 2htdp/universe 2htdp/image)\n\n;\n; set a width and height for the scene\n(define WIDTH 600)\n(define HEIGHT 400)\n\n;\n; bring the bird image in from disk\n(define crane (scale/xy 0.25 0.25 (bitmap \"flying-crane.png\")))\n\n;\n; our world state structure\n(struct bird-posn (x y))\n\n;\n; the render function for drawing\n(define (render w)\n  (place-image crane (bird-posn-x w) (bird-posn-y w) (empty-scene WIDTH HEIGHT)))\n\n;\n; the tick handler to move the bird\n(define (handle-tick w)\n  (bird-posn (+ 10 (bird-posn-x w)) (bird-posn-y w)))\n\n;\n; the key board handler, waiting for a \"q\" key to stop the action\n(define (handle-key w key)\n  (cond\n    [(key=? key \"q\") (stop-with w)]\n    [else w]))\n\n;\n; start the anaimation. Initially, the bird will be located on x=80, y=80\n(define (start)\n  (big-bang\n    (bird-posn 80 80) ; this is our initial WorldState structure!\n    (to-draw render)\n    (on-tick handle-tick)\n    (on-key handle-key)))\n\n```\n\nBig-bang will repeatedly call our handle-tick code, which advances the bird image 10 pixels to the right. If we press a 'q' key the animation will stop.\n\n# Conclusion\n\nRacket-lang provides an easy to use function to create games and movies. Here, we used it to simulate a bird image moving across the screen from left to right. The bird image just flys off the right side of the screen and keeps going until we call stop by pressing the 'q' key. Big-bang can do a lot. I encourage you to read the documentation.\n\nNext article, we'll add to the simple crane.rkt program to bring in more keyboard inputs and to make the image bounce off the edges of the scene (vs. fly off).\n\nthank you for reading!","source":"_posts/Using-big-bang-for-simulation.md","raw":"---\ntitle: Using-big-bang-for-simulation\ndate: 2022-01-09 12:48:37\ntags:\n  - Racket\ncategories:\n  - Programming\n  - big-bang\n---\n\n\nThis post will explain how to use Racket's simulation facilities: big-bang.\n\n<!-- more -->\n\n# Introduction\n\nThe Racket programming language provides a simple to use facility for creating games and simulations. It is called big-bang. This facility provides easy to use methods to display a changing scene, capture mouse and key board inputs, start and stop the game or simulation, and handle the sequencing of time in your game.\n\nBig-bang builds upon the lower level capabilities of Racket's graphics subsystem. Big-bang enables you to create both 2 and 3D worlds. This post will focus on 2D.  To use Big-bang you will need to learn about handling images.  This post will show some of the simplest ways to bring images into your world.\n\nBig-bang provides several types of graphical presentations.  You can create movies with the \"animate\" and \"run-movie\" commands. These commands open worlds that just loop and show you a changing scene. You can also make interactive worlds (i.e. a game) that can be manipulated with the keyboard or mouse. Big-bang can be used to create simple worlds or games, but it can also create complex simulations of interacting worlds (think multi-user dungeon or MUD). We will create a simple game.\n\n## Big-bang and WorldState\n\nBig-bang operates by showing you the visualization state of the world at each time tick. You change the world state by using the key board or mouse or by writing programs that change the world state. So, big-bang just operates as a loop that shows you the state of the world on each time tick.\n\n### What is WorldState?\n\nBig-bang is really just a Racket function that manages this thing called \"WorldState\". It provides sub-commands to draw WorldState, capture keyboard or mouse activiy, and handle activity that happens on the tick. Please consult the docs on [big-bang][https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang] because it can do a lot.\n\nThe critical thing to understand is that big-bang and all of its sub-functions manage WorldState. For example, as a simulation is running, if you press the \"up arrow\" key then the handler function for \"up arrow\" has to change WorldState some how and return the new WorldState. Big-bang will take that new WorldState and set the current WorldState to what was returned. If you look into the documentation, all of the big-bang functions that start with \"on-X\" work this way.\n\n## Our 1st look\n\nLet's write a simple world to see how big-bang works. To get started, we can write a simple simulation that just shows a bird flying across the screen.  This first attempt will have the bird fly off the screen. We can provide a way to stop this simulation from the key board. First, study the documentation for big-bang and see what functions we will use.\n\nFrom the big-bang docs we see the following functions:\n\n* to-draw - create a scene to show WorldState\n* on-key - capture a key board key press, we can use the 'q' key to stop the simulation\n* on-tick - change and return the new WorldState.\n\nWe will use those 3 funtions. Big-bang always starts with a \"state-expr\", that is a function that creates and returns the initial state of the world. In our case, we can return the initial location of the bird. For simplicity, the bird can start near the left side of the screen and fly to the right. We'll deal with up and down in a minute.\n\nTo make managing the WorldState easy, we can use a structure for the vertical and horizontal position of the bird. Using a structure will make it easy to update the position of the bird as the simulation runs. Each clock tick will advance the bird by changing the vertical and horizontal location.\n\n### our plan:\n\n* bring in an image, size it and scale it and display it\n* create the bird position structure\n* write a handler for the tick\n* write a handler for the key board, this will stop the simulation for now\n* write the big-bang statement and test\n\n#### Bring in the image and scale it\nTo Bring in an image from disk, we will use the bitmap function to read a image from disk. The image will be too large, so we'll scale it down to size. Finally we'll define a variable to hold the scaled image so we can refer to it from the simulation.\n\nHere is my first try \n\n![flying crane, but too big](/images/flying-crane/flying-crane-screenshot-1.png)\n\nOk, we have the crane, but it is too large. We can use the image scale/xy function to make it smaller. The scale/xy function takes a scaling factor for x and y to change the size of the image.  I'll try to reduce it by 3/4 in each dimension. We will also save the image to a variable named crane. \n\n![flying crane, just right](/images/flying-crane/flying-crane-screenshot-3.png)\n\nUltimately, we want to draw  our crane into a scene, let's get that out of the way. We will use place-image for that task, it takes an image, the x & y position and the scene to draw into. One thing you have to get used to will be how the computer hardware has defined the coordinate system of our scene. On graph paper, you learned to define the point (0,0) in the lower-left side of the scene.  Increasing y goes up the page and increasing x goes to the right. Computer hardware defines the point (0,0) in the upper left. That means as the x or horizontal dimension increases to goes to the right (just like graph paper), but the increasing y dimension goes down the page.\n\nThe code to this point looks like:\n\n```\n\n#lang racket\n\n(require 2htdp/universe 2htdp/image)\n\n(define WIDTH 600)\n(define HEIGHT 400)\n\n(define crane (scale/xy 0.25 0.25 (bitmap \"flying-crane.png\")))\n\n;\n; place the bird image near the upper left corner of the scene\n(place-image crane 80 80 (empty-scene WIDTH HEIGHT))\n\n```\n\n#### Create the bird structure\n\nTo this point we have brought the bird image in, scaled it to size and drawn it in a empty scene. Now, we tackle the WorldState position structure for the position of the bird. It looks like this:\n\n```\n; define where the image is in the x and y dimensions\n(struct bird-posn (x y))\n\n```\n\nPretty simple. you  will see that the tick handling code creates and returns a new structure on each call. \n\nNow, let's turn the \"place-image\" code into the big-bang to-draw handler function. The \"to-draw\" function of big-bang takes one parameter: a render expression. That render expression receives the current WorldState from big-bang as it is called. We have to use the input WorldState, figure out where the image will be drawn and draw our image on our scene.\n\n```\n;\n; note the current worldstate is handed to us in 'w'\n(define (render w)\n    (place-image crane \n        ; get the current x position from 'w'\n        (bird-posn-x w) \n        ; get the current y position from 'w'\n        (bird-posn-y w) \n        ; place-image draws into this empty scene of size (WIDTH, HEIGHT)\n        (empty-scene WIDTH HEIGHT)))\n\n```\n\nTo create animation, we'll place the bird image on an empty scene each time render is called. We could easily make is look like the bird was flying over trees or grass by rendering those on to the scene first.\n\n#### The tick handler\n\nWe know we are going to use big-bang to call to-draw. The to-draw function is going to call the render function we just defined. But how is the world going to change? That is the job of the tick handler, handle-tick. Since the name of the big-bang function is \"on-\" something, we know we have to create a new world state and return it from handle-tick. That is why we used a structure. The handle-tick function looks like:\n\n```\n(define (tick-handler w)\n    (bird-posn (+ 10 (bird-posn-w w)) (bird-posn-y y)))\n\n```\n\n#### The key board handler\n\nThe key board handler is waiting for a 'q' key to stop the action. Big-bang uses a function called 'stop-with' to bring the animation to a close. \n\n```\n(define (handle-key w key)\n    (cond \n        [(key=? key \"q\") (stop-with w)])\n        [else w])\n\n```\n\n#### Big-bang initialization\n\nThe last thing to do is it write the big-bang statement. In this case we will create a function called start...\n\n```\n#lang racket\n(require 2htdp/universe 2htdp/image)\n\n;\n; set a width and height for the scene\n(define WIDTH 600)\n(define HEIGHT 400)\n\n;\n; bring the bird image in from disk\n(define crane (scale/xy 0.25 0.25 (bitmap \"flying-crane.png\")))\n\n;\n; our world state structure\n(struct bird-posn (x y))\n\n;\n; the render function for drawing\n(define (render w)\n  (place-image crane (bird-posn-x w) (bird-posn-y w) (empty-scene WIDTH HEIGHT)))\n\n;\n; the tick handler to move the bird\n(define (handle-tick w)\n  (bird-posn (+ 10 (bird-posn-x w)) (bird-posn-y w)))\n\n;\n; the key board handler, waiting for a \"q\" key to stop the action\n(define (handle-key w key)\n  (cond\n    [(key=? key \"q\") (stop-with w)]\n    [else w]))\n\n;\n; start the anaimation. Initially, the bird will be located on x=80, y=80\n(define (start)\n  (big-bang\n    (bird-posn 80 80) ; this is our initial WorldState structure!\n    (to-draw render)\n    (on-tick handle-tick)\n    (on-key handle-key)))\n\n```\n\nBig-bang will repeatedly call our handle-tick code, which advances the bird image 10 pixels to the right. If we press a 'q' key the animation will stop.\n\n# Conclusion\n\nRacket-lang provides an easy to use function to create games and movies. Here, we used it to simulate a bird image moving across the screen from left to right. The bird image just flys off the right side of the screen and keeps going until we call stop by pressing the 'q' key. Big-bang can do a lot. I encourage you to read the documentation.\n\nNext article, we'll add to the simple crane.rkt program to bring in more keyboard inputs and to make the image bounce off the edges of the scene (vs. fly off).\n\nthank you for reading!","slug":"Using-big-bang-for-simulation","published":1,"updated":"2022-01-12T22:46:20.972Z","_id":"cky7lbioh0000gne84usi795g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This post will explain how to use Racket’s simulation facilities: big-bang.</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The Racket programming language provides a simple to use facility for creating games and simulations. It is called big-bang. This facility provides easy to use methods to display a changing scene, capture mouse and key board inputs, start and stop the game or simulation, and handle the sequencing of time in your game.</p>\n<p>Big-bang builds upon the lower level capabilities of Racket’s graphics subsystem. Big-bang enables you to create both 2 and 3D worlds. This post will focus on 2D.  To use Big-bang you will need to learn about handling images.  This post will show some of the simplest ways to bring images into your world.</p>\n<p>Big-bang provides several types of graphical presentations.  You can create movies with the “animate” and “run-movie” commands. These commands open worlds that just loop and show you a changing scene. You can also make interactive worlds (i.e. a game) that can be manipulated with the keyboard or mouse. Big-bang can be used to create simple worlds or games, but it can also create complex simulations of interacting worlds (think multi-user dungeon or MUD). We will create a simple game.</p>\n<h2 id=\"Big-bang-and-WorldState\"><a href=\"#Big-bang-and-WorldState\" class=\"headerlink\" title=\"Big-bang and WorldState\"></a>Big-bang and WorldState</h2><p>Big-bang operates by showing you the visualization state of the world at each time tick. You change the world state by using the key board or mouse or by writing programs that change the world state. So, big-bang just operates as a loop that shows you the state of the world on each time tick.</p>\n<h3 id=\"What-is-WorldState\"><a href=\"#What-is-WorldState\" class=\"headerlink\" title=\"What is WorldState?\"></a>What is WorldState?</h3><p>Big-bang is really just a Racket function that manages this thing called “WorldState”. It provides sub-commands to draw WorldState, capture keyboard or mouse activiy, and handle activity that happens on the tick. Please consult the docs on [big-bang][<a href=\"https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang%5D\">https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang]</a> because it can do a lot.</p>\n<p>The critical thing to understand is that big-bang and all of its sub-functions manage WorldState. For example, as a simulation is running, if you press the “up arrow” key then the handler function for “up arrow” has to change WorldState some how and return the new WorldState. Big-bang will take that new WorldState and set the current WorldState to what was returned. If you look into the documentation, all of the big-bang functions that start with “on-X” work this way.</p>\n<h2 id=\"Our-1st-look\"><a href=\"#Our-1st-look\" class=\"headerlink\" title=\"Our 1st look\"></a>Our 1st look</h2><p>Let’s write a simple world to see how big-bang works. To get started, we can write a simple simulation that just shows a bird flying across the screen.  This first attempt will have the bird fly off the screen. We can provide a way to stop this simulation from the key board. First, study the documentation for big-bang and see what functions we will use.</p>\n<p>From the big-bang docs we see the following functions:</p>\n<ul>\n<li>to-draw - create a scene to show WorldState</li>\n<li>on-key - capture a key board key press, we can use the ‘q’ key to stop the simulation</li>\n<li>on-tick - change and return the new WorldState.</li>\n</ul>\n<p>We will use those 3 funtions. Big-bang always starts with a “state-expr”, that is a function that creates and returns the initial state of the world. In our case, we can return the initial location of the bird. For simplicity, the bird can start near the left side of the screen and fly to the right. We’ll deal with up and down in a minute.</p>\n<p>To make managing the WorldState easy, we can use a structure for the vertical and horizontal position of the bird. Using a structure will make it easy to update the position of the bird as the simulation runs. Each clock tick will advance the bird by changing the vertical and horizontal location.</p>\n<h3 id=\"our-plan\"><a href=\"#our-plan\" class=\"headerlink\" title=\"our plan:\"></a>our plan:</h3><ul>\n<li>bring in an image, size it and scale it and display it</li>\n<li>create the bird position structure</li>\n<li>write a handler for the tick</li>\n<li>write a handler for the key board, this will stop the simulation for now</li>\n<li>write the big-bang statement and test</li>\n</ul>\n<h4 id=\"Bring-in-the-image-and-scale-it\"><a href=\"#Bring-in-the-image-and-scale-it\" class=\"headerlink\" title=\"Bring in the image and scale it\"></a>Bring in the image and scale it</h4><p>To Bring in an image from disk, we will use the bitmap function to read a image from disk. The image will be too large, so we’ll scale it down to size. Finally we’ll define a variable to hold the scaled image so we can refer to it from the simulation.</p>\n<p>Here is my first try </p>\n<p><img src=\"/images/flying-crane/flying-crane-screenshot-1.png\" alt=\"flying crane, but too big\"></p>\n<p>Ok, we have the crane, but it is too large. We can use the image scale/xy function to make it smaller. The scale/xy function takes a scaling factor for x and y to change the size of the image.  I’ll try to reduce it by 3/4 in each dimension. We will also save the image to a variable named crane. </p>\n<p><img src=\"/images/flying-crane/flying-crane-screenshot-3.png\" alt=\"flying crane, just right\"></p>\n<p>Ultimately, we want to draw  our crane into a scene, let’s get that out of the way. We will use place-image for that task, it takes an image, the x &amp; y position and the scene to draw into. One thing you have to get used to will be how the computer hardware has defined the coordinate system of our scene. On graph paper, you learned to define the point (0,0) in the lower-left side of the scene.  Increasing y goes up the page and increasing x goes to the right. Computer hardware defines the point (0,0) in the upper left. That means as the x or horizontal dimension increases to goes to the right (just like graph paper), but the increasing y dimension goes down the page.</p>\n<p>The code to this point looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require 2htdp/universe 2htdp/image)</span><br><span class=\"line\"></span><br><span class=\"line\">(define WIDTH 600)</span><br><span class=\"line\">(define HEIGHT 400)</span><br><span class=\"line\"></span><br><span class=\"line\">(define crane (scale/xy 0.25 0.25 (bitmap &quot;flying-crane.png&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; place the bird image near the upper left corner of the scene</span><br><span class=\"line\">(place-image crane 80 80 (empty-scene WIDTH HEIGHT))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Create-the-bird-structure\"><a href=\"#Create-the-bird-structure\" class=\"headerlink\" title=\"Create the bird structure\"></a>Create the bird structure</h4><p>To this point we have brought the bird image in, scaled it to size and drawn it in a empty scene. Now, we tackle the WorldState position structure for the position of the bird. It looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; define where the image is in the x and y dimensions</span><br><span class=\"line\">(struct bird-posn (x y))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Pretty simple. you  will see that the tick handling code creates and returns a new structure on each call. </p>\n<p>Now, let’s turn the “place-image” code into the big-bang to-draw handler function. The “to-draw” function of big-bang takes one parameter: a render expression. That render expression receives the current WorldState from big-bang as it is called. We have to use the input WorldState, figure out where the image will be drawn and draw our image on our scene.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; note the current worldstate is handed to us in &#x27;w&#x27;</span><br><span class=\"line\">(define (render w)</span><br><span class=\"line\">    (place-image crane </span><br><span class=\"line\">        ; get the current x position from &#x27;w&#x27;</span><br><span class=\"line\">        (bird-posn-x w) </span><br><span class=\"line\">        ; get the current y position from &#x27;w&#x27;</span><br><span class=\"line\">        (bird-posn-y w) </span><br><span class=\"line\">        ; place-image draws into this empty scene of size (WIDTH, HEIGHT)</span><br><span class=\"line\">        (empty-scene WIDTH HEIGHT)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To create animation, we’ll place the bird image on an empty scene each time render is called. We could easily make is look like the bird was flying over trees or grass by rendering those on to the scene first.</p>\n<h4 id=\"The-tick-handler\"><a href=\"#The-tick-handler\" class=\"headerlink\" title=\"The tick handler\"></a>The tick handler</h4><p>We know we are going to use big-bang to call to-draw. The to-draw function is going to call the render function we just defined. But how is the world going to change? That is the job of the tick handler, handle-tick. Since the name of the big-bang function is “on-“ something, we know we have to create a new world state and return it from handle-tick. That is why we used a structure. The handle-tick function looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (tick-handler w)</span><br><span class=\"line\">    (bird-posn (+ 10 (bird-posn-w w)) (bird-posn-y y)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"The-key-board-handler\"><a href=\"#The-key-board-handler\" class=\"headerlink\" title=\"The key board handler\"></a>The key board handler</h4><p>The key board handler is waiting for a ‘q’ key to stop the action. Big-bang uses a function called ‘stop-with’ to bring the animation to a close. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (handle-key w key)</span><br><span class=\"line\">    (cond </span><br><span class=\"line\">        [(key=? key &quot;q&quot;) (stop-with w)])</span><br><span class=\"line\">        [else w])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Big-bang-initialization\"><a href=\"#Big-bang-initialization\" class=\"headerlink\" title=\"Big-bang initialization\"></a>Big-bang initialization</h4><p>The last thing to do is it write the big-bang statement. In this case we will create a function called start…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\">(require 2htdp/universe 2htdp/image)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; set a width and height for the scene</span><br><span class=\"line\">(define WIDTH 600)</span><br><span class=\"line\">(define HEIGHT 400)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; bring the bird image in from disk</span><br><span class=\"line\">(define crane (scale/xy 0.25 0.25 (bitmap &quot;flying-crane.png&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; our world state structure</span><br><span class=\"line\">(struct bird-posn (x y))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the render function for drawing</span><br><span class=\"line\">(define (render w)</span><br><span class=\"line\">  (place-image crane (bird-posn-x w) (bird-posn-y w) (empty-scene WIDTH HEIGHT)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the tick handler to move the bird</span><br><span class=\"line\">(define (handle-tick w)</span><br><span class=\"line\">  (bird-posn (+ 10 (bird-posn-x w)) (bird-posn-y w)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the key board handler, waiting for a &quot;q&quot; key to stop the action</span><br><span class=\"line\">(define (handle-key w key)</span><br><span class=\"line\">  (cond</span><br><span class=\"line\">    [(key=? key &quot;q&quot;) (stop-with w)]</span><br><span class=\"line\">    [else w]))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; start the anaimation. Initially, the bird will be located on x=80, y=80</span><br><span class=\"line\">(define (start)</span><br><span class=\"line\">  (big-bang</span><br><span class=\"line\">    (bird-posn 80 80) ; this is our initial WorldState structure!</span><br><span class=\"line\">    (to-draw render)</span><br><span class=\"line\">    (on-tick handle-tick)</span><br><span class=\"line\">    (on-key handle-key)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Big-bang will repeatedly call our handle-tick code, which advances the bird image 10 pixels to the right. If we press a ‘q’ key the animation will stop.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Racket-lang provides an easy to use function to create games and movies. Here, we used it to simulate a bird image moving across the screen from left to right. The bird image just flys off the right side of the screen and keeps going until we call stop by pressing the ‘q’ key. Big-bang can do a lot. I encourage you to read the documentation.</p>\n<p>Next article, we’ll add to the simple crane.rkt program to bring in more keyboard inputs and to make the image bounce off the edges of the scene (vs. fly off).</p>\n<p>thank you for reading!</p>\n","site":{"data":{}},"excerpt":"<p>This post will explain how to use Racket’s simulation facilities: big-bang.</p>","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>The Racket programming language provides a simple to use facility for creating games and simulations. It is called big-bang. This facility provides easy to use methods to display a changing scene, capture mouse and key board inputs, start and stop the game or simulation, and handle the sequencing of time in your game.</p>\n<p>Big-bang builds upon the lower level capabilities of Racket’s graphics subsystem. Big-bang enables you to create both 2 and 3D worlds. This post will focus on 2D.  To use Big-bang you will need to learn about handling images.  This post will show some of the simplest ways to bring images into your world.</p>\n<p>Big-bang provides several types of graphical presentations.  You can create movies with the “animate” and “run-movie” commands. These commands open worlds that just loop and show you a changing scene. You can also make interactive worlds (i.e. a game) that can be manipulated with the keyboard or mouse. Big-bang can be used to create simple worlds or games, but it can also create complex simulations of interacting worlds (think multi-user dungeon or MUD). We will create a simple game.</p>\n<h2 id=\"Big-bang-and-WorldState\"><a href=\"#Big-bang-and-WorldState\" class=\"headerlink\" title=\"Big-bang and WorldState\"></a>Big-bang and WorldState</h2><p>Big-bang operates by showing you the visualization state of the world at each time tick. You change the world state by using the key board or mouse or by writing programs that change the world state. So, big-bang just operates as a loop that shows you the state of the world on each time tick.</p>\n<h3 id=\"What-is-WorldState\"><a href=\"#What-is-WorldState\" class=\"headerlink\" title=\"What is WorldState?\"></a>What is WorldState?</h3><p>Big-bang is really just a Racket function that manages this thing called “WorldState”. It provides sub-commands to draw WorldState, capture keyboard or mouse activiy, and handle activity that happens on the tick. Please consult the docs on [big-bang][<a href=\"https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang%5D\">https://docs.racket-lang.org/teachpack/2htdpuniverse.html?q=big-bang]</a> because it can do a lot.</p>\n<p>The critical thing to understand is that big-bang and all of its sub-functions manage WorldState. For example, as a simulation is running, if you press the “up arrow” key then the handler function for “up arrow” has to change WorldState some how and return the new WorldState. Big-bang will take that new WorldState and set the current WorldState to what was returned. If you look into the documentation, all of the big-bang functions that start with “on-X” work this way.</p>\n<h2 id=\"Our-1st-look\"><a href=\"#Our-1st-look\" class=\"headerlink\" title=\"Our 1st look\"></a>Our 1st look</h2><p>Let’s write a simple world to see how big-bang works. To get started, we can write a simple simulation that just shows a bird flying across the screen.  This first attempt will have the bird fly off the screen. We can provide a way to stop this simulation from the key board. First, study the documentation for big-bang and see what functions we will use.</p>\n<p>From the big-bang docs we see the following functions:</p>\n<ul>\n<li>to-draw - create a scene to show WorldState</li>\n<li>on-key - capture a key board key press, we can use the ‘q’ key to stop the simulation</li>\n<li>on-tick - change and return the new WorldState.</li>\n</ul>\n<p>We will use those 3 funtions. Big-bang always starts with a “state-expr”, that is a function that creates and returns the initial state of the world. In our case, we can return the initial location of the bird. For simplicity, the bird can start near the left side of the screen and fly to the right. We’ll deal with up and down in a minute.</p>\n<p>To make managing the WorldState easy, we can use a structure for the vertical and horizontal position of the bird. Using a structure will make it easy to update the position of the bird as the simulation runs. Each clock tick will advance the bird by changing the vertical and horizontal location.</p>\n<h3 id=\"our-plan\"><a href=\"#our-plan\" class=\"headerlink\" title=\"our plan:\"></a>our plan:</h3><ul>\n<li>bring in an image, size it and scale it and display it</li>\n<li>create the bird position structure</li>\n<li>write a handler for the tick</li>\n<li>write a handler for the key board, this will stop the simulation for now</li>\n<li>write the big-bang statement and test</li>\n</ul>\n<h4 id=\"Bring-in-the-image-and-scale-it\"><a href=\"#Bring-in-the-image-and-scale-it\" class=\"headerlink\" title=\"Bring in the image and scale it\"></a>Bring in the image and scale it</h4><p>To Bring in an image from disk, we will use the bitmap function to read a image from disk. The image will be too large, so we’ll scale it down to size. Finally we’ll define a variable to hold the scaled image so we can refer to it from the simulation.</p>\n<p>Here is my first try </p>\n<p><img src=\"/images/flying-crane/flying-crane-screenshot-1.png\" alt=\"flying crane, but too big\"></p>\n<p>Ok, we have the crane, but it is too large. We can use the image scale/xy function to make it smaller. The scale/xy function takes a scaling factor for x and y to change the size of the image.  I’ll try to reduce it by 3/4 in each dimension. We will also save the image to a variable named crane. </p>\n<p><img src=\"/images/flying-crane/flying-crane-screenshot-3.png\" alt=\"flying crane, just right\"></p>\n<p>Ultimately, we want to draw  our crane into a scene, let’s get that out of the way. We will use place-image for that task, it takes an image, the x &amp; y position and the scene to draw into. One thing you have to get used to will be how the computer hardware has defined the coordinate system of our scene. On graph paper, you learned to define the point (0,0) in the lower-left side of the scene.  Increasing y goes up the page and increasing x goes to the right. Computer hardware defines the point (0,0) in the upper left. That means as the x or horizontal dimension increases to goes to the right (just like graph paper), but the increasing y dimension goes down the page.</p>\n<p>The code to this point looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#lang racket</span><br><span class=\"line\"></span><br><span class=\"line\">(require 2htdp/universe 2htdp/image)</span><br><span class=\"line\"></span><br><span class=\"line\">(define WIDTH 600)</span><br><span class=\"line\">(define HEIGHT 400)</span><br><span class=\"line\"></span><br><span class=\"line\">(define crane (scale/xy 0.25 0.25 (bitmap &quot;flying-crane.png&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; place the bird image near the upper left corner of the scene</span><br><span class=\"line\">(place-image crane 80 80 (empty-scene WIDTH HEIGHT))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Create-the-bird-structure\"><a href=\"#Create-the-bird-structure\" class=\"headerlink\" title=\"Create the bird structure\"></a>Create the bird structure</h4><p>To this point we have brought the bird image in, scaled it to size and drawn it in a empty scene. Now, we tackle the WorldState position structure for the position of the bird. It looks like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; define where the image is in the x and y dimensions</span><br><span class=\"line\">(struct bird-posn (x y))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Pretty simple. you  will see that the tick handling code creates and returns a new structure on each call. </p>\n<p>Now, let’s turn the “place-image” code into the big-bang to-draw handler function. The “to-draw” function of big-bang takes one parameter: a render expression. That render expression receives the current WorldState from big-bang as it is called. We have to use the input WorldState, figure out where the image will be drawn and draw our image on our scene.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; note the current worldstate is handed to us in &#x27;w&#x27;</span><br><span class=\"line\">(define (render w)</span><br><span class=\"line\">    (place-image crane </span><br><span class=\"line\">        ; get the current x position from &#x27;w&#x27;</span><br><span class=\"line\">        (bird-posn-x w) </span><br><span class=\"line\">        ; get the current y position from &#x27;w&#x27;</span><br><span class=\"line\">        (bird-posn-y w) </span><br><span class=\"line\">        ; place-image draws into this empty scene of size (WIDTH, HEIGHT)</span><br><span class=\"line\">        (empty-scene WIDTH HEIGHT)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To create animation, we’ll place the bird image on an empty scene each time render is called. We could easily make is look like the bird was flying over trees or grass by rendering those on to the scene first.</p>\n<h4 id=\"The-tick-handler\"><a href=\"#The-tick-handler\" class=\"headerlink\" title=\"The tick handler\"></a>The tick handler</h4><p>We know we are going to use big-bang to call to-draw. The to-draw function is going to call the render function we just defined. But how is the world going to change? That is the job of the tick handler, handle-tick. Since the name of the big-bang function is “on-“ something, we know we have to create a new world state and return it from handle-tick. That is why we used a structure. The handle-tick function looks like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (tick-handler w)</span><br><span class=\"line\">    (bird-posn (+ 10 (bird-posn-w w)) (bird-posn-y y)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"The-key-board-handler\"><a href=\"#The-key-board-handler\" class=\"headerlink\" title=\"The key board handler\"></a>The key board handler</h4><p>The key board handler is waiting for a ‘q’ key to stop the action. Big-bang uses a function called ‘stop-with’ to bring the animation to a close. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(define (handle-key w key)</span><br><span class=\"line\">    (cond </span><br><span class=\"line\">        [(key=? key &quot;q&quot;) (stop-with w)])</span><br><span class=\"line\">        [else w])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Big-bang-initialization\"><a href=\"#Big-bang-initialization\" class=\"headerlink\" title=\"Big-bang initialization\"></a>Big-bang initialization</h4><p>The last thing to do is it write the big-bang statement. In this case we will create a function called start…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#lang racket</span><br><span class=\"line\">(require 2htdp/universe 2htdp/image)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; set a width and height for the scene</span><br><span class=\"line\">(define WIDTH 600)</span><br><span class=\"line\">(define HEIGHT 400)</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; bring the bird image in from disk</span><br><span class=\"line\">(define crane (scale/xy 0.25 0.25 (bitmap &quot;flying-crane.png&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; our world state structure</span><br><span class=\"line\">(struct bird-posn (x y))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the render function for drawing</span><br><span class=\"line\">(define (render w)</span><br><span class=\"line\">  (place-image crane (bird-posn-x w) (bird-posn-y w) (empty-scene WIDTH HEIGHT)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the tick handler to move the bird</span><br><span class=\"line\">(define (handle-tick w)</span><br><span class=\"line\">  (bird-posn (+ 10 (bird-posn-x w)) (bird-posn-y w)))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; the key board handler, waiting for a &quot;q&quot; key to stop the action</span><br><span class=\"line\">(define (handle-key w key)</span><br><span class=\"line\">  (cond</span><br><span class=\"line\">    [(key=? key &quot;q&quot;) (stop-with w)]</span><br><span class=\"line\">    [else w]))</span><br><span class=\"line\"></span><br><span class=\"line\">;</span><br><span class=\"line\">; start the anaimation. Initially, the bird will be located on x=80, y=80</span><br><span class=\"line\">(define (start)</span><br><span class=\"line\">  (big-bang</span><br><span class=\"line\">    (bird-posn 80 80) ; this is our initial WorldState structure!</span><br><span class=\"line\">    (to-draw render)</span><br><span class=\"line\">    (on-tick handle-tick)</span><br><span class=\"line\">    (on-key handle-key)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Big-bang will repeatedly call our handle-tick code, which advances the bird image 10 pixels to the right. If we press a ‘q’ key the animation will stop.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Racket-lang provides an easy to use function to create games and movies. Here, we used it to simulate a bird image moving across the screen from left to right. The bird image just flys off the right side of the screen and keeps going until we call stop by pressing the ‘q’ key. Big-bang can do a lot. I encourage you to read the documentation.</p>\n<p>Next article, we’ll add to the simple crane.rkt program to bring in more keyboard inputs and to make the image bounce off the edges of the scene (vs. fly off).</p>\n<p>thank you for reading!</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvcvb0a80005i7e8fld57hdy","category_id":"ckvcvb0a20002i7e82g4y1q32","_id":"ckvcvb0ae000di7e86v8gf338"},{"post_id":"ckvcvb09p0000i7e8g8j4gmcw","category_id":"ckvcvb0a20002i7e82g4y1q32","_id":"ckvcvb0ag000ii7e8fadparco"},{"post_id":"ckvcvb09z0001i7e89ynjhxs1","category_id":"ckvcvb0aa0007i7e80mh24pa5","_id":"ckvcvb0ai000li7e87wargtt5"},{"post_id":"ckvcvb0a90006i7e8aezr6gzt","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0ao000ri7e83nipgeic"},{"post_id":"ckvcvb0ah000ki7e81v972pwz","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0aq000ui7e8armm9kwx"},{"post_id":"ckvcvb0am000oi7e8f2cy7n9w","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0as000xi7e80wp21zgl"},{"post_id":"ckvcvb0ab000ai7e85amsd4wm","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0aw0012i7e8dzuy18id"},{"post_id":"ckvcvb0an000pi7e8arj6a165","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0aw0014i7e80kgnahrg"},{"post_id":"ckvcvb0ad000ci7e8ew1mells","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0ax0017i7e86qwk5pom"},{"post_id":"ckvcvb0ap000ti7e84bl07eoo","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0ay001ai7e897zbb6sf"},{"post_id":"ckvcvb0ap000ti7e84bl07eoo","category_id":"ckvcvb0av0010i7e821y31m8a","_id":"ckvcvb0az001ci7e84zt2hxwz"},{"post_id":"ckvcvb0as000zi7e81f5v8clo","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0b0001di7e8h50uc8df"},{"post_id":"ckvcvb0as000zi7e81f5v8clo","category_id":"ckvcvb0ax0015i7e8br4e3bs0","_id":"ckvcvb0b1001fi7e84bq80mk4"},{"post_id":"ckvcvb0bl0024i7e8b6b6af8q","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"ckvcvb0bs0029i7e81z7z1zjw"},{"post_id":"ckvcvb0bl0024i7e8b6b6af8q","category_id":"ckvcvb0ax0015i7e8br4e3bs0","_id":"ckvcvb0bs002bi7e8b8axg63l"},{"post_id":"ckvcvb0aq000wi7e8ad9c210p","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"cky7lbioj0001gne88zfof63v"},{"post_id":"ckvcvb0aq000wi7e8ad9c210p","category_id":"ckvcvb0ax0015i7e8br4e3bs0","_id":"cky7lbiok0002gne84vdla50o"},{"post_id":"ckvcvb0bn0025i7e81hfg5tfc","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"cky7lbiot0005gne8b823ghd2"},{"post_id":"ckvcvb0bn0025i7e81hfg5tfc","category_id":"ckvcvb0ax0015i7e8br4e3bs0","_id":"cky7lbiot0006gne84ft55kkz"},{"post_id":"ckvcvb0bq0027i7e82o99bnbs","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"cky7lbiot0007gne8cwxp2kmu"},{"post_id":"ckvcvb0bq0027i7e82o99bnbs","category_id":"ckvcvb0ax0015i7e8br4e3bs0","_id":"cky7lbiou0008gne8bv9y3lq7"},{"post_id":"cky7lbioh0000gne84usi795g","category_id":"ckvcvb0ae000ei7e80latd0y9","_id":"cky7lbiou0009gne80rur22nm"},{"post_id":"cky7lbioh0000gne84usi795g","category_id":"cky7lbiok0004gne849jng3vg","_id":"cky7lbiou000agne87mho7wtq"}],"PostTag":[{"post_id":"ckvcvb09p0000i7e8g8j4gmcw","tag_id":"ckvcvb0a50003i7e85n7ggr1o","_id":"ckvcvb0ab0009i7e8f0qn31wx"},{"post_id":"ckvcvb0a90006i7e8aezr6gzt","tag_id":"ckvcvb0a50003i7e85n7ggr1o","_id":"ckvcvb0ad000bi7e829cgem9x"},{"post_id":"ckvcvb0ab000ai7e85amsd4wm","tag_id":"ckvcvb0a50003i7e85n7ggr1o","_id":"ckvcvb0af000gi7e851tq1amm"},{"post_id":"ckvcvb09z0001i7e89ynjhxs1","tag_id":"ckvcvb0aa0008i7e82bped4xl","_id":"ckvcvb0ah000ji7e8e2036qs2"},{"post_id":"ckvcvb0a60004i7e8di27hmfd","tag_id":"ckvcvb0ae000fi7e8db64h57e","_id":"ckvcvb0aq000vi7e8cze17srv"},{"post_id":"ckvcvb0a60004i7e8di27hmfd","tag_id":"ckvcvb0ai000ni7e8bjhd3d68","_id":"ckvcvb0as000yi7e8dvw36tmn"},{"post_id":"ckvcvb0a80005i7e8fld57hdy","tag_id":"ckvcvb0ap000si7e86c9fhnh8","_id":"ckvcvb0aw0013i7e82zpf8si5"},{"post_id":"ckvcvb0ad000ci7e8ew1mells","tag_id":"ckvcvb0av0011i7e83ru942gt","_id":"ckvcvb0ax0018i7e82332a74c"},{"post_id":"ckvcvb0ad000ci7e8ew1mells","tag_id":"ckvcvb0a50003i7e85n7ggr1o","_id":"ckvcvb0ay0019i7e8eq86dmom"},{"post_id":"ckvcvb0af000hi7e8f5rabaet","tag_id":"ckvcvb0ax0016i7e8gxqj4flh","_id":"ckvcvb0b1001gi7e88gw004gg"},{"post_id":"ckvcvb0af000hi7e8f5rabaet","tag_id":"ckvcvb0ay001bi7e8her46700","_id":"ckvcvb0b1001hi7e8h1znbogp"},{"post_id":"ckvcvb0ah000ki7e81v972pwz","tag_id":"ckvcvb0ax0016i7e8gxqj4flh","_id":"ckvcvb0b2001ki7e82m1s73mb"},{"post_id":"ckvcvb0ah000ki7e81v972pwz","tag_id":"ckvcvb0b1001ii7e84zlxcj95","_id":"ckvcvb0b2001li7e8akp91086"},{"post_id":"ckvcvb0am000oi7e8f2cy7n9w","tag_id":"ckvcvb0b2001ji7e82bs7bymq","_id":"ckvcvb0b5001qi7e86euh9xjt"},{"post_id":"ckvcvb0am000oi7e8f2cy7n9w","tag_id":"ckvcvb0b3001mi7e8crnfatpq","_id":"ckvcvb0b5001ri7e8890t8p75"},{"post_id":"ckvcvb0am000oi7e8f2cy7n9w","tag_id":"ckvcvb0ax0016i7e8gxqj4flh","_id":"ckvcvb0b5001ti7e8eqlzfx18"},{"post_id":"ckvcvb0am000oi7e8f2cy7n9w","tag_id":"ckvcvb0b3001oi7e85d96f771","_id":"ckvcvb0b5001ui7e882el0bpr"},{"post_id":"ckvcvb0an000pi7e8arj6a165","tag_id":"ckvcvb0b4001pi7e8g2y66i5u","_id":"ckvcvb0b6001wi7e8dt8nc4bk"},{"post_id":"ckvcvb0an000pi7e8arj6a165","tag_id":"ckvcvb0a50003i7e85n7ggr1o","_id":"ckvcvb0b6001xi7e84dov6tz7"},{"post_id":"ckvcvb0ap000ti7e84bl07eoo","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0b7001zi7e89qsfb237"},{"post_id":"ckvcvb0ap000ti7e84bl07eoo","tag_id":"ckvcvb0b6001vi7e809g42gpm","_id":"ckvcvb0b70020i7e86gyd1f5e"},{"post_id":"ckvcvb0aq000wi7e8ad9c210p","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0b70022i7e8c46i4ggg"},{"post_id":"ckvcvb0as000zi7e81f5v8clo","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0b80023i7e8auze9w7o"},{"post_id":"ckvcvb0bl0024i7e8b6b6af8q","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0bq0026i7e88utb7muf"},{"post_id":"ckvcvb0bn0025i7e81hfg5tfc","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0br0028i7e823nn38ey"},{"post_id":"ckvcvb0bq0027i7e82o99bnbs","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"ckvcvb0bs002ai7e80v5yf2dj"},{"post_id":"cky7lbioh0000gne84usi795g","tag_id":"ckvcvb0b5001si7e81jl12zvj","_id":"cky7lbiok0003gne86ugqd0si"}],"Tag":[{"name":"Java","_id":"ckvcvb0a50003i7e85n7ggr1o"},{"name":"Containers","_id":"ckvcvb0aa0008i7e82bped4xl"},{"name":"Design","_id":"ckvcvb0ae000fi7e8db64h57e"},{"name":"Insight","_id":"ckvcvb0ai000ni7e8bjhd3d68"},{"name":"Mobile","_id":"ckvcvb0ap000si7e86c9fhnh8"},{"name":"Cucumber","_id":"ckvcvb0av0011i7e83ru942gt"},{"name":"React","_id":"ckvcvb0ax0016i7e8gxqj4flh"},{"name":"Jest","_id":"ckvcvb0ay001bi7e8her46700"},{"name":"Javascript","_id":"ckvcvb0b1001ii7e84zlxcj95"},{"name":"Node","_id":"ckvcvb0b2001ji7e82bs7bymq"},{"name":"Express","_id":"ckvcvb0b3001mi7e8crnfatpq"},{"name":"MongoDB","_id":"ckvcvb0b3001oi7e85d96f771"},{"name":"REST","_id":"ckvcvb0b4001pi7e8g2y66i5u"},{"name":"Racket","_id":"ckvcvb0b5001si7e81jl12zvj"},{"name":"Docker","_id":"ckvcvb0b6001vi7e809g42gpm"}]}}